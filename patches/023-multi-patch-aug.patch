diff --color -rupN old/amigaos/amigaos_stuff.c new/amigaos/amigaos_stuff.c
--- old/amigaos/amigaos_stuff.c	2023-08-09 22:46:58.000000000 +0200
+++ new/amigaos/amigaos_stuff.c	2023-08-29 15:17:02.000000000 +0200
@@ -19,45 +19,57 @@
 #define HAVE_AREXX 1
 
 #ifdef __AMIGAOS4__
-#include <proto/dos.h>
+//#include <proto/dos.h>
 
-#define debug_level 0
+/*#define debug_level 0
 
 #if debug_level > 0
-#define dprintf( ... ) Printf( __VA_ARGS__ )
+#define dprintf( ... ) DebugPrintF( __VA_ARGS__ )
 #else
 #define dprintf(...)
 #endif
 
 #else
-#define dprintf(...)
+#define dprintf(...)*/
+#include "debug.h"
 #endif
 
-APTR pr_WindowPtr;
-
 #include <exec/types.h>
 #include <proto/timer.h>
 #include <proto/dos.h>
 #include <proto/exec.h>
 #include <proto/asl.h>
-#include <proto/wb.h>
-#include <proto/icon.h>
 #include <devices/ahi.h>
 
-#include <proto/requester.h>
-#include <classes/requester.h>
+// #include <proto/requester.h>
+// #include <classes/requester.h>
 
 /* ARexx */
 #include "arexx.h"
 /* ARexx */
 
+APTR pr_WindowPtr;
+
 static struct Task *current_task;
 
+
+BOOL open_lib( const char *name, int ver , const char *iname, int iver, struct Library **base, struct Interface **interface);
+
+
 // extern void ShowAbout(void);
 extern void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE);
 
+#include <stdbool.h>
+#include "../osdep/keycodes.h" // KEY_ESC
+#include "../mp_fifo.h"        // mplayer_put_key()
+extern int spawn_count;        // Iconify()
+extern BOOL Iconify(struct Window *w);             // cgx_common.c
+extern BOOL UnIconify(struct Window *w);           // cgx_common.c
+extern bool empty_msg_queue(struct MsgPort *port); // cgx_common.c
 
+#ifndef __amigaos4__
 #include <clib/alib_protos.h>
+#endif
 
 #include <proto/icon.h>
 #include <proto/dos.h>
@@ -65,6 +77,9 @@ extern void PrintMsg(CONST_STRPTR text,
 #include <proto/application.h>
 #include <proto/intuition.h>
 #include <proto/graphics.h>
+#include <proto/utility.h>
+#include <proto/icon.h>
+#include <proto/datatypes.h>
 
 #include <libraries/application.h>
 
@@ -81,57 +96,34 @@ extern void PrintMsg(CONST_STRPTR text,
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+// #include <stdarg.h>
+
 
 #include "version.h"
 #include "mp_msg.h"
 #include "amigaos_stuff.h"
 
-#include "SDL/SDL_syswm.h"
-void AmigaOS_ScreenTitle(const char *vo_str)
-{
-  static char scrtitle[128];
-  SDL_SysWMinfo wmInfo;
-  SDL_GetWMInfo(&wmInfo);
-  struct Window *win = (struct Window*)wmInfo.window;
-
-  sprintf(scrtitle, AMIGA_VERSION" (%s)\0",vo_str);
-
-  SetWindowTitles(win, (CONST_STRPTR)~0, scrtitle);
-
-}
-
 const char version[] = "$VER: " AMIGA_VERSION " " VERSION ;
 // const char version[] = "$VER: AMIGA_VERSION 1.1 (10.01.2014) VERSION ";
-//const char STACK[] __attribute((used))   = "$STACK: 5000000";
-const char STACK[] __attribute((used))   = "$STACK: 500000";
+const char STACK[] __attribute((used)) = "$STACK: 500000";
 
 char *SCREENSHOTDIR = NULL;
 char *EXTPATTERN = NULL;
 char *SUBEXTPAT = NULL;
 char *TOOL_MPGUI = NULL;
 
-char fullpath_mplayer[1024];
+char fullpath_mplayer[1024] = "";
 
-static unsigned char ApplicationName[100];
+// static unsigned char ApplicationName[16];
 
-BOOL AISS_MENU			= TRUE ;	// zzd10h
-BOOL AISS_MENU_TO_SCALE		= FALSE ;	// zzd10h
-int AISS_MENU_SIZE		= 24 ;	// zzd10h Setted by MenuImageSize env variable
-BOOL MENUCLASS_SUPPORT		= TRUE ;	// TRUE if MenuClass menu is supported (OS4 FE with intuition.library >= 54.6)
-//BOOL INFOWINDOWCLASS_SUPPORT	= FALSE ;	// Check if AEon Infowindow class is available
-BOOL BANNER_DISPLAY		= TRUE ;	// Display banner ? SETENV SAVE Disable_Banner_Images 1 to disable them
-extern struct Catalog *catalog ;
-//javier 
-//#define CATCOMP_NUMBERS
-//#define CATCOMP_STRINGS
-#define MPlayer_NUMBERS
-#define MPlayer_STRINGS
+BOOL AISS_MENU          = TRUE ;	// zzd10h
+BOOL AISS_MENU_TO_SCALE = FALSE ;	// zzd10h
+int AISS_MENU_SIZE      = 24 ;	// zzd10h Setted by MenuImageSize env variable
+BOOL MENUCLASS_SUPPORT  = FALSE ;	// TRUE if MenuClass menu is supported (OS4 FE with intuition.library >= 54.6)
+// BOOL INFOWINDOWCLASS_SUPPORT	= FALSE ;	// Check if AEon Infowindow class is available
+BOOL BANNER_DISPLAY     = TRUE ;	// Display banner ? SETENV SAVE Disable_Banner_Images 1 to disable them
 
-#include "MPlayer_catalog.h"
-extern STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
-#define CS(id) myGetCatalogStr(catalog,id,id##_STR)
-
-int SWAPLONG( int i )
+/*int SWAPLONG( int i )
 {
 	int o;
 	asm
@@ -151,106 +143,117 @@ short SWAPWORD( short hi )
 		:  "=r" (ho) : "r" (&hi), "r" (&hi)  : "r0"
 	);
 	return ho;
-}
+}*/
+
 
 struct Process *p = NULL; 	// This to remove
-APTR OldPtr =NULL;		// The requesters
+APTR OldPtr = NULL;		// The requesters
 
 #ifdef USE_ASYNCIO
-struct Library			*AsyncIOBase = NULL;
-struct AsyncIOIFace		*IAsyncIO=NULL;
+struct Library			*AsyncIOBase  = NULL;
+struct AsyncIOIFace		*IAsyncIO = NULL;
 #endif
 
 APTR window_mx;
 
 // Macros needs this global
-struct ARexxIFace		*IARexx		= NULL;
+// struct ARexxIFace		*IARexx = NULL;
+
+struct Device		*TimerBase = NULL;
+extern struct TimerIFace *ITimer; // NOTE: SDL 1.2.6 already 'GetInterface()'
+
+struct Library		*IconBase = NULL;
+struct IconIFace		*IIcon  = NULL;
 
-struct Device		*TimerBase		= NULL;
-// extern struct TimerIFace *ITimer;
+struct Library *DataTypesBase     = NULL;
+struct DataTypesIFace *IDataTypes = NULL;
 
-struct Library		*AslBase		= NULL;
-struct AslIFace		*IAsl = NULL;
+struct Library		*AslBase = NULL;
+struct AslIFace		*IAsl   = NULL;
 
-struct Library		*GadToolsBase	= NULL;
-struct AslIFace		*IGadTools		= NULL;
+struct Library		*GadToolsBase = NULL;
+struct AslIFace		*IGadTools   = NULL;
 
-struct Library		*ApplicationBase	= NULL;
-struct ApplicationIFace	*IApplication	= NULL;
+struct Library		*ApplicationBase      = NULL;
+struct ApplicationIFace	*IApplication = NULL;
 
-struct Library		*GraphicsBase	= NULL;
-struct GraphicsIFace	*IGraphics		= NULL;
+struct Library		*GraphicsBase   = NULL;
+struct GraphicsIFace	*IGraphics = NULL;
 
-struct Library		*WorkbenchBase	= NULL;
-struct WorkbenchIFace	*IWorkbench		= NULL;
+struct Library		*WorkbenchBase    = NULL;
+struct WorkbenchIFace	*IWorkbench = NULL;
 
-struct Library		*KeymapBase		= NULL;
-struct KeymapIFace	*IKeymap		= NULL;
+struct Library		*KeymapBase = NULL;
+struct KeymapIFace	*IKeymap = NULL;
 
-struct Library		*LayersBase		= NULL;
-struct LayersIFace	*ILayers		= NULL;
+struct Library		*LayersBase = NULL;
+struct LayersIFace	*ILayers = NULL;
 
-struct Library		*Picasso96Base	= NULL;
-struct IP96IFace		*IP96			= NULL;
+struct Library		*Picasso96Base = NULL;
+struct IP96IFace		*IP96        = NULL;
 
-struct DebugIFace		*IDebug		= NULL;
+struct DebugIFace		*IDebug = NULL; // needed by libdvdcss ¿:-/
 
-struct Library		*RequesterBase	= NULL;
-struct RequesterIFace	*IRequester		= NULL;
+struct Library *UtilityBase   = NULL;
+struct UtilityIFace *IUtility = NULL;
+
+struct ClassLibrary *RequesterBase = NULL, *InfoWindowBase = NULL, *BitMapBase = NULL;
+Class *RequesterClass = NULL, *InfoWindowClass = NULL, *BitMapClass = NULL;
 
 #ifdef HAVE_CGX
-struct Library *CyberGfxBase = NULL;
+struct Library *CyberGfxBase    = NULL;
 struct CyberGfxIFace *ICyberGfx = NULL;
 #endif
 
 struct Library * IntuitionBase = NULL;
 struct IntuitionIFace *IIntuition_SDL_workaround = NULL;
+struct IntuitionIFace *IIntuition = NULL;
 
-UBYTE  TimerDevice = -1; // -1 -> not opened
-struct TimeRequest 		 *TimerRequest	= NULL;
-struct MsgPort 	   		 *TimerMsgPort	= NULL;
+// UBYTE  TimerDevice = -1; // -1 -> not opened
+struct TimeRequest *TimerRequest = NULL;
+struct MsgPort     *TimerMsgPort = NULL;
 
 static char **AmigaOS_argv = NULL;
 static int AmigaOS_argc = 0;
 uint32 AppID = 0;
+struct MsgPort *applibPort = NULL;
+
+
+extern STRPTR ARexxPortName;
 
 static void Free_Arg(void);
-extern struct DiskObject *DIcon;
-extern struct AppIcon 	 *MPLAppIcon;
+// extern struct DiskObject *DIcon;
+// extern struct AppIcon *MPLAppIcon;
 
 // Catalog zzd10h
-struct LocaleIFace	*ILocale	= NULL;
-struct Catalog *catalog			= NULL;
-// #define CATCOMP_NUMBERS
-// #define CATCOMP_STRINGS
-// #include "MPlayer_catalog.h"
-// infoWindow class
-struct ClassLibrary   *InfoWindowBase;
-Class *InfoWindowClass;
+struct Library *LocaleBase  = NULL;
+struct LocaleIFace *ILocale = NULL;
+struct Catalog *catalog = NULL;
+#define MPlayer_NUMBERS
+#define MPlayer_STRINGS
+#include "MPlayer_catalog.h"
+CONST_STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
+#define CS(id) myGetCatalogStr(catalog,id,id##_STR)
 
 // Thomas Rapp function for catalog
-STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def)
+CONST_STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def)
 {
 	if (catalog)
-		return ((STRPTR)GetCatalogStr (catalog,num,def));
+		return ((CONST_STRPTR)GetCatalogStr (catalog,num,def));
 
-	return (def);
+	return ((CONST_STRPTR)def);
 }
-STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
-#define CS(id) myGetCatalogStr(catalog,id,id##_STR)
-
 
-
-#define GET_PATH(drawer,file,dest)													\
-	dest = (char *) malloc( ( strlen(drawer) + strlen(file) + 2 ) * sizeof(char) );					\
-	if (dest)																		\
-	{                                                                       					  					\
-		if ( strlen(drawer) == 0) strcpy(dest, file);										\
-		else																		\
-		{																		\
-			if ( (drawer[ strlen(drawer) - 1  ] == ':')  ) sprintf(dest, "%s%s", drawer, file);			\
-			else sprintf(dest, "%s/%s", drawer, file);										\
-		}																		\
+#define GET_PATH(drawer,file,dest)                                                      \
+	dest = (char *) malloc( ( strlen(drawer) + strlen(file) + 2 ) * sizeof(char) );        \
+	if (dest)                                                                              \
+	{                                                                                      \
+		if ( strlen(drawer) == 0) strcpy(dest, file);                                         \
+		else                                                                                  \
+		{                                                                                     \
+			if ( (drawer[ strlen(drawer) - 1  ] == ':')  ) sprintf(dest, "%s%s", drawer, file);  \
+			else sprintf(dest, "%s/%s", drawer, file);                                           \
+		}                                                                                     \
 	}
 
 /****************************/
@@ -272,28 +275,31 @@ static void Free_Arg(void)
 // Markus AltiVec info
 extern struct Screen *FrontMostScr(void); // amigaos/menu.c
 
-VARARGS68K VOID EasyRequester(CONST_STRPTR text, CONST_STRPTR button, ...)
-
+VOID VARARGS68K EasyRequester(CONST_STRPTR text, CONST_STRPTR button, ...)
 {
-  //struct TagItem tags[] = { ESA_Position, REQPOS_CENTERSCREEN, TAG_END };
+  // struct TagItem tags[] = { ESA_Position, REQPOS_CENTERSCREEN, TAG_END };
   struct EasyStruct easyreq = { 0 };
-  va_list parameter;
-  APTR vargs = NULL;
-
-  va_startlinear(parameter, button);
-  vargs = va_getlinearva(parameter, APTR);
+  // static TEXT textbuffer[512];
+  //STRPTR textbuffer = NULL;
+  va_list parameters;
+  STRPTR vargs = NULL;
+
+  va_startlinear(parameters, button);
+  // vsprintf(textbuffer, text, parameter);
+  // va_end(parameter);
+  vargs = va_getlinearva(parameters, STRPTR);
 
   easyreq.es_StructSize   = sizeof(struct EasyStruct);
-  easyreq.es_Flags        = ESF_SCREEN | ESF_EVENSIZE;//ESF_SCREEN | ESF_TAGGED | ESF_EVENSIZE;
-  easyreq.es_Title        = CS(MSG_Warning_Title);
+  easyreq.es_Flags        = ESF_SCREEN | ESF_EVENSIZE;// | ESF_TAGGED;
+  easyreq.es_Title        = CS(MSG_Requester_Title_Warning);
   easyreq.es_TextFormat   = text;
   easyreq.es_GadgetFormat = button;
   easyreq.es_Screen       = FrontMostScr();
-  //easyreq.es_TagList      = tags;
+  // easyreq.es_TagList      = tags;
 
   EasyRequestArgs(NULL, &easyreq, NULL, vargs);
 
-  va_end(parameter);
+  va_end(parameters);
 }
 
 /******************************/
@@ -301,42 +307,54 @@ VARARGS68K VOID EasyRequester(CONST_STRP
 void AmigaOS_ParseArg(int argc, char *argv[], int *new_argc, char ***new_argv)
 {
 	struct WBStartup *WBStartup = NULL;
-	TEXT progname[512];
-	//BOOL gotprogname = FALSE;
 	struct DiskObject *icon = NULL;
-
+// DBUG("AmigaOS_ParseArg()\n",NULL);
 /* Summer Edition Reloaded */
 	/* Check for AltiVec... in case an AltiVec version is loaded on SAM or on a AmigaOne G3... */
-#if HAVE_ALTIVEC_H == 1
+	#if HAVE_ALTIVEC_H == 1
 	ULONG result = 0;
 
 	GetCPUInfoTags(GCIT_VectorUnit, &result, TAG_DONE);
 	if (result != VECTORTYPE_ALTIVEC)
 	{
-		mp_msg(MSGT_VO, MSGL_ERR, "Sorry, this version is only for AltiVec capable machine! \n");
-		EasyRequester( CS(MSG_Warning_Altivec), CS(MSG_Warning_Button_OK) );
+		mp_msg(MSGT_VO, MSGL_ERR, "Sorry, this version is only for AltiVec capable machine!\n");
+		EasyRequester( CS(MSG_Warning_AltiVec), CS(MSG_Warning_Button_OK) );
 
 		// markus put MPlayer to exit mode
 		exit_player_with_rc(0, 0);
 		// end markus
-		AmigaOS_Close();
-		return;
 	}
-#endif
-
+	#endif
 	/* End Check */
 /* Summer Edition Reloaded */
 
 	*new_argc = argc;
 	*new_argv = argv;
 
+	// Some default values
+	if (!SCREENSHOTDIR)
+	{
+		SCREENSHOTDIR = strdup("RAM:");
+	}
+
+	if (!EXTPATTERN)
+	{
+		EXTPATTERN = strdup("#?.(3g2|3gp|3ivx|asf|avi|cdxl|dat|divx|flv|mpg|mpeg|mkv|mov|m2v|m4v|mp3|mp4|mts|nsv|ogg|ogv|qt|rm|smk|ts|vob|wav|webm|wma|wmv|xvid)");
+	}
+
+	if (!SUBEXTPAT)
+	{
+		SUBEXTPAT = strdup("#?.(aqt|ass|js|jss|rt|smi|srt|ssa|stl|sub|ttml|txt|utf|utf8|utf-8|vob|vtt)");
+	}
+
+	if(!TOOL_MPGUI)
+	{
+		TOOL_MPGUI = strdup("APPDIR:MPlayer-GUI");
+	}
+
 	// Ok is launch from cmd line, just do nothing
 	if (argc)
 	{
-		NameFromLock( GetProgramDir(), fullpath_mplayer, sizeof(fullpath_mplayer) );
-		GetCliProgramName( progname, sizeof(progname) );
-		AddPart( fullpath_mplayer, progname, sizeof(fullpath_mplayer) );
-//DBUG("'%s'\n",fullpath_mplayer);
 		return;
 	}
 	// Ok, ran from WB, we have to handle some funny thing now
@@ -345,34 +363,33 @@ void AmigaOS_ParseArg(int argc, char *ar
 
 	// 1. WBStartup
 	WBStartup = (struct WBStartup *) argv;
-	/*if (!WBStartup)
+	if (!WBStartup)
 	{
 		return ; // We never know !
 	}
 
+/*
 	if (Cli())
 	{
-		static char temp[8192];
+		char progname[512];
 
-		if (GetCliProgramName(temp, sizeof(temp)))
+		if (GetCliProgramName(progname, sizeof(progname)))
 		{
 			strcpy(progname, "PROGDIR:");
-			strlcat(progname, FilePart(temp), sizeof(progname));
-			gotprogname = TRUE;
-		}
-	}
-	else
-	{
-		strlcpy(progname, FindTask(NULL)->tc_Node.ln_Name, sizeof(progname));
-		gotprogname = TRUE;
-	}*/
-	NameFromLock( WBStartup->sm_ArgList->wa_Lock, fullpath_mplayer, sizeof(fullpath_mplayer) );
-	strlcpy( progname, WBStartup->sm_ArgList->wa_Name, sizeof(progname) );
-	AddPart( fullpath_mplayer, progname, sizeof(fullpath_mplayer) );
-//DBUG("'%s'\n",fullpath_mplayer);
+			strlcat(fullpath_mplayer, FilePart(progname), sizeof(fullpath_mplayer));
+//			gotprogname = TRUE;
+//		}
+//	}
+//	else
+//	{
+//		strlcpy(fullpath_mplayer, FindTask(NULL)->tc_Node.ln_Name, sizeof(fullpath_mplayer));
+//		gotprogname = TRUE;
+//	}
+DBUG("2:fullpath_mplayer: '%s'\n",fullpath_mplayer);
+*/
 
-//	icon = gotprogname ? GetDiskObject(progname) : NULL;
-	icon = GetDiskObject(progname);
+	// Check tooltypes
+	icon = GetDiskObject(fullpath_mplayer);
 	if (icon)
 	{
 		STRPTR found;
@@ -380,31 +397,34 @@ void AmigaOS_ParseArg(int argc, char *ar
 		found = FindToolType(icon->do_ToolTypes, "SCREENSHOTDIR");
 		if (found)
 		{
+			free(SCREENSHOTDIR);
 			SCREENSHOTDIR = strdup(found);
 		}
 
 		found = FindToolType(icon->do_ToolTypes, "EXTPATTERN");
 		if (found)
 		{
+			free(EXTPATTERN);
 			EXTPATTERN = strdup(found);
 		}
 
 		found = FindToolType(icon->do_ToolTypes, "SUBEXTPATTERN");
 		if (found)
 		{
+			free(SUBEXTPAT);
 			SUBEXTPAT = strdup(found);
 		}
 
 		found = FindToolType(icon->do_ToolTypes, "MPLAYERGUI");
 		if (found)
 		{
+			free(TOOL_MPGUI);
 			TOOL_MPGUI = strdup(found);
 		}
 
 		FreeDiskObject(icon);
 	}
 
-
 	if (WBStartup->sm_NumArgs > 1)
 	{
 		// The first arg is always the tool name (aka us)
@@ -423,17 +443,16 @@ void AmigaOS_ParseArg(int argc, char *ar
 			AmigaOS_argv[i] = malloc(MAX_DOS_NAME + MAX_DOS_PATH + 1);
 			if (!AmigaOS_argv[i])
 			{
-			goto fail;
+				goto fail;
 			}
-		NameFromLock(WBStartup->sm_ArgList[i].wa_Lock, AmigaOS_argv[i], MAX_DOS_PATH);
-		AddPart(AmigaOS_argv[i], WBStartup->sm_ArgList[i].wa_Name, MAX_DOS_PATH+MAX_DOS_NAME);
-		// DebugPrintF("'%s'\n",AmigaOS_argv[i]);
+			NameFromLock(WBStartup->sm_ArgList[i].wa_Lock, AmigaOS_argv[i], MAX_DOS_PATH);
+			AddPart(AmigaOS_argv[i], WBStartup->sm_ArgList[i].wa_Name, MAX_DOS_PATH+MAX_DOS_NAME);
+// DBUG("'%s'\n",AmigaOS_argv[i]);
 		}
 
 		*new_argc = AmigaOS_argc;
 		*new_argv = AmigaOS_argv;
 	}
-
 	else
 	{
 		ULONG i=0;
@@ -445,7 +464,7 @@ void AmigaOS_ParseArg(int argc, char *ar
 		FavoritePath_File = Open("PROGDIR:FavoritePath", MODE_OLDFILE);
 		if (FavoritePath_File)
 		{
-			LONG size =Read(FavoritePath_File, FavoritePath_Value, 1024);
+			LONG size = Read(FavoritePath_File, FavoritePath_Value, 1024);
 			if (size > 0)
 			{
 				if ( strchr(FavoritePath_Value, '\n') ) // There is an /n -> valid file
@@ -460,23 +479,23 @@ void AmigaOS_ParseArg(int argc, char *ar
 		AmigaOS_FileRequester = AllocAslRequest(ASL_FileRequest, NULL);
 		if (!AmigaOS_FileRequester)
 		{
-			mp_msg(MSGT_CPLAYER, MSGL_FATAL,"Cannot open FileRequester!\n");
+			mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Cannot open FileRequester!\n");
 			goto fail;
 		}
 
 		if ( ( AslRequestTags( AmigaOS_FileRequester,
-					ASLFR_TitleText,        	CS(MSG_Requester_OpenFile_Title),
-					ASLFR_DoMultiSelect,    	TRUE,
-					ASLFR_RejectIcons,      	TRUE,
-					ASLFR_DoPatterns,			TRUE,
-					ASLFR_InitialPattern,		(ULONG)EXTPATTERN,
-		    			ASLFR_InitialDrawer,    	(FavoritePath_Ok) ? FavoritePath_Value : "",
-					TAG_DONE) ) == FALSE )
+					ASLFR_TitleText,      CS(MSG_Requester_OpenFile_Video),
+					ASLFR_DoMultiSelect,  TRUE,
+					ASLFR_RejectIcons,    TRUE,
+					ASLFR_DoPatterns,     TRUE,
+					ASLFR_InitialPattern, (ULONG)EXTPATTERN,
+					ASLFR_InitialDrawer,  (FavoritePath_Ok) ? FavoritePath_Value : "",
+				TAG_DONE) ) == FALSE )
 		{
 			FreeAslRequest(AmigaOS_FileRequester);
 			AmigaOS_FileRequester = NULL;
 			mp_msg(MSGT_CPLAYER, MSGL_FATAL,"Fail AslRequestTags!\n");
-	  		goto fail;
+			goto fail;
 		}
 
 		AmigaOS_argc = AmigaOS_FileRequester->fr_NumArgs + 1;
@@ -485,7 +504,8 @@ void AmigaOS_ParseArg(int argc, char *ar
 
 		memset(AmigaOS_argv, 0x00, AmigaOS_argc * sizeof(char *) );
 
-		AmigaOS_argv[0] = strdup("MPlayer");
+		AmigaOS_argv[0] = strdup(FilePart(fullpath_mplayer));//"MPlayer");
+// DBUG("'%s' (%s)\n",AmigaOS_argv[0],argv[0]);
 		if (!AmigaOS_argv[0]) goto fail;
 
 		for( i=1; i < AmigaOS_argc; i++)
@@ -514,7 +534,6 @@ fail:
 
 	*new_argc = argc;
 	*new_argv = argv;
-	return;
 }
 
 
@@ -522,8 +541,8 @@ fail:
 /****************************/
 void AmigaOS_Close(void)
 {
-	Delay(10);
-
+	// Delay(10);
+DBUG("AmigaOS_Close()\n",NULL);
 	IIntuition = IIntuition_SDL_workaround;
 
 	if (!SCREENSHOTDIR)
@@ -544,12 +563,6 @@ void AmigaOS_Close(void)
 		SUBEXTPAT = NULL;
 	}
 
-	if (!SUBEXTPAT)
-	{
-		free(SUBEXTPAT);
-		SUBEXTPAT = NULL;
-	}
-
 	if (!TOOL_MPGUI)
 	{
 		free(TOOL_MPGUI);
@@ -558,8 +571,8 @@ void AmigaOS_Close(void)
 
 	Forbid();
 	current_task = FindTask(NULL);
-	((struct Process *) current_task) -> pr_WindowPtr = pr_WindowPtr;	// enable insert disk.
 	Permit();
+	((struct Process *) current_task) -> pr_WindowPtr = pr_WindowPtr;	// enable insert disk.
 
 	if (OldPtr)
 	{
@@ -567,24 +580,20 @@ void AmigaOS_Close(void)
 		SetProcWindow((APTR) OldPtr);
 	}
 
-#if HAVE_APP_ICON
-	if (MPLAppIcon)	RemoveAppIcon(MPLAppIcon);
-	if (DIcon)		FreeDiskObject(DIcon);
-#endif
-
-#if HAVE_AREXX
-	StopArexx();
-#endif
+/*#if HAVE_APP_ICON
+	if (MPLAppIcon) RemoveAppIcon(MPLAppIcon);
+	if (DIcon) FreeDiskObject(DIcon);
+#endif*/
 
 	if (AppID>0)
 	{
-		if (IApplication)
-		{
-			SetApplicationAttrs(AppID, APPATTR_AllowsBlanker, TRUE, TAG_DONE);
-			SetApplicationAttrs(AppID, APPATTR_NeedsGameMode, FALSE, TAG_DONE);
+//		if (IApplication)
+//		{
+			SetApplicationAttrs(AppID, APPATTR_AllowsBlanker,TRUE, TAG_DONE);
+			SetApplicationAttrs(AppID, APPATTR_NeedsGameMode,FALSE, TAG_DONE);
 			// SendApplicationMsg(AppID, 0, NULL, APPLIBMT_BlankerAllow);
 			UnregisterApplication(AppID, NULL);
-		}
+//		}
 		AppID = 0;
 	}
 
@@ -593,6 +602,8 @@ void AmigaOS_Close(void)
 	if (catalog) CloseCatalog(catalog);
 
 	if (InfoWindowBase) CloseClass(InfoWindowBase);
+	if (BitMapBase    ) CloseClass(BitMapBase);
+	if (RequesterBase ) CloseClass(RequesterBase);
 
 	if (IDebug) DropInterface((struct Interface*)IDebug); IDebug = 0;
 
@@ -601,12 +612,17 @@ void AmigaOS_Close(void)
 	if (IAsyncIO) DropInterface((struct Interface*)IAsyncIO); IAsyncIO = 0;
 #endif
 
-	if (RequesterBase) CloseClass(RequesterBase); RequesterBase = NULL;
+#if HAVE_AREXX
+	StopArexx();
+#endif
 
 	if (IntuitionBase) CloseLibrary(IntuitionBase); IntuitionBase = 0;
 	if (IIntuition) DropInterface((struct Interface*) IIntuition); IIntuition = 0;
 	IIntuition_SDL_workaround = 0;
 
+	if (UtilityBase) CloseLibrary(AslBase); UtilityBase = 0;
+	if (IUtility) DropInterface((struct Interface*)IUtility); IUtility = 0;
+
 	if (GraphicsBase) CloseLibrary(GraphicsBase); GraphicsBase = 0;
 	if (IGraphics) DropInterface((struct Interface*) IGraphics); IGraphics = 0;
 
@@ -622,6 +638,12 @@ void AmigaOS_Close(void)
 	if (LayersBase) CloseLibrary(LayersBase); LayersBase = 0;
 	if (ILayers) DropInterface((struct Interface*) ILayers); ILayers = 0;
 
+	if (IconBase) CloseLibrary(IconBase); IconBase = 0;
+	if (IIcon) DropInterface((struct Interface*)IIcon); IIcon = 0;
+
+	if (DataTypesBase) CloseLibrary(DataTypesBase); DataTypesBase = 0;
+	if (IDataTypes) DropInterface((struct Interface*)IDataTypes); IDataTypes = 0;
+
 	if (AslBase) CloseLibrary(AslBase); AslBase = 0;
 	if (IAsl) DropInterface((struct Interface*)IAsl); IAsl = 0;
 
@@ -634,10 +656,14 @@ void AmigaOS_Close(void)
 	if (Picasso96Base) CloseLibrary(Picasso96Base); Picasso96Base = 0;
 	if (IP96) DropInterface((struct Interface*)IP96); IP96 = 0;
 
-	if (!TimerDevice) CloseDevice( (struct IORequest *) TimerDevice); TimerDevice = 0;
-	if (TimerRequest) FreeSysObject ( ASOT_IOREQUEST, TimerRequest ); TimerRequest = 0;
+	// if (!TimerDevice) CloseDevice( (struct IORequest *) TimerDevice); TimerDevice = 0;
+	if (TimerRequest)
+	{
+		CloseDevice( (struct IORequest *) TimerRequest );
+		FreeSysObject ( ASOT_IOREQUEST, TimerRequest ); TimerRequest = 0;
+	}
 	if (TimerMsgPort) FreeSysObject ( ASOT_PORT, TimerMsgPort ); TimerMsgPort = 0;
-	if (ITimer) DropInterface((struct Interface*) ITimer); ITimer = 0;
+	// if (ITimer) DropInterface((struct Interface*) ITimer); ITimer = 0; // NOTE: SDL 1.2.6 already 'GetInterface()'
 
 	if (window_mx) FreeSysObject( ASOT_MUTEX , window_mx ); window_mx = 0;
 
@@ -647,7 +673,6 @@ void AmigaOS_Close(void)
 
 	if (DOSBase) CloseLibrary(DOSBase); DOSBase = 0;
 	if (IDOS) DropInterface((struct Interface*)IDOS); IDOS = 0;
-
 }
 
 /****************************/
@@ -657,97 +682,103 @@ void AmigaOS_Close(void)
 BOOL open_lib( const char *name, int ver , const char *iname, int iver, struct Library **base, struct Interface **interface)
 {
 	*interface = NULL;
+
 	*base = OpenLibrary( name , ver);
 	if (*base)
 	{
-		*interface = GetInterface( *base,  iname , iver, TAG_END );
-		if (!*interface) dprintf("Unable to getInterface %s for %s %ld!\n",iname,name,ver);
+		*interface = GetInterface( *base, iname, iver, TAG_END );
+		if (!*interface) DebugPrintF("Unable to get %s IFace for '%s' %ld!\n",iname,name,ver);
 	}
 	else
 	{
-		dprintf("Unable to open the %s %ld!\n",name,ver);
+		DebugPrintF("Unable to open the '%s' %ld!\n",name,ver);
 	}
+
 	return (*interface) ? TRUE : FALSE;
 }
 
-void read_ENVARC()	// zzd10h
+void read_ENVARC(void)	// zzd10h
 {
-	 char MenuImageSize_var_buffer[16] ;
-
-  	 if (GetVar("MenuImageSize",MenuImageSize_var_buffer,sizeof(MenuImageSize_var_buffer),LV_VAR) > 0)
-     {
-     	AISS_MENU_SIZE = atoi(MenuImageSize_var_buffer) ;
-     	if (AISS_MENU_SIZE > 0)
-     		AISS_MENU_TO_SCALE = TRUE ;
-	else
-		AISS_MENU = FALSE ;
-     }
+	char var_buffer[16] ;
 
-   char EnhancerBanners_var_buffer[16] ;
-   // SETENV SAVE Disable_Banner_Images 1
+	if (GetVar("MenuImageSize",var_buffer,sizeof(var_buffer),LV_VAR) > 0)
+	{
+		AISS_MENU_SIZE = atoi(var_buffer) ;
+		if (AISS_MENU_SIZE > 0) AISS_MENU_TO_SCALE = TRUE ;
+		else AISS_MENU = FALSE ;
+	}
 
-     if (GetVar("Disable_Banner_Images",EnhancerBanners_var_buffer,sizeof(EnhancerBanners_var_buffer),LV_VAR) > 0)
-     {
-     	// printf("EnhancerBanners_var_buffer (%s) \n",EnhancerBanners_var_buffer);
-     	if (atoi(EnhancerBanners_var_buffer) == 1)
-	    	BANNER_DISPLAY = FALSE ;
-     }
+	// SETENV SAVE Disable_Banner_Images 1
+	if (GetVar("Disable_Banner_Images",var_buffer,sizeof(var_buffer),LV_VAR) > 0)
+	{
+// DBUG("Disable_Banner_Images (%s)\n",var_buffer);
+		if (atoi(var_buffer) == 1)
+		BANNER_DISPLAY = FALSE ;
+	}
 }
 
 int AmigaOS_Open(int argc, char *argv[])
 {
-	AmigaOS_argv 			= NULL;
-	int cnt;
+	// struct DiskObject *icon = NULL;
+	TEXT progname[512];
+DBUG("AmigaOS_Open()\n",NULL);
+	AmigaOS_argv = NULL;
 
 	// Remove requesters
 	// OldPtr = SetProcWindow((APTR) -1L);
 
-	if (!argc)
-	{
-		// If argc == 0 -> Execute from the WB, then no need to display anything
-		freopen("NIL:", "r", stdin);
-		freopen("NIL:", "w", stderr);
-		freopen("NIL:", "w", stdout);
-	}
-
 	window_mx = AllocSysObject( ASOT_MUTEX, TAG_DONE );
-	if (!window_mx) 		return -1;
+	if (!window_mx) return -1;
 
+	if ( ! open_lib( "dos.library",        0L, "main", 1, &DOSBase, (struct Interface **) &IDOS ) ) return -1;
+	if ( ! open_lib( "utility.library",   51L, "main", 1, &UtilityBase, (struct Interface **) &IUtility ) ) return -1;
+	if ( ! open_lib( "intuition.library", 51L, "main", 1, &IntuitionBase, (struct Interface **) &IIntuition ) ) return -1;
 
+	Forbid();
+	current_task = FindTask(NULL);
+	Permit();
+	pr_WindowPtr = ((struct Process *) current_task) -> pr_WindowPtr;
+	((struct Process *) current_task) -> pr_WindowPtr = -1L;	// Disable insert disk.
+
+#if HAVE_AREXX
+	StartArexx(); // start it ASAP, 'cos we need ARexxPortName
+#endif
 
 	TimerMsgPort = AllocSysObject(ASOT_PORT,NULL);
 	if ( !TimerMsgPort )
 	{
-		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to create MsgPort\n");
+		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to create timer message port\n");
 		return -1;
 	}
 
 	TimerRequest = AllocSysObjectTags(ASOT_IOREQUEST,
-						ASOIOR_Size, sizeof(struct TimeRequest),
-						ASOIOR_ReplyPort, TimerMsgPort,
-						TAG_DONE);
+	                ASOIOR_Size, sizeof(struct TimeRequest),
+	                ASOIOR_ReplyPort, TimerMsgPort,
+	               TAG_DONE);
 	if ( !TimerRequest )
 	{
-		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to create IORequest\n");
+		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to create timer I/O request\n");
 		return -1;
 	}
 
-	if ( (TimerDevice = OpenDevice((unsigned char*)TIMERNAME, UNIT_MICROHZ , (struct IORequest *) TimerRequest, 0) ) )
+	if ( OpenDevice((unsigned char*)TIMERNAME, UNIT_MICROHZ, (struct IORequest *) TimerRequest, 0) )
 	{
-		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to open" TIMERNAME ".\n");
+		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to open" TIMERNAME "\n");
 		return -1;
 	}
 
 	TimerBase = (struct Device *) TimerRequest->Request.io_Device;
+	// ITimer = (struct TimerIFace*) GetInterface( (struct Library*)TimerBase, (unsigned char*)"main", 1, NULL ); // NOTE: SDL 1.2.6 already 'GetInterface()'
 
-	ITimer = (struct TimerIFace*) GetInterface( (struct Library*)TimerBase, (unsigned char*)"main", 1, NULL );
 
 #if HAVE_ALTIVEC
 	SetAmiUpdateENVVariable("MPlayer-AltiVec");
-	#else
+#else
 	SetAmiUpdateENVVariable("MPlayer");
 #endif
 
+	// IDebug = GetInterface( SysBase, "debug", 1, TAG_END );
+	IDebug = (struct DebugIFace *)GetInterface((struct Library *)SysBase, "debug", 1, TAG_END);
 
 #ifdef USE_ASYNCIO
 	if ( ! ( AsyncIOBase = OpenLibrary( (unsigned char*)"asyncio.library", 0L) ) )
@@ -758,128 +789,98 @@ int AmigaOS_Open(int argc, char *argv[])
 
 	if (!(IAsyncIO = (struct AsyncIOIFace *)GetInterface((struct Library *)AsyncIOBase,(unsigned char*)"main",1,NULL)))
 	{
-		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to Get AsyncIO Interface.\n");
+		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to get AsyncIO interface\n");
 		return -1;
 	}
 #endif
 
 #ifdef HAVE_CGX
-	if ( ! open_lib( "cybergraphics.library", 43L , "main", 1, &CyberGfxBase, (struct Interface **) &ICyberGfx  ) ) return -1;
+	if ( ! open_lib( "cybergraphics.library", 43L, "main", 1, &CyberGfxBase, (struct Interface **) &ICyberGfx  ) ) return -1;
 #endif
 
-	IDebug =	GetInterface( SysBase,  "debug" , 1 , TAG_END );
-
-	if ( ! open_lib( "dos.library", 0L , "main", 1, &DOSBase, (struct Interface **) &IDOS  ) ) return -1;
-
-	if ( ! open_lib( "asl.library", 0L , "main", 1, &AslBase, (struct Interface **) &IAsl  ) ) return -1;
-	if ( ! open_lib( "intuition.library", 51L , "main", 1, &IntuitionBase, (struct Interface **) &IIntuition  ) ) return -1;
-	if ( ! open_lib( "graphics.library", 51L , "main", 1, &GraphicsBase, (struct Interface **) &IGraphics  ) ) return -1;
-	if ( ! open_lib( "application.library", 51L , "application", 2, &ApplicationBase, (struct Interface **) &IApplication  ) ) return -1;
-	if ( ! open_lib( "workbench.library", 51L , "main", 1, &WorkbenchBase, (struct Interface **) &IWorkbench ) ) return -1;
-	if ( ! open_lib( "keymap.library", 51L , "main", 1, &KeymapBase, (struct Interface **) &IKeymap ) ) return -1;
-	if ( ! open_lib( "layers.library", 51L , "main", 1, &LayersBase, (struct Interface **) &ILayers ) ) return -1;
-	if ( ! open_lib( "Picasso96API.library", 51L , "main", 1, &Picasso96Base, (struct Interface **) &IP96 ) ) return -1;
-	if ( ! open_lib( "gadtools.library", 51L , "main", 1, &GadToolsBase, (struct Interface **) &IGadTools ) ) return -1;
-	if ( ! open_lib( "locale.library", 0L , "main", 1, &LocaleBase, (struct Interface **) &ILocale ) ) return -1;
-
-	RequesterBase = OpenClass("requester.class",53,&IRequester);
+	if ( ! open_lib( "asl.library",           0L, "main", 1, &AslBase, (struct Interface **) &IAsl ) ) return -1;
+	if ( ! open_lib( "graphics.library",     51L, "main", 1, &GraphicsBase, (struct Interface **) &IGraphics ) ) return -1;
+	if ( ! open_lib( "application.library",  51L, "application", 2, &ApplicationBase, (struct Interface **) &IApplication ) ) return -1;
+	if ( ! open_lib( "workbench.library",    51L, "main", 1, &WorkbenchBase, (struct Interface **) &IWorkbench ) ) return -1;
+	if ( ! open_lib( "keymap.library",       51L, "main", 1, &KeymapBase, (struct Interface **) &IKeymap ) ) return -1;
+	if ( ! open_lib( "layers.library",       51L, "main", 1, &LayersBase, (struct Interface **) &ILayers ) ) return -1;
+	if ( ! open_lib( "Picasso96API.library", 51L, "main", 1, &Picasso96Base, (struct Interface **) &IP96 ) ) return -1;
+	if ( ! open_lib( "gadtools.library",     51L, "main", 1, &GadToolsBase, (struct Interface **) &IGadTools ) ) return -1;
+	if ( ! open_lib( "icon.library",         51L, "main", 1, &IconBase, (struct Interface **) &IIcon ) ) return -1;
+	if ( ! open_lib( "datatypes.library",    51L, "main", 1, &DataTypesBase, (struct Interface **) &IDataTypes ) ) return -1;
+	if ( ! open_lib( "locale.library",        0L, "main", 1, &LocaleBase, (struct Interface **) &ILocale ) ) return -1;
+
+// #if HAVE_AREXX
+//	StartArexx(current_task);
+// #endif
+
+	// Classes
+	RequesterBase  = OpenClass("requester.class",     53, &RequesterClass);
+	BitMapBase     = OpenClass("images/bitmap.image", 52, &BitMapClass);
+	InfoWindowBase = OpenClass("infowindow.class",    53, &InfoWindowClass);
 
 	IIntuition_SDL_workaround = IIntuition;	// save IIntuition as SDL sets this to NULL :-(
 
-	Forbid();
-	current_task = FindTask(NULL);
-	pr_WindowPtr = ((struct Process *) current_task) -> pr_WindowPtr;
-	((struct Process *) current_task) -> pr_WindowPtr = -1L;	// Disable insert disk.
-	Permit();
-
-
-	// Check libraries levels	// zzd10h
- 	// MenuClass supported if intuition.library >= 54.6)
-	if (!((IntuitionBase->lib_Version > 54) ||
-         ((IntuitionBase->lib_Version == 54) && (IntuitionBase->lib_Revision >= 6))))
-		{
-			MENUCLASS_SUPPORT = TRUE ;
-		}
-
-	// To simulate AmigaOS 4.1.6
-	//	MENUCLASS_SUPPORT = FALSE ;
-// 	if ( (InfoWindowBase = OpenClass("infowindow.class", 53, &InfoWindowClass)) )
-// 		INFOWINDOWCLASS_SUPPORT = TRUE ;
-
-	// INFOWINDOWCLASS_SUPPORT = FALSE ;
-	// MENUCLASS_SUPPORT = FALSE ;
+	// MenuClass supported if intuition.library >= 54.6) [zzd10h]
+	if ( LIB_IS_AT_LEAST(IntuitionBase, 54,6) )
+	{
+		MENUCLASS_SUPPORT = TRUE;
+	}
 
 	// Open catalog zzd10h
 	if(LocaleBase)
 		catalog=OpenCatalogA(NULL,"MPlayer.catalog",NULL);
 
-	// Register the application so the ScreenBlanker don't bother us...
-
-	cnt = 1;
-
-	do
-	{
-		sprintf(ApplicationName,"MPlayer.%d",cnt);
-		AppID = RegisterApplication((unsigned char*)ApplicationName,
-			REGAPP_Description,			"The Movie Player",
-			REGAPP_URLIdentifier, 			"amigasoft.net",
-			REGAPP_ENVDir, 				"PROGDIR:",
-			REGAPP_AppNotifications,		TRUE,
-			REGAPP_HasIconifyFeature,		TRUE,
-			REGAPP_UniqueApplication, 		TRUE,
-			REGAPP_HasPrefsWindow,			FALSE,
-			REGAPP_LoadPrefs, 			FALSE,
-			REGAPP_SavePrefs, 			FALSE,
-			REGAPP_CanCreateNewDocs,		FALSE,
-			REGAPP_CanPrintDocs,			FALSE,
-			REGAPP_NoIcon,				FALSE,
-			REGAPP_AllowsBlanker,			FALSE,
-			TAG_DONE);
-
-		cnt++;
-	} while (AppID == 0);
+	if (argc)
+	{ // CLI/Shell
+		NameFromLock( GetProgramDir(), fullpath_mplayer, sizeof(fullpath_mplayer) );
+		GetCliProgramName( progname, sizeof(progname) );
+	}
+	else
+	{ // Workbench
+		struct WBStartup *WBStartup = (struct WBStartup *)argv;
+		NameFromLock( WBStartup->sm_ArgList->wa_Lock, fullpath_mplayer, sizeof(fullpath_mplayer) );
+		Strlcpy( progname, WBStartup->sm_ArgList->wa_Name, sizeof(progname) );
+		// If argc == 0 -> Execute from the WB, then no need to display anything
+		freopen("NIL:", "r", stdin);
+		freopen("NIL:", "w", stderr);
+		freopen("NIL:", "w", stdout);
+	}
+	AddPart( fullpath_mplayer, FilePart(progname), sizeof(fullpath_mplayer) );
+DBUG("progname      : '%s'\n",FilePart(progname));
+DBUG("exec fullpath : '%s'\n",fullpath_mplayer);
 
+DBUG("ARexxPortName: '%s'\n",ARexxPortName);
+	// Register the application so the ScreenBlanker don't bother us...
+	AppID = RegisterApplication( ARexxPortName,//"MPlayer",
+			REGAPP_Description,   CS(MSG_RegisterAppID_Description),
+			REGAPP_URLIdentifier, "mplayerhq.hu",
+			REGAPP_ENVDir,        "mplayer",
+			REGAPP_FileName,      fullpath_mplayer,
+			REGAPP_AppNotifications,  TRUE,
+			REGAPP_HasIconifyFeature, TRUE,
+			REGAPP_UniqueApplication, TRUE,//FALSE,
+			REGAPP_HasPrefsWindow,    FALSE,
+			REGAPP_LoadPrefs,         FALSE,
+			REGAPP_SavePrefs,         FALSE,
+			REGAPP_CanCreateNewDocs,  FALSE,
+			REGAPP_CanPrintDocs,      FALSE,
+			REGAPP_NoIcon,            FALSE,
+			REGAPP_AllowsBlanker,     FALSE,
+		TAG_DONE);
 	if (AppID == 0)
 	{
 		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Failed to Register Application.\n");
-		AmigaOS_Close();
 		return -1;
 	}
 	else
 	{
-		SetApplicationAttrs(AppID, APPATTR_AllowsBlanker, FALSE, TAG_DONE);
-	}
-
-	if (!SCREENSHOTDIR)
-	{
-		SCREENSHOTDIR = strdup("ram:");
+		SetApplicationAttrs(AppID, APPATTR_AllowsBlanker,FALSE, TAG_DONE);
+		GetApplicationAttrs(AppID, APPATTR_Port,(uint32)&applibPort, TAG_DONE);
 	}
+DBUG("AppID=%ld   applibPort=0x%08lx \n",AppID,applibPort);
 
-	if (!EXTPATTERN)
-	{
-		EXTPATTERN = strdup("#?.(3g2|3gp|3ivx|asf|avi|divx|flv|mpg|mpeg|mkv|mov|m2v|m4v|mp3|mp4|mts|nsv|ogg|ogv|rm|vob|wav|webm|wma|wmv|xvid)");
-	}
-
-	if (!SUBEXTPAT)
-	{
-		SUBEXTPAT = strdup("#?.(aqt|ass|js|jss|rt|smi|srt|ssa|stl|sub|ttml|txt|utf|utf8|utf-8|vob|vtt)");
-	}
-
-	if (!SUBEXTPAT)
-	{
-		SUBEXTPAT = strdup("#?.(aqt|ass|js|jss|rt|smi|srt|ssa|sub|txt|utf|utf8|utf-8|vob)");
-	}
-
-	if(!TOOL_MPGUI)
-	{
-		TOOL_MPGUI = strdup("APPDIR:MPlayer-GUI");
-	}
-
-#if HAVE_AREXX
-        StartArexx();
-#endif
-
-	// Check if MenuImageSize is stored in ENV to determine menu picture size	// zzd10h
+	// Check if MenuImageSize is stored in ENV to determine menu picture size [zzd10h]
 	read_ENVARC() ;
 
 	return 0;
@@ -907,47 +908,125 @@ char *mp_asprintf( char *fmt, ... )
 ** can become AmiUpdate aware.
 **
 **********************************************************/
-// markus  
+// markus & samo79
 // From http://codebench.co.uk/amiupdate_website/index.php?page=developers
 // to	https://raw.githubusercontent.com/adtools/abcsh/master/amigaos.c
 void SetAmiUpdateENVVariable(const char *varname)
 {
-    /* AmiUpdate support code */
-    BPTR lock;
-    APTR oldwin;
-
-    /* Obtain the lock to the home directory */
-    if((lock = GetProgramDir()) != 0)
-    {
-	TEXT progpath[2048];
-	TEXT varpath[1024] = "AppPaths";
-
-	/*
-	 * Get a unique name for the lock,
-	 * this call uses device names,
-	 * as there can be multiple volumes
-	 * with the same name on the system
-	 */
-
-	if(DevNameFromLock(lock, progpath, sizeof(progpath),
-		    DN_FULLPATH))
-	{
-	    /* stop any "Insert volume..." type requesters */
-	    oldwin = SetProcWindow((APTR)-1);
-
-	    /*
-	     * Finally set the variable to the
-	     * path the executable was run from
-	     * don't forget to supply the variable
-	     * name to suit your application
-	     */
-
-	    AddPart(varpath, varname, 1024);
-	    SetVar(varpath, progpath, -1,
-		    GVF_GLOBAL_ONLY|GVF_SAVE_VAR);
+	/* AmiUpdate support code */
+	BPTR lock;
+	APTR oldwin;
+
+	/* Obtain the lock to the home directory */
+	if((lock = GetProgramDir()) != 0)
+	{
+		TEXT progpath[2048];
+		TEXT varpath[1024] = "AppPaths";
+
+		/*
+		 * Get a unique name for the lock,
+		 * this call uses device names,
+		 * as there can be multiple volumes
+		 * with the same name on the system
+		 */
+		if(DevNameFromLock(lock, progpath, sizeof(progpath), DN_FULLPATH))
+		{
+			/* stop any "Insert volume..." type requesters */
+			oldwin = SetProcWindow((APTR)-1);
+
+			/*
+			 * Finally set the variable to the
+			 * path the executable was run from
+			 * don't forget to supply the variable
+			 * name to suit your application
+			 */
+			AddPart(varpath, varname, 1024);
+			SetVar(varpath, progpath, -1,
+			       GVF_GLOBAL_ONLY|GVF_SAVE_VAR);
+
+			/* turn requesters back on */
+			SetProcWindow(oldwin);
+		}
+	}
+}
+
+
+#include "SDL/SDL_syswm.h"
+struct Window *AmigaOS_GetSDLWindowPtr(void)
+{
+  SDL_SysWMinfo wmInfo;
+
+  SDL_GetWMInfo(&wmInfo);
+  return( (struct Window*)wmInfo.window );
+}
+
+void AmigaOS_ScreenTitle(const char *vo_str)
+{
+  struct Window *win;
+  static char scrtitle[128];
+
+  win = AmigaOS_GetSDLWindowPtr();
+
+  sprintf(scrtitle, AMIGA_VERSION" (%s)\0",vo_str);
+  SetWindowTitles(win, (CONST_STRPTR)~0, scrtitle);
+}
 
-	    /* turn requesters back on */
-	    SetProcWindow(oldwin);
+
+void AmigaOS_do_applib(struct Window *w)
+{
+	struct ApplicationMsg *applibmsg;
+// DBUG("AmigaOS_do_applib()\n",NULL);
+	while( (applibmsg=(struct ApplicationMsg *)GetMsg(applibPort)) )
+	{
+// DBUG("AmigaOS_do_applib() : %ld\n",applibmsg->type);
+		switch(applibmsg->type)
+		{
+			case APPLIBMT_Quit:
+			case APPLIBMT_ForceQuit:
+DBUG("APPLIB_QUIT\n",NULL);
+				if(w  &&  spawn_count==0) mplayer_put_key(KEY_ESC); // if no window opened don't quit
+			break;
+			case APPLIBMT_Unhide:
+DBUG("APPLIB_UNHIDE\n",NULL);
+				if(UnIconify(w)) SetApplicationAttrs(AppID, APPATTR_Hidden,FALSE, TAG_DONE);
+				else
+				{
+					ActivateWindow(w);
+					WindowToFront(w);
+				}
+			break;
+			case APPLIBMT_Hide:
+DBUG("APPLIB_HIDE\n",NULL);
+				if (Iconify(w)) SetApplicationAttrs(AppID, APPATTR_Hidden,TRUE, TAG_DONE);
+			break;
+			// default: break;
+		}
+		ReplyMsg( (struct Message *)applibmsg );
 	}
-    }
-}
\ Brak znaku nowej linii na koÅcu pliku
+}
+
+VOID VARARGS68K AmigaOS_applib_Notify(STRPTR not_msg, ...)
+{
+	va_list parameters;
+	STRPTR vargs = NULL;
+	STRPTR buf = NULL;
+
+	va_startlinear(parameters, not_msg);
+	vargs = va_getlinearva(parameters, STRPTR);
+
+	buf = VASPrintf(not_msg, vargs);
+
+	Notify(AppID,
+	       APPNOTIFY_Title,         "MPlayer",
+	       //APPNOTIFY_Update,        TRUE,
+	       //APPNOTIFY_Pri,           0,
+	       APPNOTIFY_PubScreenName, "FRONT",
+	       APPNOTIFY_ImageFile,     "TBImages:video",
+	       //APPNOTIFY_CloseOnDC,     TRUE,
+	       APPNOTIFY_Text,          buf,
+	      TAG_DONE);
+
+	FreeVec(buf);
+
+	va_end(parameters);
+}
diff --color -rupN old/amigaos/amigaos_stuff.h new/amigaos/amigaos_stuff.h
--- old/amigaos/amigaos_stuff.h	2023-08-01 08:28:44.000000000 +0200
+++ new/amigaos/amigaos_stuff.h	2023-08-29 14:14:56.000000000 +0200
@@ -19,8 +19,21 @@
 #ifndef __AMIGAOS_STUFF__
 #define __AMIGAOS_STUFF__
 
+
+#include <exec/types.h>
+
 // Return -1 if a pb
 int AmigaOS_Open(int argc, char *argv[]);
 void AmigaOS_Close(void);
 void AmigaOS_ParseArg(int argc, char *argv[], int *new_argc, char ***new_argv);
+
+void read_ENVARC(void);
+void SetAmiUpdateENVVariable(const char *varname);
+struct Window *AmigaOS_GetSDLWindowPtr(void);
+void AmigaOS_ScreenTitle(const char *vo_str);
+VOID VARARGS68K EasyRequester(CONST_STRPTR text, CONST_STRPTR button, ...);
+void AmigaOS_do_applib(struct Window *w);
+VOID VARARGS68K AmigaOS_applib_Notify(STRPTR not_msg, ...);
+
+
 #endif
diff --color -rupN old/amigaos/appwindow.c new/amigaos/appwindow.c
--- old/amigaos/appwindow.c	2023-08-01 08:28:44.000000000 +0200
+++ new/amigaos/appwindow.c	2023-08-29 15:11:10.000000000 +0200
@@ -26,22 +26,38 @@
 #include <proto/intuition.h>
 #include <proto/wb.h>
 #include <workbench/startup.h>
-// Include <workbench/workbench.h>
 
+#include "debug.h"
+#include "appwindow.h"
+
+#include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
-static struct MsgPort 	*appwin_port = NULL;
-static struct AppWindow	*app_window = NULL;
-struct AppMessage *appmsg = NULL;
+extern struct Catalog *catalog ;
+#define MPlayer_NUMBERS
+#define MPlayer_STRINGS
+#include "../amigaos/MPlayer_catalog.h"
+extern STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
+#define CS(id) myGetCatalogStr(catalog,id,id##_STR)
+
+#include "arexx.h"
+#include "amigaos_stuff.h"
+
+#include "input/input.h" // MP_CMD_LOADFILE
+#include "mp_osd.h" // set_osd_msg() & osd_duration
 
 extern int32 PlayFile_async(const char *FileName);
 
+
+struct MsgPort          *appwin_port = NULL;
+static struct AppWindow *app_window = NULL;
+struct AppMessage       *appmsg = NULL;
+
 ULONG appwindow_sig = 0;
 
-void make_appwindow(struct Window *win );
 
-void make_appwindow(struct Window *win )
+void make_appwindow(struct Window *win)
 {
 	if (!appwin_port) appwin_port = AllocSysObject( ASOT_PORT, TAG_END);
 
@@ -49,14 +65,16 @@ void make_appwindow(struct Window *win )
 	{
 		appwindow_sig = 1L<< appwin_port -> mp_SigBit;
 		app_window = AddAppWindowA(0,0, win,appwin_port,NULL);
+DBUG("make_appwindow( 0x%08lx )  0x%08lx  0x%08lx\n",win,app_window,appwin_port);
 	}
 }
 
-void delete_appwindow()
+void delete_appwindow(void)
 {
+DBUG("delete_appwindow() 0x%08lx  0x%08lx\n",app_window,appwin_port);
 	if (app_window)
 	{
-		RemoveAppWindow(app_window) ;
+		RemoveAppWindow(app_window);
 		app_window = NULL;
 	}
 
@@ -71,8 +89,8 @@ void delete_appwindow()
 char *to_name_and_path(char *path, char *name)
 {
 	char *path_whit_name = NULL;
-
-	if (path_whit_name = (void *) malloc ( 	strlen(path) + strlen(name) + 2) )
+//DBUG("to_name_and_path() : '%s'(%ld) '%s'(%ld)\n",path,strlen(path),name,strlen(name));
+	if (path_whit_name = (void *) malloc ( strlen(path) + strlen(name) + 2) )
 	{
 		path_whit_name[0] = 0;
 
@@ -80,51 +98,68 @@ char *to_name_and_path(char *path, char
 		{
 			if (path[strlen(path)-1]==':')
 			{
-				sprintf(path_whit_name,"%s%s",path,name);				
+				sprintf(path_whit_name, "%s%s",path,name);
 			}
 			else
 			{
-				sprintf(path_whit_name,"%s/%s",path,name);
+				sprintf(path_whit_name, "%s/%s",path,name);
 			}
 		}
 	}
-
+//DBUG("\t'%s'(%ld)\n",path_whit_name,strlen(path_whit_name));
 	return path_whit_name;
 }
 
-void do_appwindow()
+
+void appwindow_LoopDnD(struct AppMessage *am)
 {
-	char	temp[1000];
-	char	*path_whit_name;
+	char temp[1000];
 	BPTR temp_lock;
 	int n;
-
-	if (appwin_port)
+//DBUG("am->am_NumArgs = %ld\n",am->am_NumArgs);
+	for(n=0; n<am->am_NumArgs; n++)
 	{
-		if (appmsg = (void *) GetMsg(appwin_port))
+		if( (temp_lock = DupLock(am->am_ArgList[n].wa_Lock)) )
 		{
-			for (n=0;n<appmsg -> am_NumArgs;n++)
+			if( NameFromLock(temp_lock,temp,sizeof(temp)) )
 			{
-				if (temp_lock = DupLock(appmsg -> am_ArgList[n].wa_Lock))
+				if(am->am_ArgList[n].wa_Name[0] != 0) // exclude drawers
 				{
-					if (NameFromLock(temp_lock,temp,1000))
+					AddPart( temp, am->am_ArgList[n].wa_Name, sizeof(temp) );
+					if(am->am_NumArgs == 1) // only 1 item DnD
 					{
-						if (appmsg -> am_ArgList[n].wa_Name[0]!=0)
-						{
-
-							if (path_whit_name = to_name_and_path( temp, appmsg->am_ArgList[n].wa_Name ))
-							{
-								PlayFile_async(path_whit_name);
-								free(path_whit_name);
-							}
-						}
+						put_scommand2(MP_CMD_LOADFILE,temp,0); // 0:play_right_away 
+					}
+					else
+					{
+//DBUG("D&D[%ld]: '%s' (%s)\n",n,temp,am->am_ArgList[n].wa_Name);
+						put_scommand2(MP_CMD_LOADFILE,temp,1); // 1:append
+						set_osd_msg(OSD_MSG_TEXT, 1, osd_duration, CS(MSG_OSD_Added_Files));
+						AmigaOS_applib_Notify(CS(MSG_Notify_Added_File),am->am_ArgList[n].wa_Name);
 					}
-						
-					UnLock(temp_lock);
 				}
 			}
-			ReplyMsg( (void *) appmsg);
+			UnLock(temp_lock);
 		}
 	}
 }
 
+void AmigaOS_do_appwindow(void)
+{
+	struct AppMessage *am;
+//DBUG("AmigaOS_do_appwindow(0x%08lx)\n",appwin_port);
+	while( (am = (struct AppMessage *)GetMsg(appwin_port)) )
+	//if( (am = (struct AppMessage *)GetMsg(appwin_port)) )
+	{
+		if (am->am_Type == AMTYPE_APPWINDOW)
+		{
+			appwindow_LoopDnD(am);
+		}
+		else
+		{
+			DBUG("Unknown AppMessage %d %p\n", am->am_Type, (APTR)am->am_UserData);
+		}
+
+		ReplyMsg((struct Message *) am);
+	}
+}
diff --color -rupN old/amigaos/appwindow.h new/amigaos/appwindow.h
--- old/amigaos/appwindow.h	1970-01-01 01:00:00.000000000 +0100
+++ new/amigaos/appwindow.h	2023-08-29 13:54:24.000000000 +0200
@@ -0,0 +1,14 @@
+#ifndef __AMIGAOS_SNSPSHOT_H__
+#define __AMIGAOS_SNSPSHOT_H__
+
+#include <workbench/workbench.h>
+
+
+void make_appwindow(struct Window *win);
+void delete_appwindow(void);
+char *to_name_and_path(char *path, char *name);
+void appwindow_LoopDnD(struct AppMessage *am);
+void AmigaOS_do_appwindow(void);
+
+
+#endif
diff --color -rupN old/amigaos/arexx.c new/amigaos/arexx.c
--- old/amigaos/arexx.c	2023-08-01 08:28:44.000000000 +0200
+++ new/amigaos/arexx.c	2023-08-24 15:31:58.000000000 +0200
@@ -23,12 +23,15 @@
 #include <proto/arexx.h>
 #include <intuition/intuition.h>
 #include <intuition/screens.h>
+// #include <reaction/reaction_macros.h>
+
 #include <stdlib.h>
-#include <reaction/reaction_macros.h>
 #include <stdio.h>
+#include <string.h>
+
+#include "debug.h"
 
 #include "input/input.h"
-#include <string.h>
 #include "arexx.h"
 #include "mp_msg.h"
 
@@ -46,19 +49,24 @@ extern struct Screen *My_Screen; //stati
 extern mp_cmd_t mp_cmds[]; //static
 extern BOOL is_mute ; //zzd10h
 extern BOOL is_ontop ; // zzd10h
-extern BOOL choosing_flag; // zzd10h
+// extern BOOL choosing_flag; // zzd10h
+
+extern int spawn_count;
+
+// Macros needs this global
+struct ARexxIFace *IARexx = NULL;
 
 mp_cmd_t RxCmd;
 long arexx_rc2_variable, arexx_paused;
-//markus
+// markus
 long arexx_gui;
 //
 
-extern STRPTR ARexxPortName;
+STRPTR ARexxPortName = NULL;
 
 char AREXXRESULT[10000];
 
-static struct Task    *MainTask	= NULL;	// Pointer to the main task;
+static struct Task *MainTask	= NULL;	// Pointer to the main task;
 struct Process *ARexx_Process		= NULL;
 
 void set_arexx_result(long v)
@@ -140,6 +148,7 @@ static struct ARexxCmd rxCommands[] =
 	{"SCREENSHOT",		RXID_SCREENSHOT,			&rxFunc0,		NULL, 0},
 	{"MENU",			RXID_MENU,				&rxFunc1,		"COMMAND/K/A", 0},
 	{"SET_MENU",		RXID_SET_MENU,			&rxFunc1,		"MENU_NAME/K/A", 0},
+//	{"HELP",			RXID_HELP,				&rxFunc0,		NULL, 0},
 	{"HELP",			RXID_HELP,				&rxFunc0,		NULL, 0},
 	{"EXIT",			RXID_EXIT,				&rxFunc0,		NULL, 0},
 	{"HIDE",			RXID_HIDE,				&rxFunc0,		NULL, 0},
@@ -174,6 +183,7 @@ static void ArexxTask (void)
 			}
 		}
 	}
+
 	if (rxHandler)
 	{
 		EndArexx(rxHandler);
@@ -181,23 +191,26 @@ static void ArexxTask (void)
 	Signal( (struct Task *) MainTask, SIGF_CHILD );
 }
 
-void StartArexx()
+void StartArexx(void)
 {
 //	APTR output = Open("CON:",MODE_NEWFILE);
 
 	MainTask = FindTask(NULL);
+
 	ARexx_Process = CreateNewProcTags(
-				NP_Name, "MPlayer ARexx Process" ,
-				NP_Entry, ArexxTask,
-//				NP_Output, output,
-				NP_Priority, 0,
-				NP_Child, TRUE,
-				TAG_END);
+			NP_Name,  "MPlayer ARexx Process" ,
+			NP_Start, ArexxTask,
+//			NP_Output, output,
+			NP_Priority, 0,
+			NP_Child,    TRUE,
+		TAG_END);
+DBUG("ARexx_Process=0x%08lx (START)\n",ARexx_Process);
 }
 
 
-void StopArexx()
+void StopArexx(void)
 {
+DBUG("ARexx_Process=0x%08lx (END)\n",ARexx_Process);
 	if (ARexx_Process)
 	{
 		Signal( &ARexx_Process->pr_Task, SIGBREAKF_CTRL_C );
@@ -210,14 +223,15 @@ void StopArexx()
 }
 
 
-ArexxHandle* InitArexx()
+ArexxHandle* InitArexx(void)
 {
 	ArexxHandle *ro	= NULL;
 	arexx_paused	= FALSE;
-//markus
+// markus
 	arexx_gui	= FALSE;
 //
-	if ((ro = (ArexxHandle*)AllocVec(sizeof(ArexxHandle),MEMF_SHARED|MEMF_CLEAR)))
+	// if ((ro = (ArexxHandle*)AllocVec(sizeof(ArexxHandle),MEMF_SHARED|MEMF_CLEAR)))
+	if( (ro = (ArexxHandle*)AllocVecTags(sizeof(ArexxHandle), AVT_Type,MEMF_PRIVATE, TAG_DONE)) )
 	{
 		if ((ro->ArexxBase = OpenLibrary("arexx.class",0)))
 		{
@@ -225,35 +239,35 @@ ArexxHandle* InitArexx()
 			{
 				// Macros needs this!!
 				IARexx = ro->IARexx;
-				if (IIntuition)
-				{
-					ro->rxObject =  ARexxObject,
-							 AREXX_HostName,	"MPLAYER",
-							 AREXX_NoSlot,	FALSE,
-							 AREXX_ReplyHook,	NULL,
-							 AREXX_Commands,	rxCommands,
+//				if (IIntuition)
+//				{
+					ro->rxObject = NewObject(AREXX_GetClass(), NULL,
+					//ro->rxObject = NewObject(NULL, "arexx.class",
+							 AREXX_HostName,  "MPLAYER",
+							 AREXX_NoSlot,    FALSE,
+							 AREXX_ReplyHook, NULL,
+							 AREXX_Commands,  rxCommands,
 							TAG_END);
-				}
-				else
-				{
-					ro->rxObject = NULL;
-				}
+//				}
+//				else
+//				{
+//					ro->rxObject = NULL;
+//				}
 
 				if(ro->rxObject)
 				{
 					GetAttr(AREXX_HostName, ro->rxObject, (uint32*)&ARexxPortName); 
 
-
 					GetAttr(AREXX_SigMask,ro->rxObject,&(ro->sigmask));
 					return ro;
 				}
 				else
-			   		mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Unable to initialize the AREXX Port (NewObject failed)\n");
+					mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Unable to initialize the AREXX Port (NewObject failed)\n");
 
 				DropInterface((struct Interface*)ro->IARexx);
 			}
 			else
-			   	mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Unable to initialize the AREXX Port (GetInterface failed)\n");
+				mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Unable to initialize the AREXX Port (GetInterface failed)\n");
 
 			CloseLibrary(ro->ArexxBase);
 		}
@@ -291,7 +305,7 @@ void rxFunc1(struct ARexxCmd *cmd, struc
 	char *str=NULL, isval=FALSE;
 	if(cmd->ac_ArgList)
 	{
-    	//We don't know if it's a string or number yet so cast to both char* and long.
+		// We don't know if it's a string or a number yet, so cast to both char* and long.
 		str =(char*)cmd->ac_ArgList[0];
 		if(str)
 		{
@@ -302,13 +316,23 @@ void rxFunc1(struct ARexxCmd *cmd, struc
 	rxFunc(cmd,value,0,str,NULL,isval,FALSE);
 }
 
+/*void rxFunc1w(struct ARexxCmd *cmd, struct RexxMsg *rm)
+{
+	char isval=FALSE;
+	if(cmd->ac_ArgList)
+	{
+		isval=cmd->ac_ArgList[0] != 0;
+	}
+	rxFunc(cmd,0,0,NULL,NULL,isval,FALSE);
+}*/
+
 void rxFunc2(struct ARexxCmd *cmd, struct RexxMsg *rm)
 {
 	long value=0, value2=0;
 	char *str = NULL, *str2 = NULL, isval=FALSE, isval2=FALSE;
 	if(cmd->ac_ArgList)
 	{
-		//We don't know if it's a string or number yet so cast to both char* and long.
+		// We don't know if it's a string or a number yet, so cast to both char* and long.
 		str =(char*)cmd->ac_ArgList[0];
 		str2=(char*)cmd->ac_ArgList[1];
 		if(str)
@@ -322,7 +346,7 @@ void rxFunc2(struct ARexxCmd *cmd, struc
 			isval2=TRUE;
 		}
 
-		Printf("%ld, %ld\n", value, value2);
+		DBUG("%ld, %ld\n", value, value2);
 	}
 	rxFunc(cmd,value,value2,str,str2,isval,isval2);
 }
@@ -333,7 +357,7 @@ void rxFunc2sw(struct ARexxCmd *cmd, str
 	char *str = NULL, isval=FALSE, isval2=FALSE;
 	if(cmd->ac_ArgList)
 	{
-    	//We don't know if it's a string or number yet so cast to both char* and long.
+		// We don't know if it's a string or a number yet, so cast to both char* and long.
 		if ((str=(char*)cmd->ac_ArgList[0]))
 		{
 			value=*(long*)str;
@@ -341,7 +365,7 @@ void rxFunc2sw(struct ARexxCmd *cmd, str
 		}
 		isval2=cmd->ac_ArgList[1] != 0;
 
-		Printf("value %ld\n", value);
+		DBUG("value %ld\n", value);
 	}
 	rxFunc(cmd,value,isval2,str,NULL,isval,isval2);
 }
@@ -349,17 +373,17 @@ void rxFunc2sw(struct ARexxCmd *cmd, str
 void prepcommand(int cmd,int nargs)
 {
 	RxCmd.id=cmd;
-        strcpy(RxCmd.name, "");
+	strcpy(RxCmd.name, "");
 	RxCmd.nargs=nargs;
 	RxCmd.args[nargs]=mp_cmds[cmd].args[nargs];
 	RxCmd.pausing=arexx_paused;
 }
 
-void postcommand()
+void postcommand(void)
 {
 	mp_cmd_t *c;
 	if ((c=mp_cmd_clone(&RxCmd)))
-    	mp_input_queue_cmd(c);
+	mp_input_queue_cmd(c);
 }
 
 void put_command0(int cmd)
@@ -424,19 +448,19 @@ void put_scommand2(int cmd,char *v,int v
 
 void rxFunc(struct ARexxCmd *cmd, long value, long value2, char *str, char *str2, char isval, char isval2)
 {
-	Printf("ARexx: cmd=%s, v=%ld is=%ld, v2=%ld is2=%ld     \n",  cmd->ac_Name,value,isval,value2,isval2,str?str:"",str2?str2:"");
+DBUG("ARexx: cmd=%s, v=%ld is=%ld, v2=%ld is2=%ld     \n",  cmd->ac_Name,value,isval,value2,isval2,str?str:"",str2?str2:"");
 
- 	cmd->ac_RC=0; // No errors
+	cmd->ac_RC=0; // No errors
 	cmd->ac_RC2=0;
-	cmd -> ac_Result = AREXXRESULT;
+	cmd->ac_Result = AREXXRESULT;
 	sprintf(AREXXRESULT,"");	// Set default value
 
+DBUG("RXID_%02ld\n",cmd->ac_ID);
 
-
-  switch(cmd->ac_ID)
-  {
+	switch(cmd->ac_ID)
+	{
 	case RXID_SEEK:
-		//use value and isval2 and value2
+		// use value and isval2 and value2
 		if(isval2)
 			put_fcommand2(MP_CMD_SEEK,atoff(str),value2);
 		else
@@ -450,14 +474,14 @@ void rxFunc(struct ARexxCmd *cmd, long v
 #endif
 	case RXID_AUDIO_DELAY:    put_fcommand1(MP_CMD_AUDIO_DELAY,atoff(str)); break; //use fval
 	case RXID_QUIT:
-		if (choosing_flag == TRUE) // zzd10h
+		/*if (choosing_flag == TRUE) // zzd10h
 		{
 			struct Screen *screen = NULL;
 			screen = (struct Screen*) ((struct IntuitionBase*) IntuitionBase)->FirstScreen;
 			DisplayBeep(screen) ;
 			return;	// zzd10h
-		}
-		put_command0(MP_CMD_QUIT); break; //use isval and value
+		}*/
+		if(spawn_count == 0) put_command0(MP_CMD_QUIT); break; //use isval and value
 		break ;
 	case RXID_PAUSE:
 		arexx_paused=!arexx_paused;
@@ -466,15 +490,15 @@ void rxFunc(struct ARexxCmd *cmd, long v
 
 	case RXID_FRAME_STEP:     put_command0(MP_CMD_FRAME_STEP); break;
 	case RXID_GRAB_FRAMES:    put_command0(MP_CMD_GRAB_FRAMES); break;
-	case RXID_PT_STEP:        put_icommand2(MP_CMD_PLAY_TREE_STEP,value,isval2); break; //use value and isval2
-	case RXID_PT_UP_STEP:     put_icommand2(MP_CMD_PLAY_TREE_UP_STEP,value,isval2); break; //use value and isval2
-	case RXID_ALT_SRC_STEP:   put_icommand1(MP_CMD_PLAY_ALT_SRC_STEP,value); break; //use value
-	case RXID_SUB_DELAY:      put_fcommand2(MP_CMD_SUB_DELAY,atoff(str),isval2); break; //use fval and isval2
-	case RXID_SUB_STEP:       put_icommand1(MP_CMD_SUB_STEP,value); break; //use value
-	case RXID_SUB_LOAD:       put_scommand1(MP_CMD_SUB_LOAD,str); break; //use str
-	case RXID_SUB_REMOVE:     put_icommand1(MP_CMD_SUB_REMOVE,isval?value:-1); break; //use isval and value
-	case RXID_OSD:            put_icommand1(MP_CMD_OSD,isval?value:-1); break; //use isval and value
-	case RXID_OSD_SHOW_TEXT:  put_scommand1(MP_CMD_OSD_SHOW_TEXT,str); break; //use str
+	case RXID_PT_STEP:        put_icommand2(MP_CMD_PLAY_TREE_STEP,value,isval2); break; // use value and isval2
+	case RXID_PT_UP_STEP:     put_icommand2(MP_CMD_PLAY_TREE_UP_STEP,value,isval2); break; // use value and isval2
+	case RXID_ALT_SRC_STEP:   put_icommand1(MP_CMD_PLAY_ALT_SRC_STEP,value); break; // use value
+	case RXID_SUB_DELAY:      put_fcommand2(MP_CMD_SUB_DELAY,atoff(str),isval2); break; // use fval and isval2
+	case RXID_SUB_STEP:       put_icommand1(MP_CMD_SUB_STEP,value); break; // use value
+	case RXID_SUB_LOAD:       put_scommand1(MP_CMD_SUB_LOAD,str); break; // use str
+	case RXID_SUB_REMOVE:     put_icommand1(MP_CMD_SUB_REMOVE,isval?value:-1); break; // use isval and value
+	case RXID_OSD:            put_icommand1(MP_CMD_OSD,isval?value:-1); break; // use isval and value
+	case RXID_OSD_SHOW_TEXT:  put_scommand1(MP_CMD_OSD_SHOW_TEXT,str); break; // use str
 	case RXID_VOLUME:
 						if (isval2)
 						{
@@ -487,17 +511,17 @@ void rxFunc(struct ARexxCmd *cmd, long v
 						break; //use value and isval2
 
 	case RXID_MUTE:           put_command0(MP_CMD_MUTE); is_mute = !is_mute ; break;
-	case RXID_SWITCH_AUDIO:   put_icommand1(MP_CMD_SWITCH_AUDIO,isval?value:-1); break; //use isval and value
-	case RXID_CONTRAST:       put_icommand2(MP_CMD_CONTRAST,value,isval2); break; //use value and isval2
-	case RXID_GAMMA:          put_icommand2(MP_CMD_GAMMA,value,isval2); break; //use value and isval2
-	case RXID_BRIGHTNESS:     put_icommand2(MP_CMD_BRIGHTNESS,value,isval2); break; //use value and isval2
-	case RXID_HUE:            put_icommand2(MP_CMD_HUE,value,isval2); break; //use value and isval2
-	case RXID_SATURATION:     put_icommand2(MP_CMD_SATURATION,value,isval2); break; //use value and isval2
-	case RXID_FRAME_DROP:     put_icommand1(MP_CMD_FRAMEDROPPING,isval?value:-1); break; //use isval and value
-	case RXID_SUB_POS:        put_icommand1(MP_CMD_SUB_POS,value); break; //use value
-	case RXID_SUB_ALIGNMENT:  put_icommand1(MP_CMD_SUB_ALIGNMENT,isval?value:-1); break; //use value
+	case RXID_SWITCH_AUDIO:   put_icommand1(MP_CMD_SWITCH_AUDIO,isval?value:-1); break; // use isval and value
+	case RXID_CONTRAST:       put_icommand2(MP_CMD_CONTRAST,value,isval2); break; // use value and isval2
+	case RXID_GAMMA:          put_icommand2(MP_CMD_GAMMA,value,isval2); break; // use value and isval2
+	case RXID_BRIGHTNESS:     put_icommand2(MP_CMD_BRIGHTNESS,value,isval2); break; // use value and isval2
+	case RXID_HUE:            put_icommand2(MP_CMD_HUE,value,isval2); break; // use value and isval2
+	case RXID_SATURATION:     put_icommand2(MP_CMD_SATURATION,value,isval2); break; // use value and isval2
+	case RXID_FRAME_DROP:     put_icommand1(MP_CMD_FRAMEDROPPING,isval?value:-1); break; // use isval and value
+	case RXID_SUB_POS:        put_icommand1(MP_CMD_SUB_POS,value); break; // use value
+	case RXID_SUB_ALIGNMENT:  put_icommand1(MP_CMD_SUB_ALIGNMENT,isval?value:-1); break; // use value
 	case RXID_SUB_VISIBILITY: put_command0(MP_CMD_SUB_VISIBILITY); break;
-	case RXID_SUB_SELECT:     put_icommand1(MP_CMD_SUB_SELECT,isval?value:-1); break; //use isval and value
+	case RXID_SUB_SELECT:     put_icommand1(MP_CMD_SUB_SELECT,isval?value:-1); break; // use isval and value
 	case RXID_GET_SUB_VISIBILITY:
 #ifdef USE_LOCAL_AREXX_GET
 		cmd->ac_RC2=rxid_get_sub_visibility();
@@ -523,9 +547,9 @@ void rxFunc(struct ARexxCmd *cmd, long v
 #endif
 		break;
 	case RXID_GET_TIME_LENGTH:
-/* markus If any command comes to arexx it should be AOS GUI  - space/pasue is disable
+/* markus If any command comes to ARexx it should be AmigaOS GUI  - space/pause is disable
           If it is opened from the console and nothing is invoked the space/pause will be available 
-*/ 
+*/
 		if(arexx_gui!=TRUE) arexx_gui=TRUE;
 // end markus
 #ifdef USE_LOCAL_AREXX_GET
@@ -548,46 +572,43 @@ void rxFunc(struct ARexxCmd *cmd, long v
 	case RXID_VO_ONTOP:      put_command0(MP_CMD_VO_ONTOP); is_ontop = !is_ontop ; break;
 	case RXID_VO_ROOTWIN:    put_command0(MP_CMD_VO_ROOTWIN); break;
 	case RXID_SWITCH_VSYNC:
-		//use isval and value
+		// use isval and value
 		if(isval)
 			put_icommand1(MP_CMD_SWITCH_VSYNC,value);
 		else
 			put_command0(MP_CMD_SWITCH_VSYNC);
 		break;
 	case RXID_SWITCH_RATIO:
-    		//use isval and str
+		// use isval and str
 		if(isval)
 			put_fcommand1(MP_CMD_SWITCH_RATIO,atoff(str));
 		else
 			put_command0(MP_CMD_SWITCH_RATIO);
 		break;
-	case RXID_PANSCAN:            put_fcommand2(MP_CMD_PANSCAN,atoff(str),isval2); break; //use value and value2
-	case RXID_LOADFILE:           put_scommand2(MP_CMD_LOADFILE,str,isval2); break; //use str and isval2
-	case RXID_LOADLIST:           put_scommand2(MP_CMD_LOADLIST,str,isval2); break; //use str and isval2
-	case RXID_CHANGE_RECTANGLE:   put_icommand2(MP_CMD_VF_CHANGE_RECTANGLE,value,value2); break; //use value and value2
-	case RXID_DVDNAV:             put_icommand1(MP_CMD_DVDNAV,value); break; //use value
-//	case RXID_DVDNAV_EVENT:       put_icommand1(MP_CMD_DVDNAV_EVENT,value); break; //use value
+	case RXID_PANSCAN:            put_fcommand2(MP_CMD_PANSCAN,atoff(str),isval2); break; // use value and value2
+	case RXID_LOADFILE:           put_scommand2(MP_CMD_LOADFILE,str,isval2); break; // use str and isval2
+	case RXID_LOADLIST:           put_scommand2(MP_CMD_LOADLIST,str,isval2); break; // use str and isval2
+	case RXID_CHANGE_RECTANGLE:   put_icommand2(MP_CMD_VF_CHANGE_RECTANGLE,value,value2); break; // use value and value2
+	case RXID_DVDNAV:             put_icommand1(MP_CMD_DVDNAV,value); break; // use value
+//	case RXID_DVDNAV_EVENT:       put_icommand1(MP_CMD_DVDNAV_EVENT,value); break; // use value
 	case RXID_FORCED_SUBS_ONLY:   put_command0(MP_CMD_SUB_FORCED_ONLY); break;
 #ifdef HAS_DVBIN_SUPPORT
-	case RXID_DVB_SET_CHANNEL:    put_icommand2(MP_CMD_DVB_SET_CHANNEL,value,value2); break; //use value and value2
+	case RXID_DVB_SET_CHANNEL:    put_icommand2(MP_CMD_DVB_SET_CHANNEL,value,value2); break; // use value and value2
 #endif
 	case RXID_SCREENSHOT:         put_icommand1(MP_CMD_SCREENSHOT,0); break;
 	case RXID_USE_MASTER:         put_command0(MP_CMD_MIXER_USEMASTER); break;
-	case RXID_MENU:               put_scommand1(MP_CMD_MENU,str); break; //use str
-	case RXID_SET_MENU:           put_scommand1(MP_CMD_SET_MENU,str); break; //use str
+	case RXID_MENU:               put_scommand1(MP_CMD_MENU,str); break; // use str
+	case RXID_SET_MENU:           put_scommand1(MP_CMD_SET_MENU,str); break; // use str
 	case RXID_HELP:
-
-					// Put_command0(MP_CMD_CHELP);
-					arexx_help();
-
-					break;
+		// put_command0(MP_CMD_CHELP);
+		arexx_help();
+		break;
 	case RXID_EXIT:               put_command0(MP_CMD_CEXIT); break;
 	case RXID_HIDE:               put_command0(MP_CMD_CHIDE); break;
 
 	default:
 		cmd -> ac_RC = RC_FATAL;		// Unknown ARexx command
-  }
-
-	Printf("RC: %ld,RC2: %ld, Result: '%s'\n",cmd ->ac_RC,cmd ->ac_RC2, cmd -> ac_Result);
+	}
 
+	DBUG("RC: %ld,RC2: %ld, Result: '%s'\n",cmd ->ac_RC,cmd ->ac_RC2, cmd -> ac_Result);
 }
diff --color -rupN old/amigaos/debug.h new/amigaos/debug.h
--- old/amigaos/debug.h	2023-08-01 20:41:04.000000000 +0200
+++ new/amigaos/debug.h	2023-08-13 13:02:34.000000000 +0200
@@ -19,11 +19,14 @@
 #ifndef AMIGAOS4_DEBUG_H
 #define AMIGAOS4_DEBUG_H
 
+#include <proto/exec.h>
 
 #if defined(DEBUG)
 	#define DBUG(x,...) DebugPrintF("[%s:%-4ld] "x ,__FILE__,__LINE__, ##__VA_ARGS__)
+	#define IDBUG(x,...) IExec->DebugPrintF("[%s:%-4ld] "x ,__FILE__,__LINE__, ##__VA_ARGS__)
 #else
 	#define DBUG(x,...)
+	#define IDBUG(x,...)
 #endif
 
 
diff --color -rupN old/amigaos/menu.c new/amigaos/menu.c
--- old/amigaos/menu.c	2023-08-07 10:34:41.000000000 +0200
+++ new/amigaos/menu.c	2023-08-29 00:49:50.000000000 +0200
@@ -22,38 +22,41 @@
 #include <proto/asl.h>
 #include <proto/requester.h>
 #include <proto/exec.h>
+#include <proto/wb.h>
+#include <proto/utility.h>
 #include <classes/requester.h>
 #include <libraries/gadtools.h>
 #include <intuition/menuclass.h>
 
 #include <images/bitmap.h>
-#include <proto/bitmap.h>
+// #include <proto/bitmap.h>
 
 #include <stdbool.h>
 
+// #include "SDL/SDL_endian.h"
+
 #include "mp_msg.h"
 #include "mp_core.h"
 
 #include "input/input.h"
 #include "arexx.h"
-// #include "menu.h"
+#include "menu.h"
 #include "../osdep/keycodes.h"
 #include "../version.h"
 #define FFMPEG_VERSION "6.0"
 
-// #include "debug.h"
+#include "debug.h"
 
 
 BOOL is_ontop = FALSE;
 BOOL is_mute = FALSE;	// zzd10h
 
-STRPTR ARexxPortName;
+extern STRPTR ARexxPortName;
 
 extern mp_cmd_t mp_cmds[]; // static
 extern struct Screen *My_Screen;
 extern int stream_cache_size;	// Need to set this to 0 if you select DVDNAV.
-
-void ShowAbout(void);
+extern uint32_t is_fullscreen;
 
 static void OpenDVD(STRPTR args UNUSED, int32 length UNUSED, struct ExecBase *execbase UNUSED);
 static void OpenDVDNAV(STRPTR args UNUSED, int32 length UNUSED, struct ExecBase *execbase UNUSED);
@@ -68,15 +71,17 @@ int32 PlayFile_async(const char *FileNam
 
 static UBYTE *LoadFile(const char *StartingDir, CONST_STRPTR ASL_Pattern, CONST_STRPTR ASL_WindowTitle);
 static int32 PrintMsgProc(STRPTR args UNUSED, int32 length UNUSED, struct ExecBase *execbase);
-void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE);
+void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE, CONST_STRPTR title);
+
+
+extern void make_appwindow(struct Window *win);
+extern void delete_appwindow(void);
 
-// extern void make_appwindow(struct Window *win );
-// extern void delete_appwindow();
 
-void prevfilm();
-void nextfilm();
+void prevfile(void);
+void nextfile(void);
 
-BOOL loop_on();
+BOOL loop_on(void);
 
 extern BOOL choosing_flag;
 extern void set_gfx_rendering_option();
@@ -87,16 +92,14 @@ extern int AISS_MENU_SIZE ;			// In amig
 extern BOOL MENUCLASS_SUPPORT ;		// In amigaos_stuff.c zzd10h TRUE if MenuClass menu is supported (AmigaOS 4.1 FE with intuition.library >= 54.6)
 extern BOOL BANNER_DISPLAY ;			// In amigaos_stuff.c zzd10h Display banner ? SETENV SAVE Disable_Banner_Images 1 to disable them
 // struct Screen *screen;
-// new AEon InfoWindow Class
-// extern BOOL INFOWINDOWCLASS_SUPPORT ;	// AEon infowindow Class support
+
+extern Class *RequesterClass, *InfoWindowClass, *BitMapClass;
+
 #include <classes/infowindow.h>
-extern Class *InfoWindowClass;
 extern struct ClassLibrary *InfoWindowBase;
 #include "infowindow_banner.h" // using bin2C
 #define BANNER_WIDTH  60
 #define BANNER_HEIGHT 57
-
-struct Screen *FrontMostScr(void);
 static void BackFillFunc(struct Hook *hook UNUSED, struct RastPort *rp, struct BackFillMessage *msg);
 
 
@@ -117,59 +120,76 @@ extern struct Catalog *catalog ;
 extern STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
 #define CS(id) myGetCatalogStr(catalog,id,id##_STR)
 
-char menu_MPlayer[64];
-	char menu_MPlayer_LoadFile[64];
-	char menu_MPlayer_OpenDVD[64];
-	char menu_MPlayer_OpenDVDNAV[64];
-	char menu_MPlayer_OpenVCD[64];
-	char menu_MPlayer_OpenNetwork[64];
-	char menu_MPlayer_AboutMPlayer[64];
-	char menu_MPlayer_Iconify[64];
-	char menu_MPlayer_Quit[64];
+char menu_Project[64];
+	char menu_Project_OpenFile[64];
+	char menu_Project_OpenDVD[64];
+	char menu_Project_OpenDVDNAV[64];
+	char menu_Project_OpenVCD[64];
+	char menu_Project_OpenNetwork[64];
+	char menu_Project_AboutMPlayer[64];
+	char menu_Project_Iconify[64];
+	char menu_Project_Quit[64];
+
 char menu_Play[64];
 	char menu_Play_PlayPause[64];
 	char menu_Play_Stop[64];
+char menu_Play_Record[64];
 	char menu_Play_Loop[64];
 	char menu_Play_PrevFilm[64];
 	char menu_Play_NextFilm[64];
+	char menu_Play_Properties[64];
+
 char menu_OptionsVideo[64];
 	char menu_OptionsVideo_StayOnTop[64];
 	char menu_OptionsVideo_OpenSubtitles[64];
 	char menu_OptionsVideo_CycleSubtitles[64];
+char menu_OptionsVideo_UnloadSubtitles[64];
 	char menu_OptionsVideo_Fullscreen[64];
 	char menu_OptionsVideo_Screenshot[64];
+char menu_OptionsVideo_AspectRatio[64];
+char menu_OptionsVideo_AR_Original[64];
+
 char menu_OptionsAudio[64];
 	char menu_OptionsAudio_Mute[64];
 	char menu_OptionsAudio_VolumeUp[64];
 	char menu_OptionsAudio_VolumeDown[64];
 
+char menu_Settings[64];
+	char menu_Settings_MPlayerGUI[64];
+
 void choosing(BOOL set)
 {
 	choosing_flag = set;
 	set_gfx_rendering_option();
 }
 
-void blink_screen()
+void blink_screen(void)
 {
 	struct Screen *screen = NULL;
 	screen = (struct Screen*) ((struct IntuitionBase*) IntuitionBase)->FirstScreen;
 	DisplayBeep(screen) ;
 }
 
+extern char *TOOL_MPGUI;
 extern char *SUBEXTPAT;
 extern char *EXTPATTERN;
 extern MPContext *mpctx;
 
+
+// MUST match struct NewMenu order
 enum
 {
-	ID_load_file,
+	ID_open_file,
 	ID_open_dvd,
 	ID_open_dvdnav,
 	ID_open_vcd,
 	ID_open_network,
+dummy1,
 	ID_iconify,
-	ID_about = 6,
-	ID_quit = 8
+	ID_about,
+dummy2,
+	ID_quit,
+NUMITEMS_PROJECT
 };
 
 enum
@@ -177,29 +197,46 @@ enum
 	ID_play,
 	ID_stop,
 	ID_loop,
+// ID_record,
+dummy3,
 	ID_prev,
-	ID_next
+	ID_next,
+dummy4,
+	ID_properties,
+NUMITEMS_PLAY
 };
 
 enum
 {
 	ID_ontop,
+	ID_fullscreen,
+	ID_screenshot,
+//	ID_aspectratio,
+dummy5,
 	ID_opensubtitles,
 	ID_subtitles,
-	ID_fullscreen,
-	ID_screenshot
+ID_unloadsubtitles,
+NUMITEMS_VIDEO
 };
 
 enum
 {
 	ID_mute,
 	ID_volume_up,
-	ID_volume_down
+	ID_volume_down,
+NUMITEMS_AUDIO
 };
 
+enum
+{
+	ID_mplayergui,
+NUMITEMS_SETTINGS
+};
+
+
 void open_menu(void);
 
-void cmd_load_file(void);
+void cmd_open_file(void);
 void cmd_open_dvd(void);
 void cmd_open_dvdnav(void);
 void cmd_open_vcd(void);
@@ -207,21 +244,25 @@ void cmd_open_network(void);
 void cmd_play(void);
 
 void add_file_to_que(char *FileName);
-void cmd_load_subtitles(void);
+void cmd_open_subtitles(void);
+void cmd_properties(void);
+void cmd_mplayergui(void);
 
-void menu_mplayer(ULONG menucode);
+void menu_project(ULONG menucode);
 void menu_play(ULONG menucode);
 void menu_video(ULONG menucode);
-void menu_aspect(ULONG menucode);
+// void menu_aspect(ULONG menucode);
 void menu_audio(ULONG menucode);
+void menu_settings(ULONG menucode);
 
 void (*select_menu[]) (ULONG menucode) =
 {
-	menu_mplayer,
+	menu_project,
 	menu_play,
 	menu_video,
 //	menu_aspect,
-	menu_audio
+	menu_audio,
+menu_settings
 };
 
 struct pmpMessage {
@@ -235,8 +276,11 @@ struct pmpMessage errmsg =
 	"Error",0,0
 };
 
-	int play_start_id = 11;
-	int video_start_id = 17;
+// int play_start_id   = 11;
+// int video_start_id  = 17;
+#define PLAY_START_ID         NUMITEMS_PROJECT + 1 + 1            // +MSG_Menu_Project and we are "pointing" to next item
+#define VIDEO_START_ID        PLAY_START_ID + NUMITEMS_PLAY + 1   // we are "pointing" to next item
+// #define ASPECTRATIO_START_ID  VIDEO_START_ID + ID_aspectratio + 1 // +MSG_Menu_Video
 
 int spawn_count = 0;
 
@@ -244,121 +288,95 @@ int spawn_count = 0;
 /****************** MENU DEFINITION *******************/
 	static struct Menu *menu;
 
-/*
-struct NewMenu amiga_menu[] =
-{
-	{ NM_TITLE,	"MPlayer ", 	0, 0, 0, 0},
-	{ NM_ITEM,	"Load File...", 	0, 0, 0, 0},
-	{ NM_ITEM,	"Open DVD",		"O", 0, 0, 0},
-	{ NM_ITEM,	NM_BARLABEL, 	0, 0, 0, 0},
-	{ NM_ITEM,	"Save",		"S", 0, 0, 0},
-	{ NM_ITEM,	"Save as...", 	0, 0, 0, 0},
-	{ NM_ITEM,	NM_BARLABEL,	0, 0, 0, 0},
-	{ NM_ITEM,	"About...", 	"?", 0, 0, 0},
-	{ NM_ITEM,	"Iconify", 		"I", 0, 0, 0},
-	{ NM_ITEM,	NM_BARLABEL, 	0, 0, 0, 0},
-	{ NM_ITEM,	"Quit", 		"Q", 0, 0, 0},
-
-	{ NM_TITLE,	"Prefs ", 		0, 0, 0, 0},
-	{ NM_ITEM,	"Use Extras", 	0, MENUTOGGLE | CHECKIT | CHECKED, 0, 0},		//  1
-	{ NM_ITEM,	"Use SubMenus",	0, MENUTOGGLE | CHECKIT | CHECKED, 0, 0},		//  2
-	{ NM_ITEM,	"Use Radios",	0, MENUTOGGLE | CHECKIT | CHECKED, 0, 0},		//  4
-	{ NM_ITEM,	NM_BARLABEL, 	0, 0, 0, 0},						//  8
-	{ NM_ITEM,	"Radio 1",		0, CHECKIT | CHECKED, 96, 0},				//  16
-	{ NM_ITEM,	"Radio 2",		0, CHECKIT, 80, 0},					//  32
-	{ NM_ITEM,	"Radio 3",		0, CHECKIT, 48, 0},					//  64
-	{ NM_ITEM,	NM_BARLABEL,	0, 0, 0, 0},						//  128
-	{ NM_ITEM,	"SubItems",		0, 0, 0, 0},						//  256
-
-	{ NM_SUB,	"Enable Radios",	0, MENUTOGGLE | CHECKIT, 32, 0},			//  1
-	{ NM_SUB,	NM_BARLABEL,	0, 0, 0, 0},						//  2
-	{ NM_SUB,	"Radio 4",		0, NM_ITEMDISABLED | CHECKIT | CHECKED, 8, 0},	//  4
-	{ NM_SUB,	"Radio 5",		0, NM_ITEMDISABLED | CHECKIT, 4, 0},		//  8
-	{ NM_SUB,	NM_BARLABEL,	0, 0, 0, 0},						//  16
-	{ NM_SUB,	"Disable Radios", 0, MENUTOGGLE | CHECKIT | CHECKED, 1, 0},		//  32
-
-	{ NM_ITEM,	NM_BARLABEL,	0, 0, 0, 0},						//  512
-	{ NM_ITEM,	"Save Prefs",	0, 0, 0, 0},						//  1024
-
-
-	{ NM_TITLE,	"Extras ",		0, 0, 0, 0},
-	{ NM_ITEM,	"Help",		0, 0, 0, 0},
-	{ NM_ITEM,	"Arexx",		0, 0, 0, 0},
-
-	{ NM_END,	NULL,			0, 0, 0, 0}
-};
-
-*/
-
-// MenuClass Menu // zzd10h
+// MenuClass Menu [zzd10h]
 enum
 {
-    MID_MENU_LOADFILE_MENUCLASS = 1,
-    MID_MENU_OPENDVD_MENUCLASS ,
+    MID_MENU_OPENFILE_MENUCLASS = 1,
+    MID_MENU_OPENDVD_MENUCLASS,
     MID_MENU_OPENDVDNAV_MENUCLASS,
-    MID_MENU_OPENVCD_MENUCLASS ,
+    MID_MENU_OPENVCD_MENUCLASS,
     MID_MENU_OPENNETWORK_MENUCLASS,
-    MID_MENU_ABOUT_MENUCLASS ,
-    MID_MENU_ICONIFY_MENUCLASS ,
+    MID_MENU_ICONIFY_MENUCLASS,
+    MID_MENU_ABOUT_MENUCLASS,
     MID_MENU_QUIT_MENUCLASS,
-    MID_MENU_PLAYPAUSE_MENUCLASS ,
+    MID_MENU_PLAYPAUSE_MENUCLASS,
     MID_MENU_STOP_MENUCLASS,
-    MID_MENU_LOOP_MENUCLASS ,
-    MID_MENU_PREVFILM_MENUCLASS,
-    MID_MENU_NEXTFILM_MENUCLASS,
-    MID_MENU_STAYONTOP_MENUCLASS ,
+MID_MENU_RECORD_MENUCLASS,
+    MID_MENU_LOOP_MENUCLASS,
+    MID_MENU_PREVFILE_MENUCLASS,
+    MID_MENU_NEXTFILE_MENUCLASS,
+    MID_MENU_PROPERTIES_MENUCLASS,
+    MID_MENU_STAYONTOP_MENUCLASS,
+    MID_MENU_OPENSUBTITLES_MENUCLASS,
     MID_MENU_CYCLESUBTITLES_MENUCLASS,
-    MID_MENU_FULLSCREEN_MENUCLASS ,
+MID_MENU_UNLOADSUBTITLES_MENUCLASS,
+    MID_MENU_FULLSCREEN_MENUCLASS,
     MID_MENU_SCREENSHOT_MENUCLASS,
-    MID_MENU_MUTE_MENUCLASS ,
+MID_MENU_ASPECTRATIO_MENUCLASS,
+MID_MENU_AR_ORIGINAL_MENUCLASS,
+MID_MENU_AR_16_10_MENUCLASS,
+MID_MENU_AR_16_9_MENUCLASS,
+MID_MENU_AR_185_1_MENUCLASS,
+MID_MENU_AR_221_1_MENUCLASS,
+MID_MENU_AR_235_1_MENUCLASS,
+MID_MENU_AR_239_1_MENUCLASS,
+MID_MENU_AR_5_3_MENUCLASS,
+MID_MENU_AR_4_3_MENUCLASS,
+MID_MENU_AR_5_4_MENUCLASS,
+// MID_MENU_AR_1_1_MENUCLASS,
+    MID_MENU_MUTE_MENUCLASS,
     MID_MENU_VOLUMEUP_MENUCLASS,
-    MID_MENU_VOLUMEDOWN_MENUCLASS ,
-    MID_MENU_OPENSUBTITLES_MENUCLASS,
+    MID_MENU_VOLUMEDOWN_MENUCLASS,
+    MID_MENU_MPLAYERGUI_MENUCLASS,
 
     MID_MENU_AUTO_BASE = 1000
 };
 
-    Object *amiga_menuClass = NULL ;     // Menu for MenuClass of AmigaOS 4.1 FE
-    Object *menuobj_MID_MENU_LOADFILE_MENUCLASS;
-    Object *menuobj_MID_MENU_OPENDVD_MENUCLASS;
-    Object *menuobj_MID_MENU_OPENDVDNAV_MENUCLASS;
-    Object *menuobj_MID_MENU_OPENVCD_MENUCLASS;
-    Object *menuobj_MID_MENU_OPENNETWORK_MENUCLASS;
-    Object *menuobj_MID_MENU_ABOUT_MENUCLASS;
-    Object *menuobj_MID_MENU_ICONIFY_MENUCLASS;
-    Object *menuobj_MID_MENU_QUIT_MENUCLASS;
-    Object *menuobj_MID_MENU_PLAYPAUSE_MENUCLASS;
-    Object *menuobj_MID_MENU_STOP_MENUCLASS;
-    Object *menuobj_MID_MENU_LOOP_MENUCLASS;
-    Object *menuobj_MID_MENU_PREVFILM_MENUCLASS;
-    Object *menuobj_MID_MENU_NEXTFILM_MENUCLASS;
-    Object *menuobj_MID_MENU_STAYONTOP_MENUCLASS;
-    Object *menuobj_MID_MENU_CYCLESUBTITLES_MENUCLASS;
-    Object *menuobj_MID_MENU_FULLSCREEN_MENUCLASS;
-    Object *menuobj_MID_MENU_SCREENSHOT_MENUCLASS;
-    Object *menuobj_MID_MENU_MUTE_MENUCLASS;
-    Object *menuobj_MID_MENU_VOLUMEUP_MENUCLASS;
-    Object *menuobj_MID_MENU_VOLUMEDOWN_MENUCLASS;
-    Object *menuobj_MID_MENU_OPENSUBTITLES_MENUCLASS;
+Object *amiga_menuClass = NULL ;     // Menu for MenuClass of AmigaOS 4.1 FE
+/*Object *menuobj_MID_MENU_OPENFILE_MENUCLASS;
+Object *menuobj_MID_MENU_OPENDVD_MENUCLASS;
+Object *menuobj_MID_MENU_OPENDVDNAV_MENUCLASS;
+Object *menuobj_MID_MENU_OPENVCD_MENUCLASS;
+Object *menuobj_MID_MENU_OPENNETWORK_MENUCLASS;
+Object *menuobj_MID_MENU_ICONIFY_MENUCLASS;
+Object *menuobj_MID_MENU_ABOUT_MENUCLASS;
+Object *menuobj_MID_MENU_QUIT_MENUCLASS;
+Object *menuobj_MID_MENU_PLAYPAUSE_MENUCLASS;
+Object *menuobj_MID_MENU_STOP_MENUCLASS;
+Object *menuobj_MID_MENU_LOOP_MENUCLASS;
+Object *menuobj_MID_MENU_PREVFILE_MENUCLASS;
+Object *menuobj_MID_MENU_NEXTFILE_MENUCLASS;
+Object *menuobj_MID_MENU_STAYONTOP_MENUCLASS;
+Object *menuobj_MID_MENU_FULLSCREEN_MENUCLASS;
+Object *menuobj_MID_MENU_SCREENSHOT_MENUCLASS;
+Object *menuobj_MID_MENU_CYCLESUBTITLES_MENUCLASS;
+//	Object *menuobj_MID_MENU_ASPECTRATIO_MENUCLASS;
+Object *menuobj_MID_MENU_MUTE_MENUCLASS;
+Object *menuobj_MID_MENU_VOLUMEUP_MENUCLASS;
+Object *menuobj_MID_MENU_VOLUMEDOWN_MENUCLASS;
+Object *menuobj_MID_MENU_OPENSUBTITLES_MENUCLASS;
+Object *menuobj_MID_MENU_PROPERTIES_MENUCLASS;
+Object *menuobj_MID_MENU_MPLAYERGUI_MENUCLASS;*/
 
 enum    // Root menus
 {
-    MPLAYER_MENU,
+    PROJECT_MENU,
     PLAY_MENU,
     VIDEO_OPTIONS_MENU,
-    AUDIO_OPTIONS_MENU
+    AUDIO_OPTIONS_MENU,
+    SETTINGS_MENU
 };
 
-enum    // Items of MPLAYER_MENU NewMenu menu
+enum    // Items of PROJECT_MENU NewMenu menu
 {
-    MENU_LOADFILE,
+    MENU_OPENFILE,
     MENU_OPENDVD,
     OPENDVDNAV,
     OPENVCD,
     OPENNETWORK,
     BAR1,
-    MENU_ABOUT,
     MENU_ICONIFY,
+    MENU_ABOUT,
     BAR2,
     MENU_QUIT
 };
@@ -367,18 +385,25 @@ enum    // Items of PLAY_MENU NewMenu me
 {
     MENU_PLAYPAUSE,
     MENU_STOP,
+MENU_RECORD,
     MENU_LOOP,
-    MENU_PREVFILM,
-    MENU_NEXTFILM
+BAR3,
+    MENU_PREVFILE,
+    MENU_NEXTFILE,
+BAR4,
+MENU_PROPERTIES
 };
 
 enum    // Items of VIDEO_OPTIONS_MENU NewMenu menu
 {
     MENU_STAYONTOP,
+    MENU_FULLSCREEN,
+    MENU_SCREENSHOT,
+MENU_ASPECTRATIO,
+BAR5,
     MENU_OPENSUBTITLES,
     MENU_CYCLESUBTITLES,
-    MENU_FULLSCREEN,
-    MENU_SCREENSHOT
+MENU_UNLOADSUBTITLES,
 };
 
 enum    // Items of AUDIO_OPTIONS_MENU NewMenu menu
@@ -388,129 +413,151 @@ enum    // Items of AUDIO_OPTIONS_MENU N
     MENU_VOLUMEDOWN
 };
 
-struct NewMenu amiga_menu[] =
+enum    // Items of SETTINGS_MENU NewMenu menu
 {
-      // Type, Label, CommKey, Flags, MutualExclude, UserData
+    MENU_MPLAYERGUI
+};
 
-		{ NM_TITLE, menu_MPlayer,				NULL,						0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_LoadFile,			(STRPTR)"F",				0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_OpenDVD,			(STRPTR)"D",				0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_OpenDVDNAV,         	(STRPTR)"N",				0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_OpenVCD,            	(STRPTR)"V",				0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_OpenNetwork,        	(STRPTR)"R",				0, 0L, NULL },
-		{ NM_ITEM, NM_BARLABEL,											0,                  0,  0,     0},
-		{ NM_ITEM,  menu_MPlayer_AboutMPlayer,		(STRPTR)"?",				0, 0L, NULL },
-		{ NM_ITEM,  menu_MPlayer_Iconify,	 		(STRPTR)"I",				0, 0L, NULL },
-		{ NM_ITEM, NM_BARLABEL,											0,                  0,  0,     0},
-		{ NM_ITEM,  menu_MPlayer_Quit,               	(STRPTR)"Q",				0, 0L, NULL },
-
-		{ NM_TITLE, menu_Play,					NULL,						0, 0L, NULL },
-		{ NM_ITEM,  menu_Play_PlayPause,			(STRPTR)"P",				0, 0L, NULL },
-		{ NM_ITEM,  menu_Play_Stop,				(STRPTR)"S",				0, 0L, NULL },
-		{ NM_ITEM,  menu_Play_Loop,				(STRPTR)"L", MENUTOGGLE|CHECKIT, 	0L, NULL },
-		{ NM_ITEM,  menu_Play_PrevFilm,			(STRPTR)"E",                  	0, 0L, NULL },
-		{ NM_ITEM,  menu_Play_NextFilm,			(STRPTR)"X",                  	0, 0L, NULL },
-
-		{ NM_TITLE, menu_OptionsVideo,			NULL,                  			0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsVideo_StayOnTop,        NULL, MENUTOGGLE|CHECKIT, 		0L, NULL },
-		{ NM_ITEM,  menu_OptionsVideo_OpenSubtitles,	0,                  			0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsVideo_CycleSubtitles,	0,                  			0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsVideo_Fullscreen,	0,                  				0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsVideo_Screenshot,       NULL,                  			0, 0L, NULL },
-		/*
-		{ NM_ITEM, NM_BARLABEL,              		NULL,	0, 0L, NULL },
-		{ NM_ITEM,  (STRPTR)"Normal Dimension",       	(STRPTR)"1",    				0, 0L, NULL },
-		{ NM_ITEM,  (STRPTR)"Doubled Dimension",      	(STRPTR)"2",    				0, 0L, NULL },
-		{ NM_ITEM,  (STRPTR)"Screen Dimension",       	(STRPTR)"3",    				0, 0L, NULL },
-		{ NM_ITEM,  (STRPTR)"Half Dimension",         	(STRPTR)"4",    				0, 0L, NULL },
-		{ NM_ITEM, NM_BARLABEL,              		NULL,	0, 0L, NULL },
-		// 23
-		{ NM_ITEM,  (STRPTR)"Aspect Ratio",       	NULL,						0, 0L, NULL },
-		{ NM_SUB,   (STRPTR)"Original",      		NULL,						MENUTOGGLE|CHECKIT|CHECKED, ~1, NULL },
-		{ NM_SUB,   (STRPTR)"16:10",      			NULL,						MENUTOGGLE|CHECKIT, ~2, NULL },
-		{ NM_SUB,   (STRPTR)"16:9",      			NULL,						MENUTOGGLE|CHECKIT, ~4, NULL },
-		{ NM_SUB,   (STRPTR)"1.85:1",      			NULL,						MENUTOGGLE|CHECKIT, ~8, NULL },
-		{ NM_SUB,   (STRPTR)"2.21:1",      			NULL,						MENUTOGGLE|CHECKIT, ~16, NULL },
-		{ NM_SUB,   (STRPTR)"2.35:1",      			NULL,						MENUTOGGLE|CHECKIT, ~32, NULL },
-		{ NM_SUB,   (STRPTR)"2.39:1",      			NULL,						MENUTOGGLE|CHECKIT, ~64, NULL },
-		{ NM_SUB,   (STRPTR)"5:3",      			NULL,						MENUTOGGLE|CHECKIT, ~128, NULL },
-		{ NM_SUB,   (STRPTR)"4:3",      			NULL,						MENUTOGGLE|CHECKIT, ~256, NULL },
-		{ NM_SUB,   (STRPTR)"5:4",      			NULL,						MENUTOGGLE|CHECKIT, ~512, NULL },
-		{ NM_SUB,   (STRPTR)"1:1",      			NULL,						MENUTOGGLE|CHECKIT, ~1024, NULL },
-		*/
-
-      	{ NM_TITLE, menu_OptionsAudio,              	NULL,						0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsAudio_Mute,             NULL,						MENUTOGGLE|CHECKIT , 0, NULL },
-		{ NM_ITEM,  menu_OptionsAudio_VolumeUp  ,       (STRPTR)"+",				0, 0L, NULL },
-		{ NM_ITEM,  menu_OptionsAudio_VolumeDown,       (STRPTR)"-",				0, 0L, NULL },
+struct NewMenu amiga_menu[] =
+{// Type, Label, CommKey, Flags, MutualExclude, UserData
+	{ NM_TITLE, menu_Project, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_OpenFile,     (STRPTR)"F", 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_OpenDVD,      (STRPTR)"D", 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_OpenDVDNAV,   (STRPTR)"N", 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_OpenVCD,      (STRPTR)"V", 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_OpenNetwork,  (STRPTR)"T", 0, 0L, NULL },
+		{ NM_ITEM, NM_BARLABEL, 0, 0, 0, 0},
+		{ NM_ITEM,  menu_Project_Iconify,      (STRPTR)"I", 0, 0L, NULL },
+		{ NM_ITEM,  menu_Project_AboutMPlayer, (STRPTR)"?", 0, 0L, NULL },
+		{ NM_ITEM, NM_BARLABEL, 0, 0, 0, 0},
+		{ NM_ITEM,  menu_Project_Quit,         (STRPTR)"Q", 0, 0L, NULL },
+
+	{ NM_TITLE, menu_Play, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_Play_PlayPause,  (STRPTR)"P",                  0, 0L, NULL },
+		{ NM_ITEM,  menu_Play_Stop,       (STRPTR)"S",                  0, 0L, NULL },
+//		{ NM_ITEM,  menu_Play_Record,     (STRPTR)"R", MENUTOGGLE|CHECKIT, 0L, NULL },
+		{ NM_ITEM,  menu_Play_Loop,       (STRPTR)"L", MENUTOGGLE|CHECKIT, 0L, NULL },
+		{ NM_ITEM, NM_BARLABEL, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_Play_PrevFilm,   (STRPTR)"E",                  0, 0L, NULL },
+		{ NM_ITEM,  menu_Play_NextFilm,   (STRPTR)"X",                  0, 0L, NULL },
+		{ NM_ITEM, NM_BARLABEL, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_Play_Properties, (STRPTR)"O",                  0, 0L, NULL },
+
+	{ NM_TITLE, menu_OptionsVideo, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_StayOnTop,  NULL, MENUTOGGLE|CHECKIT, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_Fullscreen, NULL,                  0, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_Screenshot, NULL,                  0, 0L, NULL },
+//		{ NM_ITEM,  (STRPTR)"Normal Dimension",  (STRPTR)"1",  0, 0L, NULL },
+//		{ NM_ITEM,  (STRPTR)"Doubled Dimension", (STRPTR)"2",  0, 0L, NULL },
+//		{ NM_ITEM,  (STRPTR)"Screen Dimension",  (STRPTR)"3",  0, 0L, NULL },
+//		{ NM_ITEM,  (STRPTR)"Half Dimension",    (STRPTR)"4",  0, 0L, NULL },
+//		{ NM_ITEM,  NM_BARLABEL, NULL, 0, 0L, NULL },
+// 23
+		/*{ NM_ITEM,  menu_OptionsVideo_AspectRatio, NULL, 0, 0L, NULL },
+			{ NM_SUB,   menu_OptionsVideo_AR_Original,   NULL, CHECKIT|CHECKED,    ~1, NULL },
+			{ NM_SUB,   (STRPTR)"16:10",                 NULL,         CHECKIT,    ~2, NULL },
+			{ NM_SUB,   (STRPTR)"16:9",                  NULL,         CHECKIT,    ~4, NULL },
+			{ NM_SUB,   (STRPTR)"1.85:1",                NULL,         CHECKIT,    ~8, NULL },
+			{ NM_SUB,   (STRPTR)"2.21:1",                NULL,         CHECKIT,   ~16, NULL },
+			{ NM_SUB,   (STRPTR)"2.35:1",                NULL,         CHECKIT,   ~32, NULL },
+			{ NM_SUB,   (STRPTR)"2.39:1",                NULL,         CHECKIT,   ~64, NULL },
+			{ NM_SUB,   (STRPTR)"5:3",                   NULL,         CHECKIT,  ~128, NULL },
+			{ NM_SUB,   (STRPTR)"4:3",                   NULL,         CHECKIT,  ~256, NULL },
+			{ NM_SUB,   (STRPTR)"5:4",                   NULL,         CHECKIT,  ~512, NULL },
+//			{ NM_SUB,   (STRPTR)"1:1",                   NULL,         CHECKIT, ~1024, NULL },*/
+		{ NM_ITEM, NM_BARLABEL, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_OpenSubtitles,   NULL,               0,    0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_CycleSubtitles,  NULL,               0,    0L, NULL },
+		{ NM_ITEM,  menu_OptionsVideo_UnloadSubtitles, NULL,               0,    0L, NULL },
+
+	{ NM_TITLE, menu_OptionsAudio, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsAudio_Mute,       (STRPTR)"M", MENUTOGGLE|CHECKIT, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsAudio_VolumeUp,   (STRPTR)"+",                  0, 0L, NULL },
+		{ NM_ITEM,  menu_OptionsAudio_VolumeDown, (STRPTR)"-",                  0, 0L, NULL },
 
-      	{ NM_END,   NULL,                         	NULL,						0, 0L, NULL }
-    };
+	{ NM_TITLE, menu_Settings, NULL, 0, 0L, NULL },
+		{ NM_ITEM,  menu_Settings_MPlayerGUI, (STRPTR)"G", 0, 0L, NULL },
 
+		{ NM_END, NULL, NULL, 0, 0L, NULL }
+};
 
-void createMenuTranslation()
+void createMenuTranslation(void)
 {
-
 	if (MENUCLASS_SUPPORT) return;
 
-	strcpy(menu_MPlayer,CS(MSG_Menu_MPlayer));
-	strcpy(menu_MPlayer_LoadFile,CS(MSG_Menu_MPlayer_LoadFile));
-	strcpy(menu_MPlayer_OpenDVD,CS(MSG_Menu_MPlayer_OpenDVD));
-	strcpy(menu_MPlayer_OpenDVDNAV,CS(MSG_Menu_MPlayer_OpenDVDNAV));
-	strcpy(menu_MPlayer_OpenVCD,CS(MSG_Menu_MPlayer_OpenVCD));
-	strcpy(menu_MPlayer_OpenNetwork,CS(MSG_Menu_MPlayer_OpenNetwork));
-	strcpy(menu_MPlayer_AboutMPlayer,CS(MSG_Menu_MPlayer_About));
-	strcpy(menu_MPlayer_Iconify,CS(MSG_Menu_MPlayer_Iconify));
-	strcpy(menu_MPlayer_Quit,CS(MSG_Menu_MPlayer_Quit));
+	strcpy(menu_Project,CS(MSG_Menu_Project));
+	strcpy(menu_Project_OpenFile,CS(MSG_Menu_Project_OpenFile));
+	strcpy(menu_Project_OpenDVD,CS(MSG_Menu_Project_OpenDVD));
+	strcpy(menu_Project_OpenDVDNAV,CS(MSG_Menu_Project_OpenDVDNAV));
+	strcpy(menu_Project_OpenVCD,CS(MSG_Menu_Project_OpenVCD));
+	strcpy(menu_Project_OpenNetwork,CS(MSG_Menu_Project_OpenNetwork));
+	strcpy(menu_Project_Iconify,CS(MSG_Menu_Project_Iconify));
+	strcpy(menu_Project_AboutMPlayer,CS(MSG_Menu_Project_About));
+	strcpy(menu_Project_Quit,CS(MSG_Menu_Project_Quit));
 
 	strcpy(menu_Play,CS(MSG_Menu_Play));
 	strcpy(menu_Play_PlayPause,CS(MSG_Menu_Play_PlayPause));
 	strcpy(menu_Play_Stop,CS(MSG_Menu_Play_Stop));
+	strcpy(menu_Play_Record,CS(MSG_Menu_Play_Record));
 	strcpy(menu_Play_Loop,CS(MSG_Menu_Play_Loop));
-	strcpy(menu_Play_PrevFilm,CS(MSG_Menu_Play_PrevFilm));
-	strcpy(menu_Play_NextFilm,CS(MSG_Menu_Play_NextFilm));
+	strcpy(menu_Play_PrevFilm,CS(MSG_Menu_Play_PrevFile));
+	strcpy(menu_Play_NextFilm,CS(MSG_Menu_Play_NextFile));
+	strcpy(menu_Play_Properties,CS(MSG_Menu_Play_Properties));
 
 	strcpy(menu_OptionsVideo,CS(MSG_Menu_OptionsVideo));
 	strcpy(menu_OptionsVideo_StayOnTop,CS(MSG_Menu_OptionsVideo_StayOnTop));
 	strcpy(menu_OptionsVideo_OpenSubtitles,CS(MSG_Menu_OptionsVideo_OpenSubtitles));
 	strcpy(menu_OptionsVideo_CycleSubtitles,CS(MSG_Menu_OptionsVideo_CycleSubtitles));
+strcpy(menu_OptionsVideo_UnloadSubtitles,CS(MSG_Menu_OptionsVideo_UnloadSubtitles));
 	strcpy(menu_OptionsVideo_Fullscreen,CS(MSG_Menu_OptionsVideo_Fullscreen));
 	strcpy(menu_OptionsVideo_Screenshot,CS(MSG_Menu_OptionsVideo_Screenshot));
+strcpy(menu_OptionsVideo_AspectRatio,CS(MSG_Menu_OptionsVideo_AspectRatio));
+strcpy(menu_OptionsVideo_AR_Original,CS(MSG_Menu_OptionsVideo_AR_Original));
 
 	strcpy(menu_OptionsAudio,CS(MSG_Menu_OptionsAudio));
 	strcpy(menu_OptionsAudio_Mute,CS(MSG_Menu_OptionsAudio_Mute));
 	strcpy(menu_OptionsAudio_VolumeUp,CS(MSG_Menu_OptionsAudio_VolumeUp));
 	strcpy(menu_OptionsAudio_VolumeDown,CS(MSG_Menu_OptionsAudio_VolumeDown));
+
+	strcpy(menu_Settings,CS(MSG_Menu_Settings));
+	strcpy(menu_Settings_MPlayerGUI,CS(MSG_Menu_Settings_MPlayerGUI));
 }
 
 
-void findMenuClassObj()	// zzd10h
+/*void findMenuClassObj(void)	// zzd10h
 {
 	if (amiga_menuClass)
 	{
-		menuobj_MID_MENU_LOADFILE_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_LOADFILE_MENUCLASS);
-		menuobj_MID_MENU_OPENDVD_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENDVD_MENUCLASS);
-		menuobj_MID_MENU_OPENDVDNAV_MENUCLASS	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENDVDNAV_MENUCLASS);
-		menuobj_MID_MENU_OPENVCD_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENVCD_MENUCLASS);
-		menuobj_MID_MENU_OPENNETWORK_MENUCLASS	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENNETWORK_MENUCLASS);
-		menuobj_MID_MENU_ABOUT_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_ABOUT_MENUCLASS);
-		menuobj_MID_MENU_ICONIFY_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_ICONIFY_MENUCLASS);
-		menuobj_MID_MENU_QUIT_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_QUIT_MENUCLASS);
-		menuobj_MID_MENU_PLAYPAUSE_MENUCLASS	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_PLAYPAUSE_MENUCLASS);
-		menuobj_MID_MENU_STOP_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_STOP_MENUCLASS);
-		menuobj_MID_MENU_LOOP_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_LOOP_MENUCLASS);
-		menuobj_MID_MENU_PREVFILM_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_PREVFILM_MENUCLASS);
-		menuobj_MID_MENU_NEXTFILM_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_NEXTFILM_MENUCLASS);
-		menuobj_MID_MENU_STAYONTOP_MENUCLASS	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_STAYONTOP_MENUCLASS);
-		menuobj_MID_MENU_OPENSUBTITLES_MENUCLASS  = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENSUBTITLES_MENUCLASS);
-		menuobj_MID_MENU_CYCLESUBTITLES_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_CYCLESUBTITLES_MENUCLASS);
+		menuobj_MID_MENU_OPENFILE_MENUCLASS    = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENFILE_MENUCLASS);
+		menuobj_MID_MENU_OPENDVD_MENUCLASS     = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENDVD_MENUCLASS);
+		menuobj_MID_MENU_OPENDVDNAV_MENUCLASS  = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENDVDNAV_MENUCLASS);
+		menuobj_MID_MENU_OPENVCD_MENUCLASS     = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENVCD_MENUCLASS);
+		menuobj_MID_MENU_OPENNETWORK_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENNETWORK_MENUCLASS);
+		menuobj_MID_MENU_ABOUT_MENUCLASS       = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_ABOUT_MENUCLASS);
+		menuobj_MID_MENU_ICONIFY_MENUCLASS     = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_ICONIFY_MENUCLASS);
+		menuobj_MID_MENU_QUIT_MENUCLASS        = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_QUIT_MENUCLASS);
+
+		menuobj_MID_MENU_PLAYPAUSE_MENUCLASS  = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_PLAYPAUSE_MENUCLASS);
+		menuobj_MID_MENU_STOP_MENUCLASS       = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_STOP_MENUCLASS);
+		menuobj_MID_MENU_LOOP_MENUCLASS       = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_LOOP_MENUCLASS);
+		menuobj_MID_MENU_PREVFILE_MENUCLASS   = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_PREVFILE_MENUCLASS);
+		menuobj_MID_MENU_NEXTFILE_MENUCLASS   = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_NEXTFILE_MENUCLASS);
+		menuobj_MID_MENU_PROPERTIES_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_PROPERTIES_MENUCLASS);
+
+		menuobj_MID_MENU_STAYONTOP_MENUCLASS      = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_STAYONTOP_MENUCLASS);
 		menuobj_MID_MENU_FULLSCREEN_MENUCLASS     = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_FULLSCREEN_MENUCLASS);
 		menuobj_MID_MENU_SCREENSHOT_MENUCLASS     = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_SCREENSHOT_MENUCLASS);
-		menuobj_MID_MENU_MUTE_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_MUTE_MENUCLASS);
-		menuobj_MID_MENU_VOLUMEUP_MENUCLASS		= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_VOLUMEUP_MENUCLASS);
-		menuobj_MID_MENU_VOLUMEDOWN_MENUCLASS	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_VOLUMEDOWN_MENUCLASS);
+		menuobj_MID_MENU_OPENSUBTITLES_MENUCLASS  = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_OPENSUBTITLES_MENUCLASS);
+		menuobj_MID_MENU_CYCLESUBTITLES_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_CYCLESUBTITLES_MENUCLASS);
+//		menuobj_MID_MENU_ASPECTRATIO_MENUCLASS 	= (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_ASPECTRATIO_MENUCLASS);
+
+		menuobj_MID_MENU_MUTE_MENUCLASS       = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_MUTE_MENUCLASS);
+		menuobj_MID_MENU_VOLUMEUP_MENUCLASS   = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_VOLUMEUP_MENUCLASS);
+		menuobj_MID_MENU_VOLUMEDOWN_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_VOLUMEDOWN_MENUCLASS);
+
+		menuobj_MID_MENU_MPLAYERGUI_MENUCLASS = (Object *)IDoMethod(amiga_menuClass,MM_FINDID,0,  MID_MENU_MPLAYERGUI_MENUCLASS);
 	}
-}
+}*/
 
 static struct Image *MenuImage(STRPTR name, struct Screen *screen)
 {
@@ -520,8 +567,8 @@ static struct Image *MenuImage(STRPTR na
    STRPTR name_s, name_g;
    uint32 len;
 
-   if (AISS_MENU && MENUCLASS_SUPPORT)
-   {
+  if (AISS_MENU && MENUCLASS_SUPPORT)
+  {
    len = strlen(name);
 
    name_s = AllocVecTags(len + 3 + len + 3,TAG_END);
@@ -547,19 +594,19 @@ static struct Image *MenuImage(STRPTR na
       {
          prev_dir = SetCurrentDir(dir);
 
-         i = (struct Image *)NewObject(NULL,"bitmap.image",
-						BITMAP_SourceFile, name,
-						BITMAP_SelectSourceFile, name_s,
-						BITMAP_DisabledSourceFile, name_g,
-						BITMAP_Screen, screen,
-						BITMAP_Masking, TRUE,
-						// Scale the AISS_MENU picture if AISS_MENU_TO_SCALE = TRUE (ENV:MenuImageSize > 0)
-						AISS_MENU_TO_SCALE ? IA_Scalable : TAG_IGNORE, TRUE,
-						AISS_MENU_TO_SCALE ? IA_Width : TAG_IGNORE , AISS_MENU_SIZE,
-						AISS_MENU_TO_SCALE ? IA_Height : TAG_IGNORE , AISS_MENU_SIZE,
-						// If AISS picture size <= screen font height, up it
-						// AISS_MENU_TO_SCALE && (AISS_MENU_SIZE <= screen->RastPort.TxHeight) ? IA_Top : TAG_IGNORE , -1,
-						TAG_END);
+         i = (struct Image *)NewObject(BitMapClass, NULL, // "bitmap.image",
+                                       BITMAP_SourceFile, name,
+                                       BITMAP_SelectSourceFile, name_s,
+                                       BITMAP_DisabledSourceFile, name_g,
+                                       BITMAP_Screen, screen,
+                                       BITMAP_Masking, TRUE,
+                                       // Scale the AISS_MENU picture if AISS_MENU_TO_SCALE = TRUE (ENV:MenuImageSize > 0)
+    		                       AISS_MENU_TO_SCALE ? IA_Scalable : TAG_IGNORE, TRUE,
+				       AISS_MENU_TO_SCALE ? IA_Width : TAG_IGNORE , AISS_MENU_SIZE,
+				       AISS_MENU_TO_SCALE ? IA_Height : TAG_IGNORE , AISS_MENU_SIZE,
+				       // If AISS picture size <= screen font height, up it
+				       // AISS_MENU_TO_SCALE && (AISS_MENU_SIZE <= screen->RastPort.TxHeight) ? IA_Top : TAG_IGNORE , -1,
+                                      TAG_END);
 
          if (i && !AISS_MENU_TO_SCALE)
             SetAttrs((Object *)i,IA_Height,i->Height + 2,TAG_END);
@@ -575,7 +622,7 @@ static struct Image *MenuImage(STRPTR na
    return (i);
 }
 
-void makeMenuClass()	// zzd10h
+void makeMenuClass(void)	// zzd10h
 {
 	struct Screen *screen;
 
@@ -583,52 +630,52 @@ void makeMenuClass()	// zzd10h
 	{
 		amiga_menuClass = MStrip,
 
-                   MA_AddChild, MTitle(CS(MSG_Menu_MPlayer)),	// Start of MPlayer menu
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_LoadFile)),
+                   MA_AddChild, MTitle(CS(MSG_Menu_Project)),	// PROJECT_MENU menu
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_OpenFile)),
                        MA_Key, "F",
                        MA_Image, MenuImage("pictureload",screen),
-                       MA_ID, MID_MENU_LOADFILE_MENUCLASS,
+                       MA_ID, MID_MENU_OPENFILE_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_OpenDVD)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_OpenDVD)),
                        MA_Key, "D",
-                       MA_Image, MenuImage("Dvd",screen),
+                       MA_Image, MenuImage("dvd",screen),
                        MA_ID, MID_MENU_OPENDVD_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_OpenDVDNAV)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_OpenDVDNAV)),
                        MA_Key, "N",
-                       MA_Image, MenuImage("Blueray",screen),
+                       MA_Image, MenuImage("blueray",screen),
                        MA_ID, MID_MENU_OPENDVDNAV_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_OpenVCD)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_OpenVCD)),
                        MA_Key, "V",
                        MA_Image, MenuImage("cd",screen),
                        MA_ID, MID_MENU_OPENVCD_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_OpenNetwork)),
-                       MA_Key, "R",
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_OpenNetwork)),
+                       MA_Key, "T",
                        MA_Image, MenuImage("download",screen),
                        MA_ID, MID_MENU_OPENNETWORK_MENUCLASS,
                      MEnd,
                      MA_AddChild, MSeparator, MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_About)),
-                       MA_Key, "?",
-                       MA_Image, MenuImage("info",screen),
-                       MA_ID, MID_MENU_ABOUT_MENUCLASS,
-                     MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_Iconify)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_Iconify)),
                        MA_Key, "I",
                        MA_Image, MenuImage("iconify",screen),
                        MA_ID, MID_MENU_ICONIFY_MENUCLASS,
                      MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_About)),
+                       MA_Key, "?",
+                       MA_Image, MenuImage("info",screen),
+                       MA_ID, MID_MENU_ABOUT_MENUCLASS,
+                     MEnd,
                      MA_AddChild, MSeparator, MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_MPlayer_Quit)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Project_Quit)),
                        MA_Key, "Q",
-                       MA_Image, MenuImage("Quit",screen),
+                       MA_Image, MenuImage("quit",screen),
                        MA_ID, MID_MENU_QUIT_MENUCLASS,
                      MEnd,
-                   MEnd,	// End of MPlayer menu
+                   MEnd,	// End of PROJECT_MENU menu
 
-                   MA_AddChild, MTitle(CS(MSG_Menu_Play)),	// Start of PLAY_MENU menu
+                   MA_AddChild, MTitle(CS(MSG_Menu_Play)),	// PLAY_MENU menu
                      MA_AddChild, MItem(CS(MSG_Menu_Play_PlayPause)),
                        MA_Key, "P",
                        MA_Image, MenuImage("tapeplay",screen),
@@ -641,68 +688,154 @@ void makeMenuClass()	// zzd10h
                      MEnd,
                      MA_AddChild, MItem(CS(MSG_Menu_Play_Loop)),
                        MA_Key, "L",
-                       MA_Toggle, TRUE,
+                       MA_Toggle,   TRUE,
                        MA_Selected, loop_on(),
                        MA_Image, MenuImage("tapeloop",screen),
                        MA_ID, MID_MENU_LOOP_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_Play_PrevFilm)),
+                     /*MA_AddChild, MItem(CS(MSG_Menu_Play_Record)),
+                       MA_Key, "R",
+                       MA_Toggle, TRUE,
+                       // MA_Selected, record_on(),
+                       MA_Image, MenuImage("taperec",screen),
+                       MA_ID, MID_MENU_RECORD_MENUCLASS,
+                     MEnd,*/
+                     MA_AddChild, MSeparator, MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_Play_PrevFile)),
                        MA_Key, "E",
                        MA_Image, MenuImage("tapelast",screen),
-                       MA_ID, MID_MENU_PREVFILM_MENUCLASS,
+                       MA_ID, MID_MENU_PREVFILE_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MItem(CS(MSG_Menu_Play_NextFilm)),
+                     MA_AddChild, MItem(CS(MSG_Menu_Play_NextFile)),
                        MA_Key, "X",
                        MA_Image, MenuImage("tapenext",screen),
-                       MA_ID, MID_MENU_NEXTFILM_MENUCLASS,
+                       MA_ID, MID_MENU_NEXTFILE_MENUCLASS,
                      MEnd,
-                   MEnd,  // End of PLAY_MENU menu
+                     MA_AddChild, MSeparator, MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_Play_Properties)),
+                       MA_Key, "O",
+                       MA_Image, MenuImage("infobubble",screen),
+                       MA_ID, MID_MENU_PROPERTIES_MENUCLASS,
+                     MEnd,
+                   MEnd,	// End of PLAY_MENU menu
 
-                   MA_AddChild, MTitle(CS(MSG_Menu_OptionsVideo)),	// Start of VIDEO_OPTIONS_MENU
+                   MA_AddChild, MTitle(CS(MSG_Menu_OptionsVideo)),	// VIDEO_OPTIONS_MENU menu
                      MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_StayOnTop)),
-                       MA_Toggle, TRUE,
-                       MA_Selected,is_ontop,
+                       MA_Toggle,   TRUE,
+                       MA_Selected, is_ontop,
                        MA_Image, MenuImage("listerclone",screen),
                        MA_ID, MID_MENU_STAYONTOP_MENUCLASS,
                      MEnd,
-                     MA_AddChild, MSeparator, MEnd,
-			 MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_OpenSubtitles)),
-			  MA_Image, MenuImage("textframe",screen),
-			  MA_ID, MID_MENU_OPENSUBTITLES_MENUCLASS,
-			 MEnd,
-                   MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_CycleSubtitles)),
-                     MA_Image, MenuImage("refresh",screen),
-                     MA_ID, MID_MENU_CYCLESUBTITLES_MENUCLASS,
-                   MEnd,
-                   MA_AddChild, MSeparator, MEnd,
                      MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_Fullscreen)),
-                     MA_Image, MenuImage("fullscreen",screen),
-                     MA_ID, MID_MENU_FULLSCREEN_MENUCLASS,
-                   MEnd,
-                   MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_Screenshot)),
-                     MA_Image, MenuImage("snapshot",screen),
-                     MA_ID, MID_MENU_SCREENSHOT_MENUCLASS,
-                   MEnd,
-                   MEnd,  // End of VIDEO_OPTIONS_MENU menu
+                       MA_Image, MenuImage("fullscreen",screen),
+                       MA_ID, MID_MENU_FULLSCREEN_MENUCLASS,
+                     MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_Screenshot)),
+                       MA_Image, MenuImage("snapshot",screen),
+                       MA_ID, MID_MENU_SCREENSHOT_MENUCLASS,
+                     MEnd,
+                     /*MA_AddChild, MSeparator, MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_AspectRatio)),
+                       MA_Image, MenuImage("blockquadrat",screen),
+                       // MA_ID, MID_MENU_ASPECTRATIO_MENUCLASS,
+                       MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_AR_Original)),
+                         MA_ID, MID_MENU_AR_ORIGINAL_MENUCLASS,
+                           MA_MX,       ~(1<<0) & 0xFFFFFFF, // POS 1st on this subitem -> ~0
+                           MA_Selected, TRUE,
+                         MEnd,
+                         MA_AddChild, MItem("16:10"),
+                           MA_ID, MID_MENU_AR_16_10_MENUCLASS,
+                           MA_MX,       ~(1<<1) & 0xFFFFFFF, // POS 2nd on this subitem -> ~1
+                           MA_Selected, FALSE,
+                         MEnd,
+  MA_AddChild, MItem("16:9"),
+    MA_ID, MID_MENU_AR_16_9_MENUCLASS,
+    MA_MX,       ~(1<<2) & 0xFFFFFFF, // POS 3nd on this subitem -> ~2
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("1.85:1"),
+    MA_ID, MID_MENU_AR_185_1_MENUCLASS,
+    MA_MX,       ~(1<<3) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("2.21:1"),
+    MA_ID, MID_MENU_AR_221_1_MENUCLASS,
+    MA_MX,       ~(1<<4) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("2.35:1"),
+    MA_ID, MID_MENU_AR_235_1_MENUCLASS,
+    MA_MX,       ~(1<<5) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("2.39:1"),
+    MA_ID, MID_MENU_AR_239_1_MENUCLASS,
+    MA_MX,       ~(1<<6) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("5:3"),
+    MA_ID, MID_MENU_AR_5_3_MENUCLASS,
+    MA_MX,       ~(1<<7) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("4:3"),
+    MA_ID, MID_MENU_AR_4_3_MENUCLASS,
+    MA_MX,       ~(1<<8) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+  MA_AddChild, MItem("5:4"),
+    MA_ID, MID_MENU_AR_5_4_MENUCLASS,
+    MA_MX,       ~(1<<9) & 0xFFFFFFF,
+    MA_Selected, FALSE,
+  MEnd,
+//  MA_AddChild, MItem("1:1"),
+//    MA_ID, MID_MENU_AR_1_1_MENUCLASS,
+//    MA_MX,       ~(1<<10) & 0xFFFFFFF,
+//    MA_Selected, FALSE,
+//  MEnd,
+MEnd,*/
+                     MA_AddChild, MSeparator, MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_OpenSubtitles)),
+                       MA_Image, MenuImage("fieldsadd",screen), // "textframe"
+                       MA_ID, MID_MENU_OPENSUBTITLES_MENUCLASS,
+                     MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_CycleSubtitles)),
+                       MA_Image, MenuImage("refresh",screen),
+                       MA_ID, MID_MENU_CYCLESUBTITLES_MENUCLASS,
+                     MEnd,
+                     MA_AddChild, MItem(CS(MSG_Menu_OptionsVideo_UnloadSubtitles)),
+                       MA_Image, MenuImage("fieldsremove",screen),
+                       MA_ID, MID_MENU_UNLOADSUBTITLES_MENUCLASS,
+                     MEnd,
+                   MEnd,	// End of VIDEO_OPTIONS_MENU menu
 
-                   MA_AddChild, MTitle(CS(MSG_Menu_OptionsAudio)),	// Menu AUDIO_OPTIONS_MENU
+                   MA_AddChild, MTitle(CS(MSG_Menu_OptionsAudio)),	// AUDIO_OPTIONS_MENU menu
                      MA_AddChild, MItem(CS(MSG_Menu_OptionsAudio_Mute)),
-                       MA_Toggle, TRUE,
-                       MA_Selected,is_mute,
+                       MA_Key, "M",
+                       MA_Toggle,   TRUE,
+                       MA_Selected, is_mute,
                        MA_Image, MenuImage("soundmute",screen),
                        MA_ID, MID_MENU_MUTE_MENUCLASS,
                      MEnd,
                      MA_AddChild, MItem(CS(MSG_Menu_OptionsAudio_VolumeUp)),
                        MA_Key, "+",
-                       MA_Image, MenuImage("arrowupfilled",screen),	// "Add"
+                       MA_Image, MenuImage("add",screen), // "arrowupfilled",screen), // "add"
                        MA_ID, MID_MENU_VOLUMEUP_MENUCLASS,
                      MEnd,
                      MA_AddChild, MItem(CS(MSG_Menu_OptionsAudio_VolumeDown)),
                        MA_Key, "-",
-                       MA_Image, MenuImage("arrowdownfilled",screen),	// "Remove"
+                       MA_Image, MenuImage("remove",screen), // "arrowdownfilled",screen), // "remove"
                        MA_ID, MID_MENU_VOLUMEDOWN_MENUCLASS,
                      MEnd,
-                   MEnd,  // End of AUDIO_OPTIONS_MENU menu
+                   MEnd,	// End of AUDIO_OPTIONS_MENU menu
+
+                   MA_AddChild, MTitle(CS(MSG_Menu_Settings)),	// SETTINGS_MENU menu
+                     MA_AddChild, MItem(CS(MSG_Menu_Settings_MPlayerGUI)),
+                       MA_Key, "G",
+                       MA_Image, MenuImage("player",screen),
+                       MA_ID, MID_MENU_MPLAYERGUI_MENUCLASS,
+                     MEnd,
+                   MEnd,	// End of SETTINGS_MENU menu
 
                  MEnd;  // End of menu
 
@@ -715,59 +848,58 @@ struct Window *Menu_Window;
 
 void attach_menu(struct Window *window)
 {
-	// Create translation for NewMenu and MenuClass menu // zzd10h
-	createMenuTranslation() ;
-
 	// struct Menu *menu;
-	// struct VisualInfo *vi;
+DBUG("attach_menu( 0x%08lx )\n",window);
+	// Create translation for NewMenu and MenuClass menu [zzd10h]
+	createMenuTranslation() ;
 
 	open_menu();
 
+DBUG("is_fullscreen=0x%08lx\n",is_fullscreen);
+
 	if (( (menu || amiga_menuClass) ) && (window))
 	{
-		// #if 1
-		// make_appwindow(window);
-		// #endif
+		make_appwindow(window);
 
 		if (!MENUCLASS_SUPPORT)
 		{
 			struct VisualInfo *vi;
 
+			amiga_menu[ID_iconify+1].nm_Flags = is_fullscreen? 0 : ITEMENABLED;
+
 			if (vi = GetVisualInfoA(window -> WScreen,NULL))
 			{
-				LayoutMenus( menu, vi, GTMN_NewLookMenus, TRUE, TAG_END );
+				LayoutMenus( menu, vi, GTMN_NewLookMenus,TRUE, TAG_END );
 			}
-
-				SetMenuStrip(window, menu);
+			SetMenuStrip(window, menu);
 		}
 		else
 		{
-			// SetAttrs(window, WA_NewLookMenus,FALSE , TAG_END);
+			if(is_fullscreen) {
+				Object *menu_obj = (Object *)IDoMethod(amiga_menuClass, MM_FINDID, 0, MID_MENU_ICONIFY_MENUCLASS);
+				SetAttrs(menu_obj, MA_Disabled,TRUE, TAG_END);
+				menu_obj = (Object *)IDoMethod(amiga_menuClass, MM_FINDID, 0, MID_MENU_FULLSCREEN_MENUCLASS);
+				SetAttrs(menu_obj, MA_Image,MenuImage("fullscreen_off",window->WScreen), TAG_END);
+			}
 			SetMenuStrip(window, amiga_menuClass);
 		}
 		Menu_Window = window;
 	}
+
 }
 
 
 void detach_menu(struct Window *window)
 {
 	// struct Menu *menu;
-	// #if 1
-	// delete_appwindow();
-	// #endif
-
-	// char msg[256] ;
-	// memset (msg, 0, sizeof (msg));
-	// sprintf(msg,"detach menu spawn_count %ld",spawn_count) ;
-	// PrintMsg(msg,REQTYPE_INFO,REQIMAGE_INFO) ;
-
+DBUG("detach_menu( 0x%08lx )\n",window);
 	if (menu)
 	{
 		while (spawn_count)
 		{
-			Printf("You need to close the requester windows.\nCan't remove menu from MPlayer, yet\n");
-			Delay(1);
+			// Printf("You need to close the requester windows.\nCan't remove menu from MPlayer, yet\n");
+			// Delay(1);
+			PrintMsg("MPlayer's requesters still opened!", REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title_Error));
 		}
 
 		ClearMenuStrip(window);
@@ -777,6 +909,8 @@ void detach_menu(struct Window *window)
 
 	if (amiga_menuClass)
 		DisposeObject(amiga_menuClass);
+
+	delete_appwindow();
 }
 
 void open_menu(void)
@@ -785,32 +919,35 @@ void open_menu(void)
 
 	if (!MENUCLASS_SUPPORT)
 	{
-		if (loop_on()==TRUE)
-			amiga_menu[ play_start_id + ID_loop ].nm_Flags = MENUTOGGLE|CHECKIT|CHECKED;
-		else
-			amiga_menu[ play_start_id + ID_loop ].nm_Flags = MENUTOGGLE|CHECKIT;
+		UWORD i = MENUTOGGLE|CHECKIT;
 
-	/*
-        if (vi)
-        {
-            if (isStarted == FALSE)
-            {
-                isStarted = TRUE;
-            }
-            else
-            {
-            	int i = 0;
-	*/
+DBUG("PLAY_START_ID = %ld\n",PLAY_START_ID);
+		if (loop_on()==TRUE) { i |= CHECKED; }
+		amiga_menu[ PLAY_START_ID + ID_loop ].nm_Flags = i;
 
-		if (is_ontop==1)
-			amiga_menu[ video_start_id + ID_ontop ].nm_Flags = MENUTOGGLE|CHECKIT|CHECKED;
-		       else
-			amiga_menu[ video_start_id + ID_ontop ].nm_Flags = MENUTOGGLE|CHECKIT;
-
-	/*
-		for (i=24;i<35;i++)
-			nm[i].nm_Flags = MENUTOGGLE|CHECKIT;
+/*
+		if (vi)
+		{
+			if (isStarted == FALSE)
+			{
+				isStarted = TRUE;
+			}
+			else
+			{
+				int i = 0;
+*/
 
+			i = MENUTOGGLE|CHECKIT;
+DBUG("VIDEO_START_ID = %ld\n",VIDEO_START_ID);
+			if (is_ontop==1) { i |= CHECKED; }
+			amiga_menu[ VIDEO_START_ID + ID_ontop ].nm_Flags = i;
+
+/*DBUG("ASPECTRATIO_START_ID = %ld\n",ASPECTRATIO_START_ID);
+//		for (i=24;i<35;i++)
+		for(i=ASPECTRATIO_START_ID; i<ASPECTRATIO_START_ID+11; ++i) {
+//			amiga_menu[i].nm_Flags = MENUTOGGLE|CHECKIT;
+		}*/
+/*
 		switch(AspectRatio)
 		{
 			case AR_ORIGINAL:
@@ -848,17 +985,17 @@ void open_menu(void)
 					break;
 		}
 
-	}
-	*/
+	} // END if(vi)
+*/
 
 		menu = CreateMenusA(amiga_menu,NULL);
 	}
 	else
 	{
-		// SetAttrs(window, WA_NewLookMenus,FALSE , TAG_END);
+		// SetAttrs(window, WA_NewLookMenus,FALSE, TAG_END);
 		makeMenuClass() ;
-		// SetAttrs(window, WA_MenuStrip,amiga_menuClass , TAG_END);
-		findMenuClassObj() ;	// Populate Menu class item Objj
+		// SetAttrs(window, WA_MenuStrip,amiga_menuClass, TAG_END);
+//		findMenuClassObj() ;	// populate Menu class item Obj
 	}
 }
 
@@ -867,47 +1004,46 @@ void spawn_died(int32 ret,int32 x)
 	// if (!INFOWINDOWCLASS_SUPPORT)
 	// {
 		spawn_count--;
-	// DBUG("Spawn_count = %ld\n",spawn_count );
+DBUG("spawn_count = %ld\n",spawn_count );
 	// }
 }
 
 struct Process *spawn( void *fn, char *name )
 {
 	struct Process *ret = (struct Process *) CreateNewProcTags (
-				NP_Entry,     (ULONG) fn,
-				NP_Name,      name,
-				NP_StackSize, 262144,
-				NP_Child,     TRUE,
-				NP_Priority,  0,
-				NP_ExitData,  IDOS,
-				NP_FinalCode, spawn_died,
-			TAG_DONE);
+	                                          NP_Start,     (ULONG) fn,
+	                                          NP_Name,      name,
+	                                          NP_StackSize, 262144,
+	                                          NP_Child,     TRUE,
+	                                          NP_Priority,  0,
+	                                          NP_ExitData,  IDOS,
+	                                          NP_FinalCode, spawn_died,
+	                                         TAG_DONE);
 
 	if (ret) spawn_count ++;
-	// DBUG("Spawn_count = %ld\n",spawn_count );
-
+DBUG("spawn_count = %ld\n",spawn_count );
 	return ret;
 }
 
-void seek_start()
+void seek_start(void)
 {
 	mp_cmd_t MPCmd;
 	mp_cmd_t *c;
 
-	printf("MP_CMD_SEEK = %d\n",MP_CMD_SEEK);
+DBUG("MP_CMD_SEEK = %d\n",MP_CMD_SEEK);
 
 	bzero(&MPCmd,sizeof(MPCmd));
 
 	MPCmd.pausing = FALSE;
-	MPCmd.id    = MP_CMD_SEEK;
-        strcpy(MPCmd.name, "seek");
-	MPCmd.nargs = 2;
+	MPCmd.id      = MP_CMD_SEEK;
+	strcpy(MPCmd.name, "seek");
+	MPCmd.nargs   = 2;
 	MPCmd.args[0].type = MP_CMD_ARG_FLOAT;
-	MPCmd.args[0].v.f=0/1000.0f;
+	MPCmd.args[0].v.f  = 0/1000.0f;
 	MPCmd.args[1].type = MP_CMD_ARG_INT;
-	MPCmd.args[1].v.i=2;
+	MPCmd.args[1].v.i  = 2;
 	MPCmd.args[2].type = -1;
-	MPCmd.args[2].v.i=0;
+	MPCmd.args[2].v.i  = 0;
 	if (( c = mp_cmd_clone(&MPCmd)))
 	{
 		if ((mp_input_queue_cmd(c)==0))
@@ -916,15 +1052,16 @@ void seek_start()
 		}
 		else
 		{
-			printf("Failed to que\n");
+			printf("[%s]Failed to queue\n",__FUNCTION__);
 		}
 	}
 	else
 	{
-		printf("Failed to clone\n");
+		printf("[%s]Failed to clone\n",__FUNCTION__);
 	}
 }
 
+
 char *__tmp_file_name = NULL;
 
 void PlayFile_proc(STRPTR args, int32 length, APTR execbase)
@@ -937,36 +1074,32 @@ void PlayFile_proc(STRPTR args, int32 le
 		add_file_to_que( __tmp_file_name );
 		Delay(8);
 
-		nextfilm();
+		nextfile();
 
 		free(__tmp_file_name);
 		__tmp_file_name = NULL;
 	}
-
-	// return RETURN_OK;
 }
 
-
-void load_file_proc(STRPTR args, int32 length, APTR execbase)
+void open_file_proc(STRPTR args, int32 length, APTR execbase)
 {
 	char *FileName;
 
-	if (FileName = LoadFile(NULL,EXTPATTERN,CS(MSG_Requester_OpenFile_Title)))
+	if (FileName = LoadFile(NULL,EXTPATTERN,CS(MSG_Requester_OpenFile_Video)))
 	{
 		__tmp_file_name = strdup(FileName);
 		PlayFile_proc(args,length,execbase);
 	}
 }
 
-
-void cmd_load_file()
+void cmd_open_file(void)
 {
 	struct Process *proc;
 
 	if (choosing_flag == FALSE)
 	{
-		proc = spawn( load_file_proc, "Load file" );
-		if (!proc) PrintMsg(errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		proc = spawn( open_file_proc, "Open file" );
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
@@ -979,7 +1112,7 @@ int32 PlayFile_async(const char *FileNam
 	{
 		__tmp_file_name = strdup(FileName);
 		proc = spawn( PlayFile_proc, "MPlayer:async" );
-		if (!proc) PrintMsg(&errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
@@ -987,77 +1120,95 @@ int32 PlayFile_async(const char *FileNam
 	return RETURN_OK;
 }
 
-void cmd_open_dvd()
+void cmd_open_dvd(void)
 {
 	struct Process *proc;
 	if (choosing_flag == FALSE)
 	{
-		proc = spawn( OpenDVD, "Load DVD" );
-		if (!proc) PrintMsg(errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		proc = spawn( OpenDVD, "Open DVD" );
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
 }
 
-void cmd_open_dvdnav()
+void cmd_open_dvdnav(void)
 {
 	struct Process *proc;
 	if (choosing_flag == FALSE)
 	{
-		proc = spawn( OpenDVDNAV, "Load DVDNAV" );
-		if (!proc) PrintMsg(errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		proc = spawn( OpenDVDNAV, "Open DVDNAV" );
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
-
 }
 
-void cmd_open_vcd()
+void cmd_open_vcd(void)
 {
 	struct Process *proc;
 
 	if (choosing_flag == FALSE)
 	{
-		proc = spawn( OpenVCD, "Load VCD" );
-		if (!proc) PrintMsg(errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		proc = spawn( OpenVCD, "Open VCD" );
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
-
 }
 
-void cmd_open_network()
+void cmd_open_network(void)
 {
 	struct Process *proc;
 	if (choosing_flag == FALSE)
 	{
 		proc = spawn( OpenNetwork, "Open URL" );
-		if (!proc) PrintMsg(errmsg.text,REQTYPE_INFO,REQIMAGE_ERROR);
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
-
 }
 
-void cmd_play()
+void cmd_play(void)
 {
 	put_command0(MP_CMD_PAUSE);
 }
 
-void cmd_stop()
+void cmd_stop(void)
 {
 	put_command0(MP_CMD_STOP);
 }
 
-BOOL loop_on()
+// samo79 - Record function WIP
+BOOL record_on(void)
+{
+return FALSE;
+//	if (mpctx->record_times < 0) return FALSE;
+//
+//	if (mpctx->record_times == 0) return TRUE;
+}
+
+void cmd_record(void)
 {
-        if (mpctx->loop_times < 0)
-                return FALSE;
-        else if (mpctx->loop_times == 0)
-                return TRUE;
+	/*if (record_on()==FALSE)
+	{
+		put_icommand1(MP_CMD_RECORD,1);
+	}
+	else
+	{
+		put_icommand1(MP_CMD_RECORD,-1);
+	}*/
 }
 
-void cmd_loop()
+
+BOOL loop_on(void)
+{
+	if (mpctx->loop_times < 0) return FALSE;
+
+	if (mpctx->loop_times == 0) return TRUE;
+}
+
+void cmd_loop(void)
 {
 	if (loop_on()==FALSE)
 	{
@@ -1069,44 +1220,41 @@ void cmd_loop()
 	}
 }
 
-void load_subtitles_proc(STRPTR args, int32 length, APTR execbase)
+void open_subtitles_proc(STRPTR args, int32 length, APTR execbase)
 {
 	char *FileName;
 
-	if (FileName = LoadFile(NULL,SUBEXTPAT,CS(MSG_Requester_OpenSubTitle_Title)))
+	if (FileName = LoadFile(NULL,SUBEXTPAT,CS(MSG_Requester_OpenFile_SubTitles)))
 	{
 		__tmp_file_name = strdup(FileName);
-//DBUG("subtitles file: '%s'\n",__tmp_file_name);
+DBUG("subtitles file: '%s'\n",__tmp_file_name);
 		put_scommand1(MP_CMD_SUB_LOAD,__tmp_file_name);
-		put_command0(MP_CMD_GET_SUB_VISIBILITY);
-		put_command0(MP_CMD_SUB_SELECT);
+		put_icommand1(MP_CMD_SUB_SELECT,0);
+		put_icommand1(MP_CMD_SUB_VISIBILITY,1);
 	}
 }
 
-void cmd_load_subtitles(void)
+void cmd_open_subtitles(void)
 {
 	struct Process *proc;
-//DBUG("cmd_load_subtitles()\n",NULL);
+DBUG("cmd_open_subtitles()\n",NULL);
 	if (choosing_flag == FALSE)
 	{
-		proc = spawn( load_subtitles_proc, "Load subtitles" );
-		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR);
+		proc = spawn( open_subtitles_proc, "Open subtitles" );
+		if (!proc) PrintMsg(errmsg.text, REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 	}
 	else
 		blink_screen() ; // zzd10h
-
 }
 
 
-void menu_mplayer(ULONG menucode)
+void menu_project(ULONG menucode)
 {
-
-	// printf("Menu num %d\n", ITEMNUM(menucode));
-
+	// DBUG("Menu number %ld\n", ITEMNUM(menucode));
 	switch (ITEMNUM(menucode))
 	{
-		case ID_load_file:
-			cmd_load_file();
+		case ID_open_file:
+			cmd_open_file();
 			break;
 		case ID_open_dvd:
 			cmd_open_dvd();
@@ -1120,14 +1268,14 @@ void menu_mplayer(ULONG menucode)
 		case ID_open_network:
 			cmd_open_network();
 			break;
-		case ID_about:
-			ShowAbout();
-			break;
 		case ID_iconify:
 			Iconify(Menu_Window);
 			break;
+		case ID_about:
+			ShowAbout();
+			break;
 		case ID_quit:
-			// DBUG("Spawn_count = %ld\n",spawn_count);
+DBUG("spawn_count = %ld\n",spawn_count);
 			if(spawn_count == 0) put_command0(MP_CMD_QUIT);
 			break;
 	}
@@ -1145,16 +1293,27 @@ void menu_play(ULONG menucode)
 			cmd_stop();
 			break;
 
+
+		/*case ID_record:
+			cmd_record();
+			break;*/
+
+
 		case ID_loop:
 			cmd_loop();
 			break;
 
 		case ID_prev:
-			prevfilm();
+			prevfile();
 			break;
 
 		case ID_next:
-			nextfilm();
+			nextfile();
+			break;
+
+		case ID_properties:
+DBUG("ID_properties\n",NULL);
+			FileProperties();
 			break;
 	}
 }
@@ -1167,12 +1326,17 @@ void menu_video(ULONG menucode)
 			put_command0(MP_CMD_VO_ONTOP);
 			break;
 		case ID_opensubtitles:
-//DBUG("ID_opensubtitles\n",NULL);
-			cmd_load_subtitles();
+// DBUG("ID_opensubtitles\n",NULL);
+			cmd_open_subtitles();
 			break;
 		case ID_subtitles:
 			put_command0(MP_CMD_SUB_SELECT);
 			break;
+		case ID_unloadsubtitles:
+DBUG("ID_unloadsubtitles\n",NULL);
+			put_icommand1(MP_CMD_SUB_VISIBILITY,0);
+			put_icommand1(MP_CMD_SUB_REMOVE,-1);
+			break;
 		case ID_fullscreen:
 			put_command0(MP_CMD_VO_FULLSCREEN);
 			break;
@@ -1193,57 +1357,58 @@ void menu_video(ULONG menucode)
 		case 8:
 			p96pip_ChangeWindowSize(xH);
 			break;
-		case 10:
-			switch (SUBNUM(menucode))
+*/
+//		case ID_aspectratio:
+// DBUG("ID_aspectratio %ld\n",SUBNUM(menucode));
+			/*switch (SUBNUM(menucode))
 			{
+				case 0:
+					AspectRatio = AR_ORIGINAL;
+					p96pip_ChangeWindowSize(AR_ORIGINAL);
+					break;
+				case 2:
+					AspectRatio = AR_16_10;
+					p96pip_ChangeWindowSize(AR_16_10);
+				case 3:
+					AspectRatio = AR_16_9;
+					p96pip_ChangeWindowSize(AR_16_9);
+					break;
+				case 4:
+					AspectRatio = AR_185_1;
+					p96pip_ChangeWindowSize(AR_185_1);
+					break;
+				case 5:
+					AspectRatio = AR_221_1;
+					p96pip_ChangeWindowSize(AR_221_1);
+					break;
+				case 6:
+					AspectRatio = AR_235_1;
+					p96pip_ChangeWindowSize(AR_235_1);
+					break;
+				case 7:
+					AspectRatio = AR_239_1;
+					p96pip_ChangeWindowSize(AR_239_1);
+					break;
+				case 8:
+					AspectRatio = AR_5_3;
+					p96pip_ChangeWindowSize(AR_5_3);
+					break;
+				case 9:
+					AspectRatio = AR_4_3;
+					p96pip_ChangeWindowSize(AR_4_3);
+					break;
+				case 10:
+					AspectRatio = AR_5_4;
+					p96pip_ChangeWindowSize(AR_5_4);
+					break;
+				case 11:
+					AspectRatio = AR_1_1;
+					p96pip_ChangeWindowSize(AR_1_1);
+					break;
+			}*/
+//			break;
 
-		case 0:
-			AspectRatio = AR_ORIGINAL;
-			p96pip_ChangeWindowSize(AR_ORIGINAL);
-			break;
-		case 2:
-			AspectRatio = AR_16_10;
-			p96pip_ChangeWindowSize(AR_16_10);
-		case 3:
-			AspectRatio = AR_16_9;
-			p96pip_ChangeWindowSize(AR_16_9);
-			break;
-		case 4:
-			AspectRatio = AR_185_1;
-			p96pip_ChangeWindowSize(AR_185_1);
-			break;
-		case 5:
-			AspectRatio = AR_221_1;
-			p96pip_ChangeWindowSize(AR_221_1);
-			break;
-		case 6:
-			AspectRatio = AR_235_1;
-			p96pip_ChangeWindowSize(AR_235_1);
-			break;
-		case 7:
-			AspectRatio = AR_239_1;
-			p96pip_ChangeWindowSize(AR_239_1);
-			break;
-		case 8:
-			AspectRatio = AR_5_3;
-			p96pip_ChangeWindowSize(AR_5_3);
-			break;
-			case 9:
-			AspectRatio = AR_4_3;
-			p96pip_ChangeWindowSize(AR_4_3);
-			break;
-		case 10:
-			AspectRatio = AR_5_4;
-			p96pip_ChangeWindowSize(AR_5_4);
-			break;
-		case 11:
-			AspectRatio = AR_1_1;
-			p96pip_ChangeWindowSize(AR_1_1);
-			break;
-			}
-*/
 	}
-
 }
 
 void menu_audio(ULONG menucode)
@@ -1251,7 +1416,7 @@ void menu_audio(ULONG menucode)
 	switch (ITEMNUM(menucode))
 	{
 		case ID_mute:
-			mp_input_queue_cmd(mp_input_parse_cmd("Mute"));
+			mp_input_queue_cmd(mp_input_parse_cmd("mute"));
 			is_mute = !is_mute ;
 			break;
 		case ID_volume_up:
@@ -1263,16 +1428,26 @@ void menu_audio(ULONG menucode)
 	}
 }
 
+void menu_settings(ULONG menucode)
+{
+	switch (ITEMNUM(menucode))
+	{
+		case ID_mplayergui:
+// DBUG("launching MPlayerGUI [WIP]\n",NULL);
+			LaunchCommand(TOOL_MPGUI);
+			break;
+	}
+}
+
+
 void processMenusClass(uint32 MenuClass_id) // zzd10h
 {
-	// char msg[256] ;
-	// sprintf(msg,"processMenusClass %ld",MenuClass_id) ;
-	// PrintMsg(msg,REQTYPE_INFO,REQIMAGE_INFO) ;
+	// Object *menu_obj = (Object *)IDoMethod(amiga_menuClass, MM_FINDID, 0, MenuClass_id);
 
-    switch (MenuClass_id)
-    {
-		case MID_MENU_LOADFILE_MENUCLASS:
-			cmd_load_file();
+	switch (MenuClass_id)
+	{
+		case MID_MENU_OPENFILE_MENUCLASS:
+			cmd_open_file();
 			break;
 
 		case MID_MENU_OPENDVD_MENUCLASS:
@@ -1291,16 +1466,16 @@ void processMenusClass(uint32 MenuClass_
 			cmd_open_network();
 			break;
 
-		case MID_MENU_ABOUT_MENUCLASS:
-			ShowAbout();
-			break;
-
 		case MID_MENU_ICONIFY_MENUCLASS:
 			Iconify(Menu_Window);
 			break;
 
+		case MID_MENU_ABOUT_MENUCLASS:
+			ShowAbout();
+			break;
+
 		case MID_MENU_QUIT_MENUCLASS:
-			// DBUG("Spawn_count = %ld\n",spawn_count);
+DBUG("spawn_count = %ld\n",spawn_count);
 			if(spawn_count == 0) put_command0(MP_CMD_QUIT);
 			break;
 
@@ -1312,16 +1487,22 @@ void processMenusClass(uint32 MenuClass_
 			cmd_stop();
 			break;
 
+
+case MID_MENU_RECORD_MENUCLASS:
+	cmd_record();
+	break;
+
+
 		case MID_MENU_LOOP_MENUCLASS:
 			cmd_loop();
 			break;
 
-		case MID_MENU_PREVFILM_MENUCLASS:
-			prevfilm();
+		case MID_MENU_PREVFILE_MENUCLASS:
+			prevfile();
 			break;
 
-		case MID_MENU_NEXTFILM_MENUCLASS:
-			nextfilm();
+		case MID_MENU_NEXTFILE_MENUCLASS:
+			nextfile();
 			break;
 
 		case MID_MENU_STAYONTOP_MENUCLASS:
@@ -1329,14 +1510,20 @@ void processMenusClass(uint32 MenuClass_
 			break;
 
 		case MID_MENU_OPENSUBTITLES_MENUCLASS:
-			// DBUG("MID_MENU_OPENSUBTITLES_MENUCLASS:\n",NULL);
-			cmd_load_subtitles();
+// DBUG("MID_MENU_OPENSUBTITLES_MENUCLASS\n",NULL);
+			cmd_open_subtitles();
 			break;
 
 		case MID_MENU_CYCLESUBTITLES_MENUCLASS:
 			put_command0(MP_CMD_SUB_SELECT);
 			break;
 
+		case MID_MENU_UNLOADSUBTITLES_MENUCLASS:
+DBUG("MID_MENU_UNLOADSUBTITLES_MENUCLASS\n",NULL);
+			put_icommand1(MP_CMD_SUB_VISIBILITY,0);
+			put_icommand1(MP_CMD_SUB_REMOVE,-1);
+			break;
+
 		case MID_MENU_FULLSCREEN_MENUCLASS:
 			put_command0(MP_CMD_VO_FULLSCREEN);
 			break;
@@ -1345,6 +1532,20 @@ void processMenusClass(uint32 MenuClass_
 			amigaos_screenshot();
 			break;
 
+case MID_MENU_AR_ORIGINAL_MENUCLASS:
+case MID_MENU_AR_16_10_MENUCLASS:
+case MID_MENU_AR_16_9_MENUCLASS:
+case MID_MENU_AR_185_1_MENUCLASS:
+case MID_MENU_AR_221_1_MENUCLASS:
+case MID_MENU_AR_235_1_MENUCLASS:
+case MID_MENU_AR_239_1_MENUCLASS:
+case MID_MENU_AR_5_3_MENUCLASS:
+case MID_MENU_AR_4_3_MENUCLASS:
+case MID_MENU_AR_5_4_MENUCLASS:
+// case MID_MENU_AR_1_1_MENUCLASS:
+DBUG("MID_MENU_AR_#?_MENUCLASS = %ld\n", MenuClass_id - MID_MENU_AR_ORIGINAL_MENUCLASS);
+break;
+
 		case MID_MENU_MUTE_MENUCLASS:
 			mp_input_queue_cmd(mp_input_parse_cmd("mute"));
 			is_mute = !is_mute;
@@ -1357,55 +1558,61 @@ void processMenusClass(uint32 MenuClass_
 		case MID_MENU_VOLUMEDOWN_MENUCLASS:
 			mplayer_put_key(KEY_VOLUME_DOWN);
 			break;
+
+		case MID_MENU_PROPERTIES_MENUCLASS:
+DBUG("MID_MENU_PROPERTIES_MENUCLASS\n",NULL);
+			FileProperties();
+			break;
+
+		case MID_MENU_MPLAYERGUI_MENUCLASS:
+// DBUG("MID_MENU_MPLAYERGUI_MENUCLASS\n",NULL);
+			LaunchCommand(TOOL_MPGUI);
+			break;
 	}
 }
 
 void menu_events( struct IntuiMessage *IntuiMsg)
 {
-	ULONG menucode = IntuiMsg->Code;
-	// add
-	// struct Menu *menu;
-	//
-	// char msg[256] ;
-	// sprintf(msg,"menu_events %ld",menucode) ;
-	// PrintMsg(msg,REQTYPE_INFO,REQIMAGE_INFO) ;
+	if (!MENUCLASS_SUPPORT)
+	{
+		ULONG menucode = IntuiMsg->Code;
 
-		if (!MENUCLASS_SUPPORT)
-		{
-			if (menucode != MENUNULL)
+//		if (menucode != MENUNULL)
+//		{
+			while (menucode != MENUNULL)
 			{
-				while (menucode != MENUNULL)
-				{
-					struct MenuItem  *item = ItemAddress(menu,menucode);
-
-					select_menu[ MENUNUM(menucode) ] ( menucode );
+				struct MenuItem  *item = ItemAddress(menu,menucode);
+// DBUG("MENUNUM = %ld\n",MENUNUM(menucode));
+// DBUG("ITEMNUM = %ld\n",ITEMNUM(menucode));
+				select_menu[ MENUNUM(menucode) ] ( menucode );
 
-					/* Handle multiple selection */
-					menucode = item->NextSelect;
-				}
+				/* Handle multiple selection */
+				menucode = item->NextSelect;
 			}
-		}
-		else
+//		}
+	}
+	else
+	{
+		uint32 MenuClass_id = NO_MENU_ID;
+
+		while ((MenuClass_id = IDoMethod(amiga_menuClass,MM_NEXTSELECT,0,MenuClass_id)) != NO_MENU_ID)
 		{
-			uint32 MenuClass_id = NO_MENU_ID;
+			processMenusClass(MenuClass_id);
 
-			while ((MenuClass_id = IDoMethod(amiga_menuClass,MM_NEXTSELECT,0,MenuClass_id)) != NO_MENU_ID)
-			{
-				processMenusClass(MenuClass_id);
+			/*if (loop_on()==TRUE)
+				SetAttrs(menuobj_MID_MENU_LOOP_MENUCLASS,MA_Selected,TRUE,TAG_END);
+			else
+				SetAttrs(menuobj_MID_MENU_LOOP_MENUCLASS,MA_Selected,FALSE,TAG_END) ;
 
-				/*if (loop_on()==TRUE)
-					SetAttrs(menuobj_MID_MENU_LOOP_MENUCLASS,MA_Selected,TRUE,TAG_END);
-				else
-					SetAttrs(menuobj_MID_MENU_LOOP_MENUCLASS,MA_Selected,FALSE,TAG_END) ;
-
-				if (is_ontop==1)
-					SetAttrs(menuobj_MID_MENU_STAYONTOP_MENUCLASS,MA_Selected,TRUE,TAG_END);
-				else
-					SetAttrs(menuobj_MID_MENU_STAYONTOP_MENUCLASS,MA_Selected,FALSE,TAG_END);*/
-			}
+			if (is_ontop==1)
+				SetAttrs(menuobj_MID_MENU_STAYONTOP_MENUCLASS,MA_Selected,TRUE,TAG_END);
+			else
+				SetAttrs(menuobj_MID_MENU_STAYONTOP_MENUCLASS,MA_Selected,FALSE,TAG_END);*/
 		}
+	}
 }
 
+
 void open_AboutInfowindow(struct pmpMessage *pmp)
 {
 	Object *win_About;
@@ -1428,15 +1635,14 @@ void open_AboutInfowindow(struct pmpMess
 		{ NULL, NULL, TABDATA_END }
 	};
 
-	choosing(TRUE);	// Not selecting file, but need to know if a window is open.
+	choosing(TRUE);		// Not selecting file, but need to know if a window is open
 
 	strcpy(license_path,"PROGDIR:Docs/LICENSE");
-	// strcpy(title, CS(MSG_Requester_Title_About));
 
 	screen = FrontMostScr();
-	//	if ( (screen=LockPubScreen(NULL)) )
-	//	{
-	//		UnlockPubScreen(NULL,screen);
+//	if ( (screen=LockPubScreen(NULL)) )
+//	{
+//		UnlockPubScreen(NULL,screen);
 
 		InitRastPort( &rp );
 
@@ -1497,30 +1703,31 @@ void open_AboutInfowindow(struct pmpMess
 
 		ReleaseDTDrawInfo( dtobj, h );
 
-		AboutLogo = NewObject(NULL, "bitmap.image",
+		AboutLogo = NewObject(BitMapClass, NULL, // "bitmap.image",
 		                      BITMAP_BitMap,  bm_About,
 		                      BITMAP_Screen,  screen,
 		                      BITMAP_Masking, TRUE,
 		                      BITMAP_Width,   BANNER_WIDTH,
 		                      BITMAP_Height,  BANNER_HEIGHT,
 		                     TAG_DONE);
-		//// DBUG("AboutLogo = 0x%08lx\n",AboutLogo);
+// DBUG("AboutLogo = 0x%08lx\n",AboutLogo);
 		if(!AboutLogo) BANNER_DISPLAY = FALSE;
 
 		if ( (win_About = NewObject(InfoWindowClass, NULL,
-		                   WA_Title,       CS(MSG_Requester_Title_About), // Title,
+		                   WA_Title,       CS(MSG_Requester_Title_About), // title,
 		                   WA_ScreenTitle, AMIGA_VERSION,
 		                   WA_PubScreen,   screen,
 		                   WA_CloseGadget, TRUE ,
 		                   WA_Height,      450,
 		                   WA_Width,       375,
 		                   WA_SizeGadget,  TRUE,
-		                   INFOWINDOW_BodyText, AMIGA_VERSION_ABOUT,
+		                   INFOWINDOW_BodyText, "\n"AMIGA_VERSION_ABOUT,
 		                   INFOWINDOW_GadgetText, CS(MSG_Requester_OK),
 		                   BANNER_DISPLAY? INFOWINDOW_Image         : TAG_IGNORE, AboutLogo,
 		                   BANNER_DISPLAY? INFOWINDOW_ImagePlace    : TAG_IGNORE, PLACEIMAGE_ABOVE,
 		                   BANNER_DISPLAY? INFOWINDOW_ImageBackFill : TAG_IGNORE, &BackFillHook,
 		                   INFOWINDOW_TabPanel, tabs,
+		                   // INFOWINDOW_AllowSignals, TRUE,
 		                  TAG_DONE)) )
 		{
 			IDoMethod(win_About, IWM_OPEN, NULL);
@@ -1530,7 +1737,7 @@ void open_AboutInfowindow(struct pmpMess
 //	} // End LockPubScreen
 
 bailout:
-//// DBUG("BAILOUT",REQTYPE_INFO,REQIMAGE_INFO);
+// DBUG("BAILOUT\n");
 	if ( dtobj )
 		DisposeDTObject( dtobj );
 
@@ -1551,8 +1758,8 @@ bailout:
 
 void ShowAbout(void)
 {
-
 	struct Process *TaskMessage;
+	struct pmpMessage *pmp;
 
 	if (choosing_flag == TRUE)
 	{
@@ -1560,20 +1767,23 @@ void ShowAbout(void)
 		return;
 	}
 
-	struct pmpMessage *pmp = AllocVecTags(sizeof(struct pmpMessage), AVT_Type,MEMF_SHARED, TAG_DONE);
+	pmp = AllocVecTags(sizeof(struct pmpMessage), AVT_Type,MEMF_SHARED, TAG_DONE);
 	if(!pmp) return;
-		snprintf(pmp->text, sizeof(pmp->text), "\n\033h%s\n %s\n" \
-		"\n\033h%s\n %s\n" \
-		"\n\033h%s\n %s\n" \
-		"\n\033h%s\n %ld.%ld\n" \
-		"\n\033h%s\n %s\n" \
-		"\n\033[s:10]\n\033c%s %s\n\033chttp://www.mplayerhq.hu\n\033[s:10]" \
-		"\n\n\033h%s%s",
-		CS(MSG_About_Built),VERSION, \
+
+	snprintf(pmp->text, sizeof(pmp->text), "\n\033h%s\n %s\n" \
+"\n\033h%s\n %s\n" \
+"\n\033h%s\n %s\n" \
+"\n\033h%s\n %ld.%ld.%ld\n" \
+"\n\033h%s\n %s\n" \
+"\n\033h%s\n %s\n" \
+"\n\033[s:10]\n\033c%s %s\n\033chttp://www.mplayerhq.hu\n\033[s:10]" \
+"\n\n\033h%s%s",
 		CS(MSG_About_AmigaVersion),AMIGA_VERSION, \
+		CS(MSG_About_Built),VERSION, \
 		CS(MSG_About_FFmpegVersion),FFMPEG_VERSION, \
-		CS(MSG_About_GCCVersion),GCC_VERSION,GCC_REVISION, \
+		CS(MSG_About_GCCVersion),GCC_VERSION,GCC_REVISION,GCC_PATCHLVL, \
 		CS(MSG_About_ARexxPort),ARexxPortName, \
+CS(MSG_About_Translation),CS(MSG_About_Translator), \
 		CS(MSG_About_Copyright),CS(MSG_About_MPlayer_Team), \
 		CS(MSG_About_AmigaOS4Version), \
 		"\n Andrea Palmatè - https://www.amigasoft.net" \
@@ -1582,31 +1792,51 @@ void ShowAbout(void)
 		"\n Michael Trebilcock" \
 		"\n AOS4 fans from Mars");
 
-	// PrintMsg(message_about,REQTYPE_INFO,REQIMAGE_INFO);
+	if(!InfoWindowBase) snprintf(pmp->text, sizeof(pmp->text), "\033c"AMIGA_VERSION_ABOUT"\n\n" \
+"\n\033b%s\033n\n%s\n" \
+"\n\033b%s \033n%s\n" \
+"\033b%s \033n%ld.%ld.%ld\n" \
+"\033b%s \033n%s\n" \
+"\033b%s \033n%s\n" \
+"\n\%s %s\nhttp://www.mplayerhq.hu\n" \
+"\n\033b%s\033n%s", \
+		CS(MSG_About_Built),VERSION, \
+		CS(MSG_About_FFmpegVersion),FFMPEG_VERSION, \
+		CS(MSG_About_GCCVersion),GCC_VERSION,GCC_REVISION,GCC_PATCHLVL, \
+		CS(MSG_About_ARexxPort),ARexxPortName, \
+CS(MSG_About_Translation),CS(MSG_About_Translator), \
+		CS(MSG_About_Copyright),CS(MSG_About_MPlayer_Team), \
+		CS(MSG_About_AmigaOS4Version), \
+		"\nAndrea Palmatè - https://www.amigasoft.net" \
+		"\nKjetil Hvalstrand - https://github.com/khval" \
+		"\nGuillaume 'zzd10h' Boesel" \
+		"\nMichael Trebilcock" \
+		"\nAOS4 fans from Mars");
 
+	// PrintMsg(message_about,REQTYPE_INFO,REQIMAGE_INFO);
 	pmp->type = REQTYPE_INFO;
 	pmp->image = REQIMAGE_INFO;
 
 	TaskMessage = (struct Process *) CreateNewProcTags (
-			NP_Entry,		(ULONG) PrintMsgProc,
-			NP_Name,		"About MPlayer",
-			NP_StackSize,	65535,//262144,
-			NP_Child,		TRUE,
-			NP_Priority,	0,
-			NP_EntryData,	pmp,
-			NP_ExitData,	IDOS,
-			NP_FinalCode,	spawn_died,
-			TAG_DONE);
+	                                  NP_Entry,     (ULONG) PrintMsgProc,
+	                                  NP_Name,      "About MPlayer",
+	                                  NP_StackSize, 65535, // 262144,
+	                                  NP_Child,     TRUE,
+	                                  NP_Priority,  0,
+	                                  NP_EntryData, pmp,
+	                                  NP_ExitData,  IDOS,
+	                                  NP_FinalCode, spawn_died,
+	                                 TAG_DONE);
 	if (TaskMessage) spawn_count++;
 	else
 	{
-		// if (INFOWINDOWCLASS_SUPPORT)
+DBUG("TaskMessage=0x%08lx ShowAbout()\n",TaskMessage);
 		if(InfoWindowBase) open_AboutInfowindow(pmp) ;
-		else PrintMsg(pmp->text,REQTYPE_INFO,REQIMAGE_INFO);
+		else PrintMsg(pmp->text, REQTYPE_INFO, REQIMAGE_INFO, CS(MSG_Requester_Title_About));
 
 		FreeVec(pmp);
 	}
-// DBUG("spawn_count=%ld\n",spawn_count);
+DBUG("spawn_count=%ld\n",spawn_count);
 }
 
 static void OpenNetwork(STRPTR args UNUSED, int32 length UNUSED, struct ExecBase *execbase UNUSED)
@@ -1615,7 +1845,7 @@ static void OpenNetwork(STRPTR args UNUS
 	UBYTE buffer[513]="http://";
 	ULONG result;
 
-	netwobj = (Object *) NewObject(REQUESTER_GetClass(), NULL,
+	netwobj = (Object *) NewObject(RequesterClass, NULL, // "requester.class",
 				REQ_Type,         REQTYPE_STRING,
 				REQ_TitleText,    CS(MSG_Requester_Network_Title),
 				REQ_BodyText,     CS(MSG_Requester_Network_Body),
@@ -1647,15 +1877,15 @@ static void OpenDVD(STRPTR args UNUSED,
 	UBYTE buffer[256]="dvd://1";
 	ULONG result;
 
-	dvdobj = (Object *) NewObject(REQUESTER_GetClass(),NULL,
-				REQ_Type,		REQTYPE_STRING,
-				REQ_TitleText,	CS(MSG_Requester_DVD_Title),
-				REQ_BodyText,	CS(MSG_Requester_DVD_Body),
-				REQ_GadgetText,	CS(MSG_Requester_DVD_Gadget),
-				REQS_Invisible,	FALSE,
-				REQS_Buffer,	buffer,
-				REQS_ShowDefault,	TRUE,
-				REQS_MaxChars,	255,
+	dvdobj = (Object *) NewObject(RequesterClass, NULL, // "requester.class",
+				REQ_Type,	  REQTYPE_STRING,
+				REQ_TitleText,	  CS(MSG_Requester_DVD_Title),
+				REQ_BodyText,	  CS(MSG_Requester_DVD_Body),
+				REQ_GadgetText,	  CS(MSG_Requester_DVD_Gadget),
+				REQS_Invisible,	  FALSE,
+				REQS_Buffer,	  buffer,
+				REQS_ShowDefault, TRUE,
+				REQS_MaxChars,	  255,
 				TAG_DONE);
 	if ( dvdobj )
 	{
@@ -1665,12 +1895,12 @@ static void OpenDVD(STRPTR args UNUSED,
 
 		if (result != 0 && (strncmp(buffer,"dvd://",6)==0))
 		{
-   			PlayFile_async(buffer);
-			printf("Buffer:%s\n",buffer);
+			PlayFile_async(buffer);
+			printf("[%s]Buffer:%s\n",__FUNCTION__,buffer);
 		}
 		else
 		{
-			if (strncmp(buffer,"dvd://",6)!=0) 	PrintMsg(CS(MSG_Requester_DVD_Error), REQTYPE_INFO, REQIMAGE_ERROR);
+			if (strncmp(buffer,"dvd://",6)!=0) PrintMsg(CS(MSG_Requester_DVD_Error), REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 		}
 		DisposeObject( dvdobj );
 	}
@@ -1684,11 +1914,11 @@ static void OpenDVDNAV(STRPTR args UNUSE
 
 	if (stream_cache_size>0)
 	{
-		PrintMsg(CS(MSG_Requester_DVDNAV_Error), REQTYPE_INFO, REQIMAGE_INFO);
+		PrintMsg(CS(MSG_Requester_DVDNAV_Error), REQTYPE_INFO, REQIMAGE_INFO, CS(MSG_Requester_Title));
 		return;
 	}
 
-	dvdobj = (Object *) NewObject(REQUESTER_GetClass(),NULL,
+	dvdobj = (Object *) NewObject(RequesterClass, NULL, // "requester.class",
 				REQ_Type,		REQTYPE_STRING,
 				REQ_TitleText,	CS(MSG_Requester_DVDNAV_Title),
 				REQ_BodyText,	CS(MSG_Requester_DVD_Body),
@@ -1706,12 +1936,12 @@ static void OpenDVDNAV(STRPTR args UNUSE
 
 		if (result != 0 && (strncmp(buffer,"dvdnav://",9)==0))
 		{
-   			PlayFile_async(buffer);
-			printf("Buffer:%s\n",buffer);
+			PlayFile_async(buffer);
+			printf("[%s]Buffer:%s\n",__FUNCTION__,buffer);
 		}
 		else
 		{
-			if (strncmp(buffer,"dvdnav://",9)!=0) PrintMsg(CS(MSG_Requester_DVD_Error), REQTYPE_INFO, REQIMAGE_ERROR);
+			if (strncmp(buffer,"dvdnav://",9)!=0) PrintMsg(CS(MSG_Requester_DVD_Error), REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 		}
 		DisposeObject( dvdobj );
 	}
@@ -1725,15 +1955,15 @@ static void OpenVCD(STRPTR args UNUSED,
 	UBYTE buffer[256]="vcd://1";
 	ULONG result;
 
-	vcdobj = (Object *) NewObject(REQUESTER_GetClass(),NULL,
-				REQ_Type,		REQTYPE_STRING,
-				REQ_TitleText,	CS(MSG_Requester_VCD_Title),
-				REQ_BodyText,	CS(MSG_Requester_VCD_Body),
-				REQ_GadgetText,	CS(MSG_Requester_VCD_Gadget),
-				REQS_Invisible,	FALSE,
-				REQS_Buffer,	buffer,
-				REQS_ShowDefault,	TRUE,
-				REQS_MaxChars,	255,
+	vcdobj = (Object *) NewObject(RequesterClass, NULL, // "requester.class",
+				REQ_Type,	  REQTYPE_STRING,
+				REQ_TitleText,	  CS(MSG_Requester_VCD_Title),
+				REQ_BodyText,	  CS(MSG_Requester_VCD_Body),
+				REQ_GadgetText,	  CS(MSG_Requester_VCD_Gadget),
+				REQS_Invisible,	  FALSE,
+				REQS_Buffer,	  buffer,
+				REQS_ShowDefault, TRUE,
+				REQS_MaxChars,	  255,
 				TAG_DONE);
 	if ( vcdobj )
 	{
@@ -1746,7 +1976,7 @@ static void OpenVCD(STRPTR args UNUSED,
 			PlayFile_async(buffer);
 		}
 		else
-			if (strncmp(buffer,"vcd://",6)!=0) PrintMsg(CS(MSG_Requester_VCD_Error), REQTYPE_INFO, REQIMAGE_ERROR);
+			if (strncmp(buffer,"vcd://",6)!=0) PrintMsg(CS(MSG_Requester_VCD_Error), REQTYPE_INFO, REQIMAGE_ERROR, CS(MSG_Requester_Title));
 		DisposeObject( vcdobj );
 	}
 
@@ -1796,12 +2026,12 @@ static UBYTE *LoadFile(const char *Start
 	choosing(TRUE);
 	if ( ( AslRequestTags( AmigaOS_FileRequester,
 				ASLFR_Screen,		Menu_Window -> WScreen,
-				ASLFR_TitleText,		ASL_WindowTitle,//CS(MSG_Requester_OpenFile_Title),
+				ASLFR_TitleText,		ASL_WindowTitle,
 				ASLFR_DoMultiSelect,	FALSE, // Maybe in the future we can implement a playlist...
 				ASLFR_RejectIcons,	TRUE,
 				ASLFR_DoPatterns,		TRUE,
 				ASLFR_StayOnTop,		TRUE,
-				ASLFR_InitialPattern,	ASL_Pattern,//(ULONG)EXTPATTERN,
+				ASLFR_InitialPattern,	ASL_Pattern, // EXTPATTERN,
 				ASLFR_InitialDrawer,	(FavoritePath_Ok) ? FavoritePath_Value : "",
 				TAG_DONE) ) == FALSE )
 	{
@@ -1824,10 +2054,9 @@ static UBYTE *LoadFile(const char *Start
 
 	FreeAslRequest(AmigaOS_FileRequester);
 
-	printf("%d:%s = '%s'\n",__LINE__,__FUNCTION__,filename);
+// DBUG("%d:%s = '%s'\n",__LINE__,__FUNCTION__,filename);
 
 	return filename;
-
 }
 
 static int32 PrintMsgProc(STRPTR args UNUSED, int32 length UNUSED, struct ExecBase *execbase)
@@ -1839,9 +2068,9 @@ static int32 PrintMsgProc(STRPTR args UN
 
 	if(pmp)
 	{
-		// if (INFOWINDOWCLASS_SUPPORT)
+DBUG("PrintMsgProc()\n",NULL);
 		if(InfoWindowBase) open_AboutInfowindow(pmp) ;
-		else PrintMsg(pmp->text,REQTYPE_INFO,REQIMAGE_INFO);
+		else PrintMsg(pmp->text, pmp->type, pmp->image, CS(MSG_Requester_Title_About));
 
 		FreeVec(pmp);
 		return RETURN_OK;
@@ -1849,7 +2078,7 @@ static int32 PrintMsgProc(STRPTR args UN
 	else return RETURN_FAIL;
 }
 
-void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE)
+void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE, CONST_STRPTR title)
 {
 	Object *reqobj;
 	struct Screen *reqscr = Menu_Window? Menu_Window -> WScreen : NULL;
@@ -1857,18 +2086,16 @@ void PrintMsg(CONST_STRPTR text, int REQ
 	if (REQ_TYPE == 0) REQ_TYPE = REQTYPE_INFO;
 	if (REQ_IMAGE == 0) REQ_IMAGE = REQIMAGE_DEFAULT;
 
-	reqobj = (Object *) NewObject( REQUESTER_GetClass(), NULL,
-				REQ_Type,		REQ_TYPE,
-				REQ_TitleText,	CS(MSG_Requester_Title),
-				REQ_BodyText,	text,
-				REQ_Image,		REQ_IMAGE,
-				REQ_TimeOutSecs,	15,
-				REQ_GadgetText,	CS(MSG_Requester_OK),
-				TAG_END );
-
+	reqobj = (Object *) NewObject(RequesterClass, NULL, // "requester.class",
+	                     REQ_Type,        REQ_TYPE,
+	                     REQ_TitleText,   title,
+	                     REQ_BodyText,    text,
+	                     REQ_Image,       REQ_IMAGE,
+	                     REQ_TimeOutSecs, 15,
+	                     REQ_GadgetText,  CS(MSG_Requester_OK),
+	                    TAG_END);
 	if (reqobj)
 	{
-
 		choosing(TRUE);	// Not selecting file, but need to know if a window is open
 
 		IDoMethod( reqobj, RM_OPENREQ, NULL, NULL, reqscr );
@@ -1884,7 +2111,7 @@ void add_file_to_que(char *FileName)
 	mp_cmd_t MPCmd;
 	mp_cmd_t *c;
 
-	printf("MP_CMD_LOADFILE = %d\n",MP_CMD_LOADFILE);
+// DBUG("MP_CMD_LOADFILE = %d\n",MP_CMD_LOADFILE);
 
 	bzero(&MPCmd,sizeof(MPCmd));
 
@@ -1907,16 +2134,16 @@ void add_file_to_que(char *FileName)
 	}
 	else
 	{
-		printf("Failed to execute\n");
+		printf("[%s]Failed to execute\n",__FUNCTION__);
 	}
 }
 
-void lastsong()
+void lastsong(void)
 {
 	mp_cmd_t MPCmd;
 	mp_cmd_t *c;
 
-	printf("MP_CMD_PLAY_TREE_UP_STEP = %d\n",MP_CMD_PLAY_TREE_UP_STEP);
+// DBUG("MP_CMD_PLAY_TREE_UP_STEP = %d\n",MP_CMD_PLAY_TREE_UP_STEP);
 
 	bzero(&MPCmd,sizeof(MPCmd));
 
@@ -1938,21 +2165,21 @@ void lastsong()
 		}
 		else
 		{
-			printf("Failed to que\n");
+			printf("[%s]Failed to queue\n",__FUNCTION__);
 		}
 	}
 	else
 	{
-		printf("Failed to execute\n");
+		printf("[%s]Failed to execute\n",__FUNCTION__);
 	}
 }
 
-void prevfilm()
+void prevfile(void)
 {
 	mp_cmd_t MPCmd;
 	mp_cmd_t *c;
 
-	printf("MP_CMD_PLAY_TREE_STEP = %d\n",MP_CMD_PLAY_TREE_STEP);
+// DBUG("MP_CMD_PLAY_TREE_STEP = %d\n",MP_CMD_PLAY_TREE_STEP);
 
 	bzero(&MPCmd,sizeof(MPCmd));
 
@@ -1975,16 +2202,16 @@ void prevfilm()
 	}
 	else
 	{
-		printf("Failed to execute\n");
+		printf("[%s]Failed to execute\n",__FUNCTION__);
 	}
 }
 
-void nextfilm()
+void nextfile(void)
 {
 	mp_cmd_t MPCmd;
 	mp_cmd_t *c;
 
-	printf("MP_CMD_PLAY_TREE_STEP = %d\n",MP_CMD_PLAY_TREE_STEP);
+// DBUG("MP_CMD_PLAY_TREE_STEP = %d\n",MP_CMD_PLAY_TREE_STEP);
 
 	bzero(&MPCmd,sizeof(MPCmd));
 
@@ -2007,7 +2234,7 @@ void nextfilm()
 	}
 	else
 	{
-		printf("Failed to execute\n");
+		printf("[%s]Failed to execute\n",__FUNCTION__);
 	}
 }
 
@@ -2023,9 +2250,8 @@ static void BackFillFunc(struct Hook *ho
 	newrp.Layer = NULL;
 
 	RectFillColor(&newrp, msg->Bounds.MinX, msg->Bounds.MinY,
-	              msg->Bounds.MaxX, msg->Bounds.MaxY, 0xff506EAA); // #506eaa color
+	              msg->Bounds.MaxX, msg->Bounds.MaxY, 0xff506EAA); // #506EAA color
 }
-
 /* Backfill function for banner borders */
 /****************************************/
 
@@ -2063,11 +2289,121 @@ struct Screen *FrontMostScr(void)
 
     if(!public_screen_address)
     {
-    // DBUG("No public screen, using WB screen\n",NULL);
-       public_screen_address = LockPubScreen(NULL);
-       UnlockPubScreen(NULL, public_screen_address);
+DBUG("No public screen, using WB screen\n",NULL);
+        public_screen_address = LockPubScreen(NULL);
+        UnlockPubScreen(NULL, public_screen_address);
     }
-    // DBUG("0x%08lx\n", (int)public_screen_address);
-	 return(public_screen_address);
+// DBUG("0x%08lx\n", (int)public_screen_address);
+    return(public_screen_address);
 }
 
+
+BOOL LaunchCommand(char *command)
+{
+DBUG("LaunchCommand() '%s'\n",command);
+	return OpenWorkbenchObject(command, TAG_DONE);
+}
+
+/* Parts from mmplayer sources mplayer.c */
+void open_InfoWindow_Properties(STRPTR vid_str, STRPTR aud_str, STRPTR clip_str)
+{
+	Object *win_Prop;
+	struct InfoWindowTab tabs[] = {
+	                               { CS(MSG_Properties_IW_Video), vid_str, TABDATA_STRING },
+	                               { CS(MSG_Properties_IW_Audio), aud_str, TABDATA_STRING },
+	                               { CS(MSG_Properties_IW_Clip), clip_str, TABDATA_STRING },
+	                               { NULL, NULL, TABDATA_END }
+	};
+// DBUG("\n[V] %s\n\n[A] %s\n\n%s\n",vid_str,aud_str,clip_str);
+
+/*char **info = mpctx->demuxer->info;
+int n;
+for(n=0; info[2 * n] != NULL; n++) {
+DBUG("%s: %s\n", info[2 * n], info[2 * n + 1]);
+}*/
+
+	win_Prop = NewObject(InfoWindowClass, NULL,
+	                    WA_Title,       CS(MSG_Properties_Title),
+	                    WA_ScreenTitle, AMIGA_VERSION,
+	                    WA_PubScreen,   FrontMostScr(),
+	                    WA_CloseGadget, TRUE,
+	                    WA_Height,      250,
+	                    WA_Width,       250,
+	                    //WA_MinWidth,    250,
+	                    WA_SizeGadget,  TRUE,
+	                    // INFOWINDOW_BodyText,   " \n", // AMIGA_VERSION_ABOUT,
+	                    INFOWINDOW_GadgetText, CS(MSG_Requester_OK),
+	                    INFOWINDOW_TabPanel,   tabs,
+	                    // INFOWINDOW_TimeOut,    15,
+	                    // INFOWINDOW_AllowSignals, TRUE,
+	                   TAG_DONE);
+
+	IDoMethod(win_Prop, IWM_OPEN, NULL);
+	DisposeObject(win_Prop);
+}
+
+void FileProperties(void)
+{
+	char vid_str[128]="-", aud_str[128]="-", clip_str[256]="-", tmp[640], buf[5];
+// union {
+//  uint32 n;
+//  char s[4];
+//} buff;
+	sh_video_t * const sh_video = mpctx->sh_video;
+	sh_audio_t * const sh_audio = mpctx->sh_audio;
+
+	// DBUG("ID_DEMUXER = %s\n", mpctx->demuxer->desc->name);
+
+// VIDEO
+	if(sh_video) {
+		// Assume FOURCC if all bytes >= 0x20 (' ')
+		if(sh_video->format >= 0x20202020) {
+// buff.n = sh_video->format;
+// DBUG("sh_video->format = 0x%08lX\n",buff.n);
+// DBUG("sh_video->format = 0x%08lX (swapped)\n",SDL_Swap32(buff.n));
+			SNPrintf(buf, sizeof(buf), "%.4s",(char *)&sh_video->format);
+			tmp[0] = buf[3]; tmp[1] = buf[2]; tmp[2] = buf[1]; tmp[3] = buf[0]; tmp[4]='\0';
+		}
+		else {
+			SNPrintf(tmp, sizeof(tmp), "0x%08X",sh_video->format);
+		}
+
+		snprintf(vid_str, sizeof(vid_str), CS(MSG_Properties_Video), \
+tmp, \
+(int)(sh_video->i_bps * 0.008), \
+sh_video->disp_w, sh_video->disp_h, \
+sh_video->fps);
+	}
+
+// AUDIO
+	if(sh_audio) {
+		// Assume FOURCC if all bytes >= 0x20 (' ')
+		if (sh_audio->format >= 0x20202020) {
+			SNPrintf(buf, sizeof(buf), "%.4s",(char *)&sh_audio->format);
+			tmp[0] = buf[3]; tmp[1] = buf[2]; tmp[2] = buf[1]; tmp[3] = buf[0]; tmp[4]='\0';
+		}
+		else {
+			SNPrintf(tmp, sizeof(tmp), "0x%08lX",sh_audio->format);
+		}
+
+		snprintf(aud_str, sizeof(aud_str), CS(MSG_Properties_Audio), \
+tmp, \
+(int)(sh_audio->i_bps * 0.008), \
+sh_audio->samplerate, \
+sh_audio->channels);
+	}
+
+// CLIP
+	SNPrintf(clip_str, sizeof(clip_str), CS(MSG_Properties_Clip), \
+demux_info_get(mpctx->demuxer, "Title"), \
+demux_info_get(mpctx->demuxer, "Artist"), \
+demux_info_get(mpctx->demuxer, "Album"), \
+demux_info_get(mpctx->demuxer, "Year"), \
+demux_info_get(mpctx->demuxer, "Comment"), \
+demux_info_get(mpctx->demuxer, "Genre") ); // from demuxer.c
+
+	SNPrintf(tmp, sizeof(tmp), CS(MSG_Properties_Prop),vid_str,aud_str,clip_str);
+	if(InfoWindowBase) open_InfoWindow_Properties(vid_str,aud_str,clip_str);
+	else PrintMsg(tmp, REQTYPE_INFO, REQIMAGE_INFO, CS(MSG_Properties_Title));
+}
+/* Parts from mmplayer sources mplayer.c */
diff --color -rupN old/amigaos/menu.h new/amigaos/menu.h
--- old/amigaos/menu.h	2023-08-01 08:28:44.000000000 +0200
+++ new/amigaos/menu.h	2023-08-21 00:36:50.000000000 +0200
@@ -17,9 +17,62 @@
  */
 
 
-extern void attach_menu(struct Window *window);
-extern void detach_menu(struct Window *window);
-extern void menu_events( struct IntuiMessage *IntuiMsg);
+//extern void attach_menu(struct Window *window);
+//extern void detach_menu(struct Window *window);
+//extern void menu_events( struct IntuiMessage *IntuiMsg);
 
-extern struct NewMenu amiga_menu[];
+//extern struct NewMenu amiga_menu[];
 
+#ifndef __MPLAYER_MENU_H__
+#define __MPLAYER_MENU_H__
+
+
+// let the compiler "know" such structs exists
+struct pmpMessage;
+
+
+void createMenuTranslation(void);
+void makeMenuClass(void);
+void attach_menu(struct Window *window);
+void detach_menu(struct Window *window);
+void open_menu(void);
+void spawn_died(int32 ret,int32 x);
+struct Process *spawn( void *fn, char *name );
+void seek_start(void);
+void PlayFile_proc(STRPTR args, int32 length, APTR execbase);
+void open_file_proc(STRPTR args, int32 length, APTR execbase);
+void cmd_open_file(void);
+int32 PlayFile_async(const char *FileName);
+void cmd_open_dvd(void);
+void cmd_open_dvdnav(void);
+void cmd_open_vcd(void);
+void cmd_open_network(void);
+void cmd_play(void);
+void cmd_stop(void);
+BOOL record_on(void);
+void cmd_record(void);
+BOOL loop_on(void);
+void cmd_loop(void);
+void open_subtitles_proc(STRPTR args, int32 length, APTR execbase);
+void cmd_open_subtitles(void);
+void menu_project(ULONG menucode);
+void menu_play(ULONG menucode);
+void menu_video(ULONG menucode);
+void menu_audio(ULONG menucode);
+void menu_settings(ULONG menucode);
+void processMenusClass(uint32 MenuClass_id);
+void menu_events( struct IntuiMessage *IntuiMsg);
+void open_AboutInfowindow(struct pmpMessage *pmp);
+void ShowAbout(void);
+void PrintMsg(CONST_STRPTR text, int REQ_TYPE, int REQ_IMAGE, CONST_STRPTR title);
+void add_file_to_que(char *FileName);
+void lastsong(void);
+void prevfile(void);
+void nextfile(void);
+struct Screen *FrontMostScr(void);
+BOOL LaunchCommand(char *command);
+void open_InfoWindow_Properties(STRPTR vid_str, STRPTR aud_str, STRPTR clip_str);
+void FileProperties(void);
+
+
+#endif
diff --color -rupN old/amigaos/MPlayer_catalog.h new/amigaos/MPlayer_catalog.h
--- old/amigaos/MPlayer_catalog.h	2023-08-10 13:59:53.000000000 +0200
+++ new/amigaos/MPlayer_catalog.h	2023-08-29 15:17:54.000000000 +0200
@@ -98,63 +98,85 @@ struct LocaleInfo
 
 #ifdef MPlayer_NUMBERS
 
-#define MSG_About_About 0
-#define MSG_About_Licence 1
-#define MSG_Menu_MPlayer 2
-#define MSG_Menu_MPlayer_LoadFile 3
-#define MSG_Menu_MPlayer_OpenDVD 4
-#define MSG_Menu_MPlayer_OpenDVDNAV 5
-#define MSG_Menu_MPlayer_OpenVCD 6
-#define MSG_Menu_MPlayer_OpenNetwork 7
-#define MSG_Menu_MPlayer_Iconify 8
-#define MSG_Menu_MPlayer_About 9
-#define MSG_Menu_MPlayer_Quit 10
-#define MSG_Menu_Play 11
-#define MSG_Menu_Play_PlayPause 12
-#define MSG_Menu_Play_Stop 13
-#define MSG_Menu_Play_Loop 14
-#define MSG_Menu_Play_PrevFilm 15
-#define MSG_Menu_Play_NextFilm 16
+#define MSG_Menu_Project 0
+#define MSG_Menu_Project_OpenFile 1
+#define MSG_Menu_Project_OpenDVD 2
+#define MSG_Menu_Project_OpenDVDNAV 3
+#define MSG_Menu_Project_OpenVCD 4
+#define MSG_Menu_Project_OpenNetwork 5
+#define MSG_Menu_Project_Iconify 6
+#define MSG_Menu_Project_About 7
+#define MSG_Menu_Project_Quit 8
+#define MSG_Menu_Play 9
+#define MSG_Menu_Play_PlayPause 10
+#define MSG_Menu_Play_Stop 11
+#define MSG_Menu_Play_Record 12
+#define MSG_Menu_Play_Loop 13
+#define MSG_Menu_Play_PrevFile 14
+#define MSG_Menu_Play_NextFile 15
+#define MSG_Menu_Play_Properties 16
 #define MSG_Menu_OptionsVideo 17
 #define MSG_Menu_OptionsVideo_StayOnTop 18
-#define MSG_Menu_OptionsVideo_OpenSubtitles 19
-#define MSG_Menu_OptionsVideo_CycleSubtitles 20
-#define MSG_Menu_OptionsVideo_Fullscreen 21
-#define MSG_Menu_OptionsVideo_Screenshot 22
-#define MSG_Menu_OptionsAudio 23
-#define MSG_Menu_OptionsAudio_Mute 24
-#define MSG_Menu_OptionsAudio_VolumeUp 25
-#define MSG_Menu_OptionsAudio_VolumeDown 26
-#define MSG_About_Built 27
-#define MSG_About_AmigaVersion 28
-#define MSG_About_FFmpegVersion 29
-#define MSG_About_Copyright 30
-#define MSG_About_MPlayer_Team 31
-#define MSG_About_AmigaOS4Version 32
-#define MSG_About_GCCVersion 33
-#define MSG_About_ARexxPort 34
-#define MSG_Requester_OK 35
-#define MSG_Requester_Title 36
-#define MSG_Requester_Network_Title 37
-#define MSG_Requester_Network_Body 38
-#define MSG_Requester_Network_Gadget 39
-#define MSG_Requester_DVD_Title 40
-#define MSG_Requester_DVD_Body 41
-#define MSG_Requester_DVD_Gadget 42
-#define MSG_Requester_DVD_Error 43
-#define MSG_Requester_DVDNAV_Title 44
-#define MSG_Requester_DVDNAV_Error 45
-#define MSG_Requester_VCD_Title 46
-#define MSG_Requester_VCD_Body 47
-#define MSG_Requester_VCD_Gadget 48
-#define MSG_Requester_VCD_Error 49
-#define MSG_Requester_OpenFile_Title 50
-#define MSG_Requester_OpenSubTitle_Title 51
-#define MSG_Requester_Title_About 52
-#define MSG_Warning_Title 53
-#define MSG_Warning_AltiVec 54
-#define MSG_Warning_Button_OK 55
-#define MSG_Warning_Button_Cancel 56
+#define MSG_Menu_OptionsVideo_Fullscreen 19
+#define MSG_Menu_OptionsVideo_Screenshot 20
+#define MSG_Menu_OptionsVideo_OpenSubtitles 21
+#define MSG_Menu_OptionsVideo_CycleSubtitles 22
+#define MSG_Menu_OptionsVideo_UnloadSubtitles 23
+#define MSG_Menu_OptionsVideo_AspectRatio 24
+#define MSG_Menu_OptionsVideo_AR_Original 25
+#define MSG_Menu_OptionsAudio 26
+#define MSG_Menu_OptionsAudio_Mute 27
+#define MSG_Menu_OptionsAudio_VolumeUp 28
+#define MSG_Menu_OptionsAudio_VolumeDown 29
+#define MSG_Menu_Settings 30
+#define MSG_Menu_Settings_MPlayerGUI 31
+#define MSG_About_About 32
+#define MSG_About_Licence 33
+#define MSG_About_Built 34
+#define MSG_About_AmigaVersion 35
+#define MSG_About_FFmpegVersion 36
+#define MSG_About_Copyright 37
+#define MSG_About_MPlayer_Team 38
+#define MSG_About_AmigaOS4Version 39
+#define MSG_About_GCCVersion 40
+#define MSG_About_ARexxPort 41
+#define MSG_About_Translation 42
+#define MSG_About_Translator 43
+#define MSG_Requester_OK 44
+#define MSG_Requester_Title 45
+#define MSG_Requester_Network_Title 46
+#define MSG_Requester_Network_Body 47
+#define MSG_Requester_Network_Gadget 48
+#define MSG_Requester_DVD_Title 49
+#define MSG_Requester_DVD_Body 50
+#define MSG_Requester_DVD_Gadget 51
+#define MSG_Requester_DVD_Error 52
+#define MSG_Requester_DVDNAV_Title 53
+#define MSG_Requester_DVDNAV_Error 54
+#define MSG_Requester_VCD_Title 55
+#define MSG_Requester_VCD_Body 56
+#define MSG_Requester_VCD_Gadget 57
+#define MSG_Requester_VCD_Error 58
+#define MSG_Requester_OpenFile_Video 59
+#define MSG_Requester_OpenFile_SubTitles 60
+#define MSG_Requester_Title_About 61
+#define MSG_Requester_Title_Warning 62
+#define MSG_Requester_Title_Error 63
+#define MSG_Warning_AltiVec 64
+#define MSG_Warning_Button_OK 65
+#define MSG_Warning_Button_Cancel 66
+#define MSG_Properties_Video 67
+#define MSG_Properties_Audio 68
+#define MSG_Properties_Clip 69
+#define MSG_Properties_Title 70
+#define MSG_Properties_Prop 71
+#define MSG_Properties_IW_Video 72
+#define MSG_Properties_IW_Audio 73
+#define MSG_Properties_IW_Clip 74
+#define MSG_Warning_Cant_Iconify 75
+#define MSG_RegisterAppID_Description 76
+#define MSG_OSD_Added_Files 77
+#define MSG_Notify_Added_File 78
 
 #endif /* MPlayer_NUMBERS */
 
@@ -164,63 +186,85 @@ struct LocaleInfo
 
 #ifdef MPlayer_STRINGS
 
-#define MSG_About_About_STR "About"
-#define MSG_About_Licence_STR "Licence"
-#define MSG_Menu_MPlayer_STR "MPlayer"
-#define MSG_Menu_MPlayer_LoadFile_STR "Load file..."
-#define MSG_Menu_MPlayer_OpenDVD_STR "Open DVD..."
-#define MSG_Menu_MPlayer_OpenDVDNAV_STR "Open DVDNAV..."
-#define MSG_Menu_MPlayer_OpenVCD_STR "Open VCD..."
-#define MSG_Menu_MPlayer_OpenNetwork_STR "Open a stream..."
-#define MSG_Menu_MPlayer_Iconify_STR "Iconify"
-#define MSG_Menu_MPlayer_About_STR "About..."
-#define MSG_Menu_MPlayer_Quit_STR "Quit"
+#define MSG_Menu_Project_STR "Project"
+#define MSG_Menu_Project_OpenFile_STR "Open file..."
+#define MSG_Menu_Project_OpenDVD_STR "Open DVD..."
+#define MSG_Menu_Project_OpenDVDNAV_STR "Open DVDNAV..."
+#define MSG_Menu_Project_OpenVCD_STR "Open VCD..."
+#define MSG_Menu_Project_OpenNetwork_STR "Open stream..."
+#define MSG_Menu_Project_Iconify_STR "Iconify"
+#define MSG_Menu_Project_About_STR "About..."
+#define MSG_Menu_Project_Quit_STR "Quit"
 #define MSG_Menu_Play_STR "Play"
 #define MSG_Menu_Play_PlayPause_STR "Play/Pause"
 #define MSG_Menu_Play_Stop_STR "Stop"
+#define MSG_Menu_Play_Record_STR "Record stream"
 #define MSG_Menu_Play_Loop_STR "Loop"
-#define MSG_Menu_Play_PrevFilm_STR "Prev film"
-#define MSG_Menu_Play_NextFilm_STR "Next film"
+#define MSG_Menu_Play_PrevFile_STR "Prev file"
+#define MSG_Menu_Play_NextFile_STR "Next file"
+#define MSG_Menu_Play_Properties_STR "Properties..."
 #define MSG_Menu_OptionsVideo_STR "Video options"
 #define MSG_Menu_OptionsVideo_StayOnTop_STR "Stay on top"
+#define MSG_Menu_OptionsVideo_Fullscreen_STR "Toggle fullscreen"
+#define MSG_Menu_OptionsVideo_Screenshot_STR "Screenshot"
 #define MSG_Menu_OptionsVideo_OpenSubtitles_STR "Open subtitles..."
 #define MSG_Menu_OptionsVideo_CycleSubtitles_STR "Cycle subtitles"
-#define MSG_Menu_OptionsVideo_Fullscreen_STR "Fullscreen"
-#define MSG_Menu_OptionsVideo_Screenshot_STR "Screenshot"
+#define MSG_Menu_OptionsVideo_UnloadSubtitles_STR "Unload subtitles"
+#define MSG_Menu_OptionsVideo_AspectRatio_STR "Aspect Ratio"
+#define MSG_Menu_OptionsVideo_AR_Original_STR "Original"
 #define MSG_Menu_OptionsAudio_STR "Audio options"
 #define MSG_Menu_OptionsAudio_Mute_STR "Mute"
 #define MSG_Menu_OptionsAudio_VolumeUp_STR "Volume Up"
 #define MSG_Menu_OptionsAudio_VolumeDown_STR "Volume Down"
+#define MSG_Menu_Settings_STR "Settings"
+#define MSG_Menu_Settings_MPlayerGUI_STR "MPlayer-GUI..."
+#define MSG_About_About_STR "About"
+#define MSG_About_Licence_STR "Licence"
 #define MSG_About_Built_STR "Built against MPlayer version:"
 #define MSG_About_AmigaVersion_STR "Amiga version:"
 #define MSG_About_FFmpegVersion_STR "FFmpeg version:"
 #define MSG_About_Copyright_STR "Copyright (C)"
 #define MSG_About_MPlayer_Team_STR "MPlayer Team"
-#define MSG_About_AmigaOS4Version_STR "AmigaOS4 version:"
+#define MSG_About_AmigaOS4Version_STR "AmigaOS4 release:"
 #define MSG_About_GCCVersion_STR "GCC version:"
 #define MSG_About_ARexxPort_STR "ARexx Port:"
+#define MSG_About_Translation_STR "Translation:"
+#define MSG_About_Translator_STR "(using built-in strings)"
 #define MSG_Requester_OK_STR "_Ok"
 #define MSG_Requester_Title_STR "MPlayer for AmigaOS4"
-#define MSG_Requester_Network_Title_STR "Open a stream"
-#define MSG_Requester_Network_Body_STR "Enter the URL to open"
-#define MSG_Requester_Network_Gadget_STR "L_oad|_Cancel"
+#define MSG_Requester_Network_Title_STR "Open stream"
+#define MSG_Requester_Network_Body_STR "Enter URL to open:"
+#define MSG_Requester_Network_Gadget_STR "_Load|_Cancel"
 #define MSG_Requester_DVD_Title_STR "Load DVD"
-#define MSG_Requester_DVD_Body_STR "Enter Chapter to Open"
-#define MSG_Requester_DVD_Gadget_STR "O_pen|_Cancel"
-#define MSG_Requester_DVD_Error_STR "Enter a valid DVD protocol"
+#define MSG_Requester_DVD_Body_STR "Enter Chapter to open:"
+#define MSG_Requester_DVD_Gadget_STR "_Open|_Cancel"
+#define MSG_Requester_DVD_Error_STR "Enter valid DVD protocol:"
 #define MSG_Requester_DVDNAV_Title_STR "Load DVDNAV"
 #define MSG_Requester_DVDNAV_Error_STR "To use DVDNAV, you must comment out cache in the config file"
 #define MSG_Requester_VCD_Title_STR "Load VCD"
-#define MSG_Requester_VCD_Body_STR "Enter Chapter to Open"
-#define MSG_Requester_VCD_Gadget_STR "O_pen|_Cancel"
-#define MSG_Requester_VCD_Error_STR "Enter a valid VCD protocol"
-#define MSG_Requester_OpenFile_Title_STR "Choose a video"
-#define MSG_Requester_OpenSubTitle_Title_STR "Choose subtitles"
+#define MSG_Requester_VCD_Body_STR "Enter Chapter to open:"
+#define MSG_Requester_VCD_Gadget_STR "_Open|_Cancel"
+#define MSG_Requester_VCD_Error_STR "Enter valid VCD protocol:"
+#define MSG_Requester_OpenFile_Video_STR "Choose video"
+#define MSG_Requester_OpenFile_SubTitles_STR "Choose subtitles"
 #define MSG_Requester_Title_About_STR "About MPlayer"
-#define MSG_Warning_Title_STR "MPlayer: WARNING!"
+#define MSG_Requester_Title_Warning_STR "MPlayer: WARNING!"
+#define MSG_Requester_Title_Error_STR "MPlayer: ERROR!"
 #define MSG_Warning_AltiVec_STR "Sorry, this version is only for\nAltiVec capable machine!"
 #define MSG_Warning_Button_OK_STR "Ok"
 #define MSG_Warning_Button_Cancel_STR "Cancel"
+#define MSG_Properties_Video_STR "\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bResolution: \033n%d x %d \n\033bFrames/sec.: \033n%5.2f \000"
+#define MSG_Properties_Audio_STR "\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRate: \033n%d Hz \n\033bChannels: \033n%d \000"
+#define MSG_Properties_Clip_STR "\033bTitle: \033n%s \n\033bArtist: \033n%s \n\033bAlbum: \033n%s \n\033bYear: \033n%s \n\033bComment: \033n%s \n\033bGenre: \033n%s \000"
+#define MSG_Properties_Title_STR "MPlayer: Properties"
+#define MSG_Properties_Prop_STR "\033b VIDEO \033n\n%s\n\n\033b AUDIO \033n\n%s\n\n\033b CLIP \033n\n%s\n"
+#define MSG_Properties_IW_Video_STR "Video"
+#define MSG_Properties_IW_Audio_STR "Audio"
+#define MSG_Properties_IW_Clip_STR "Clip"
+#define MSG_Warning_Cant_Iconify_STR "Can't iconify!\nTrying to get icon from wrong path."
+#define MSG_RegisterAppID_Description_STR "The Movie Player"
+#define MSG_OSD_Added_Files_STR "File(s) added."
+#define MSG_Notify_Added_File_STR "Added: '%s'"
 
 #endif /* MPlayer_STRINGS */
 
@@ -238,33 +282,40 @@ struct MPlayer_ArrayType
 
 static const struct MPlayer_ArrayType MPlayer_Array[] =
 {
-    { MSG_About_About, (STRPTR)MSG_About_About_STR },
-    { MSG_About_Licence, (STRPTR)MSG_About_Licence_STR },
-    { MSG_Menu_MPlayer, (STRPTR)MSG_Menu_MPlayer_STR },
-    { MSG_Menu_MPlayer_LoadFile, (STRPTR)MSG_Menu_MPlayer_LoadFile_STR },
-    { MSG_Menu_MPlayer_OpenDVD, (STRPTR)MSG_Menu_MPlayer_OpenDVD_STR },
-    { MSG_Menu_MPlayer_OpenDVDNAV, (STRPTR)MSG_Menu_MPlayer_OpenDVDNAV_STR },
-    { MSG_Menu_MPlayer_OpenVCD, (STRPTR)MSG_Menu_MPlayer_OpenVCD_STR },
-    { MSG_Menu_MPlayer_OpenNetwork, (STRPTR)MSG_Menu_MPlayer_OpenNetwork_STR },
-    { MSG_Menu_MPlayer_Iconify, (STRPTR)MSG_Menu_MPlayer_Iconify_STR },
-    { MSG_Menu_MPlayer_About, (STRPTR)MSG_Menu_MPlayer_About_STR },
-    { MSG_Menu_MPlayer_Quit, (STRPTR)MSG_Menu_MPlayer_Quit_STR },
+    { MSG_Menu_Project, (STRPTR)MSG_Menu_Project_STR },
+    { MSG_Menu_Project_OpenFile, (STRPTR)MSG_Menu_Project_OpenFile_STR },
+    { MSG_Menu_Project_OpenDVD, (STRPTR)MSG_Menu_Project_OpenDVD_STR },
+    { MSG_Menu_Project_OpenDVDNAV, (STRPTR)MSG_Menu_Project_OpenDVDNAV_STR },
+    { MSG_Menu_Project_OpenVCD, (STRPTR)MSG_Menu_Project_OpenVCD_STR },
+    { MSG_Menu_Project_OpenNetwork, (STRPTR)MSG_Menu_Project_OpenNetwork_STR },
+    { MSG_Menu_Project_Iconify, (STRPTR)MSG_Menu_Project_Iconify_STR },
+    { MSG_Menu_Project_About, (STRPTR)MSG_Menu_Project_About_STR },
+    { MSG_Menu_Project_Quit, (STRPTR)MSG_Menu_Project_Quit_STR },
     { MSG_Menu_Play, (STRPTR)MSG_Menu_Play_STR },
     { MSG_Menu_Play_PlayPause, (STRPTR)MSG_Menu_Play_PlayPause_STR },
     { MSG_Menu_Play_Stop, (STRPTR)MSG_Menu_Play_Stop_STR },
+    { MSG_Menu_Play_Record, (STRPTR)MSG_Menu_Play_Record_STR },
     { MSG_Menu_Play_Loop, (STRPTR)MSG_Menu_Play_Loop_STR },
-    { MSG_Menu_Play_PrevFilm, (STRPTR)MSG_Menu_Play_PrevFilm_STR },
-    { MSG_Menu_Play_NextFilm, (STRPTR)MSG_Menu_Play_NextFilm_STR },
+    { MSG_Menu_Play_PrevFile, (STRPTR)MSG_Menu_Play_PrevFile_STR },
+    { MSG_Menu_Play_NextFile, (STRPTR)MSG_Menu_Play_NextFile_STR },
+    { MSG_Menu_Play_Properties, (STRPTR)MSG_Menu_Play_Properties_STR },
     { MSG_Menu_OptionsVideo, (STRPTR)MSG_Menu_OptionsVideo_STR },
     { MSG_Menu_OptionsVideo_StayOnTop, (STRPTR)MSG_Menu_OptionsVideo_StayOnTop_STR },
-    { MSG_Menu_OptionsVideo_OpenSubtitles, (STRPTR)MSG_Menu_OptionsVideo_OpenSubtitles_STR },
-    { MSG_Menu_OptionsVideo_CycleSubtitles, (STRPTR)MSG_Menu_OptionsVideo_CycleSubtitles_STR },
     { MSG_Menu_OptionsVideo_Fullscreen, (STRPTR)MSG_Menu_OptionsVideo_Fullscreen_STR },
     { MSG_Menu_OptionsVideo_Screenshot, (STRPTR)MSG_Menu_OptionsVideo_Screenshot_STR },
+    { MSG_Menu_OptionsVideo_OpenSubtitles, (STRPTR)MSG_Menu_OptionsVideo_OpenSubtitles_STR },
+    { MSG_Menu_OptionsVideo_CycleSubtitles, (STRPTR)MSG_Menu_OptionsVideo_CycleSubtitles_STR },
+    { MSG_Menu_OptionsVideo_UnloadSubtitles, (STRPTR)MSG_Menu_OptionsVideo_UnloadSubtitles_STR },
+    { MSG_Menu_OptionsVideo_AspectRatio, (STRPTR)MSG_Menu_OptionsVideo_AspectRatio_STR },
+    { MSG_Menu_OptionsVideo_AR_Original, (STRPTR)MSG_Menu_OptionsVideo_AR_Original_STR },
     { MSG_Menu_OptionsAudio, (STRPTR)MSG_Menu_OptionsAudio_STR },
     { MSG_Menu_OptionsAudio_Mute, (STRPTR)MSG_Menu_OptionsAudio_Mute_STR },
     { MSG_Menu_OptionsAudio_VolumeUp, (STRPTR)MSG_Menu_OptionsAudio_VolumeUp_STR },
     { MSG_Menu_OptionsAudio_VolumeDown, (STRPTR)MSG_Menu_OptionsAudio_VolumeDown_STR },
+    { MSG_Menu_Settings, (STRPTR)MSG_Menu_Settings_STR },
+    { MSG_Menu_Settings_MPlayerGUI, (STRPTR)MSG_Menu_Settings_MPlayerGUI_STR },
+    { MSG_About_About, (STRPTR)MSG_About_About_STR },
+    { MSG_About_Licence, (STRPTR)MSG_About_Licence_STR },
     { MSG_About_Built, (STRPTR)MSG_About_Built_STR },
     { MSG_About_AmigaVersion, (STRPTR)MSG_About_AmigaVersion_STR },
     { MSG_About_FFmpegVersion, (STRPTR)MSG_About_FFmpegVersion_STR },
@@ -273,6 +324,8 @@ static const struct MPlayer_ArrayType MP
     { MSG_About_AmigaOS4Version, (STRPTR)MSG_About_AmigaOS4Version_STR },
     { MSG_About_GCCVersion, (STRPTR)MSG_About_GCCVersion_STR },
     { MSG_About_ARexxPort, (STRPTR)MSG_About_ARexxPort_STR },
+    { MSG_About_Translation, (STRPTR)MSG_About_Translation_STR },
+    { MSG_About_Translator, (STRPTR)MSG_About_Translator_STR },
     { MSG_Requester_OK, (STRPTR)MSG_Requester_OK_STR },
     { MSG_Requester_Title, (STRPTR)MSG_Requester_Title_STR },
     { MSG_Requester_Network_Title, (STRPTR)MSG_Requester_Network_Title_STR },
@@ -288,13 +341,26 @@ static const struct MPlayer_ArrayType MP
     { MSG_Requester_VCD_Body, (STRPTR)MSG_Requester_VCD_Body_STR },
     { MSG_Requester_VCD_Gadget, (STRPTR)MSG_Requester_VCD_Gadget_STR },
     { MSG_Requester_VCD_Error, (STRPTR)MSG_Requester_VCD_Error_STR },
-    { MSG_Requester_OpenFile_Title, (STRPTR)MSG_Requester_OpenFile_Title_STR },
-    { MSG_Requester_OpenSubTitle_Title, (STRPTR)MSG_Requester_OpenSubTitle_Title_STR },
+    { MSG_Requester_OpenFile_Video, (STRPTR)MSG_Requester_OpenFile_Video_STR },
+    { MSG_Requester_OpenFile_SubTitles, (STRPTR)MSG_Requester_OpenFile_SubTitles_STR },
     { MSG_Requester_Title_About, (STRPTR)MSG_Requester_Title_About_STR },
-    { MSG_Warning_Title, (STRPTR)MSG_Warning_Title_STR },
+    { MSG_Requester_Title_Warning, (STRPTR)MSG_Requester_Title_Warning_STR },
+    { MSG_Requester_Title_Error, (STRPTR)MSG_Requester_Title_Error_STR },
     { MSG_Warning_AltiVec, (STRPTR)MSG_Warning_AltiVec_STR },
     { MSG_Warning_Button_OK, (STRPTR)MSG_Warning_Button_OK_STR },
     { MSG_Warning_Button_Cancel, (STRPTR)MSG_Warning_Button_Cancel_STR },
+    { MSG_Properties_Video, (STRPTR)MSG_Properties_Video_STR },
+    { MSG_Properties_Audio, (STRPTR)MSG_Properties_Audio_STR },
+    { MSG_Properties_Clip, (STRPTR)MSG_Properties_Clip_STR },
+    { MSG_Properties_Title, (STRPTR)MSG_Properties_Title_STR },
+    { MSG_Properties_Prop, (STRPTR)MSG_Properties_Prop_STR },
+    { MSG_Properties_IW_Video, (STRPTR)MSG_Properties_IW_Video_STR },
+    { MSG_Properties_IW_Audio, (STRPTR)MSG_Properties_IW_Audio_STR },
+    { MSG_Properties_IW_Clip, (STRPTR)MSG_Properties_IW_Clip_STR },
+    { MSG_Warning_Cant_Iconify, (STRPTR)MSG_Warning_Cant_Iconify_STR },
+    { MSG_RegisterAppID_Description, (STRPTR)MSG_RegisterAppID_Description_STR },
+    { MSG_OSD_Added_Files, (STRPTR)MSG_OSD_Added_Files_STR },
+    { MSG_Notify_Added_File, (STRPTR)MSG_Notify_Added_File_STR },
 };
 
 
@@ -309,120 +375,164 @@ static const struct MPlayer_ArrayType MP
 static const char MPlayer_Block[] =
 {
 
-     "\x00\x00\x00\x00" "\x00\x06"
-    MSG_About_About_STR "\x00"
-     "\x00\x00\x00\x01" "\x00\x08"
-    MSG_About_Licence_STR "\x00"
-     "\x00\x00\x00\x02" "\x00\x08"
-    MSG_Menu_MPlayer_STR "\x00"
-     "\x00\x00\x00\x03" "\x00\x0c"
-    MSG_Menu_MPlayer_LoadFile_STR ""
+     "\x00\x00\x00\x00" "\x00\x08"
+    MSG_Menu_Project_STR "\x00"
+     "\x00\x00\x00\x01" "\x00\x0c"
+    MSG_Menu_Project_OpenFile_STR ""
+     "\x00\x00\x00\x02" "\x00\x0c"
+    MSG_Menu_Project_OpenDVD_STR "\x00"
+     "\x00\x00\x00\x03" "\x00\x0e"
+    MSG_Menu_Project_OpenDVDNAV_STR ""
      "\x00\x00\x00\x04" "\x00\x0c"
-    MSG_Menu_MPlayer_OpenDVD_STR "\x00"
+    MSG_Menu_Project_OpenVCD_STR "\x00"
      "\x00\x00\x00\x05" "\x00\x0e"
-    MSG_Menu_MPlayer_OpenDVDNAV_STR ""
-     "\x00\x00\x00\x06" "\x00\x0c"
-    MSG_Menu_MPlayer_OpenVCD_STR "\x00"
-     "\x00\x00\x00\x07" "\x00\x10"
-    MSG_Menu_MPlayer_OpenNetwork_STR ""
-     "\x00\x00\x00\x08" "\x00\x08"
-    MSG_Menu_MPlayer_Iconify_STR "\x00"
-     "\x00\x00\x00\x09" "\x00\x08"
-    MSG_Menu_MPlayer_About_STR ""
-     "\x00\x00\x00\x0a" "\x00\x04"
-    MSG_Menu_MPlayer_Quit_STR ""
-     "\x00\x00\x00\x0b" "\x00\x04"
+    MSG_Menu_Project_OpenNetwork_STR ""
+     "\x00\x00\x00\x06" "\x00\x08"
+    MSG_Menu_Project_Iconify_STR "\x00"
+     "\x00\x00\x00\x07" "\x00\x08"
+    MSG_Menu_Project_About_STR ""
+     "\x00\x00\x00\x08" "\x00\x04"
+    MSG_Menu_Project_Quit_STR ""
+     "\x00\x00\x00\x09" "\x00\x04"
     MSG_Menu_Play_STR ""
-     "\x00\x00\x00\x0c" "\x00\x0a"
+     "\x00\x00\x00\x0a" "\x00\x0a"
     MSG_Menu_Play_PlayPause_STR ""
-     "\x00\x00\x00\x0d" "\x00\x04"
+     "\x00\x00\x00\x0b" "\x00\x04"
     MSG_Menu_Play_Stop_STR ""
-     "\x00\x00\x00\x0e" "\x00\x04"
+     "\x00\x00\x00\x0c" "\x00\x0e"
+    MSG_Menu_Play_Record_STR "\x00"
+     "\x00\x00\x00\x0d" "\x00\x04"
     MSG_Menu_Play_Loop_STR ""
+     "\x00\x00\x00\x0e" "\x00\x0a"
+    MSG_Menu_Play_PrevFile_STR "\x00"
      "\x00\x00\x00\x0f" "\x00\x0a"
-    MSG_Menu_Play_PrevFilm_STR "\x00"
-     "\x00\x00\x00\x10" "\x00\x0a"
-    MSG_Menu_Play_NextFilm_STR "\x00"
+    MSG_Menu_Play_NextFile_STR "\x00"
+     "\x00\x00\x00\x10" "\x00\x0e"
+    MSG_Menu_Play_Properties_STR "\x00"
      "\x00\x00\x00\x11" "\x00\x0e"
     MSG_Menu_OptionsVideo_STR "\x00"
      "\x00\x00\x00\x12" "\x00\x0c"
     MSG_Menu_OptionsVideo_StayOnTop_STR "\x00"
      "\x00\x00\x00\x13" "\x00\x12"
+    MSG_Menu_OptionsVideo_Fullscreen_STR "\x00"
+     "\x00\x00\x00\x14" "\x00\x0a"
+    MSG_Menu_OptionsVideo_Screenshot_STR ""
+     "\x00\x00\x00\x15" "\x00\x12"
     MSG_Menu_OptionsVideo_OpenSubtitles_STR "\x00"
-     "\x00\x00\x00\x14" "\x00\x10"
+     "\x00\x00\x00\x16" "\x00\x10"
     MSG_Menu_OptionsVideo_CycleSubtitles_STR "\x00"
-     "\x00\x00\x00\x15" "\x00\x0a"
-    MSG_Menu_OptionsVideo_Fullscreen_STR ""
-     "\x00\x00\x00\x16" "\x00\x0a"
-    MSG_Menu_OptionsVideo_Screenshot_STR ""
-     "\x00\x00\x00\x17" "\x00\x0e"
+     "\x00\x00\x00\x17" "\x00\x10"
+    MSG_Menu_OptionsVideo_UnloadSubtitles_STR ""
+     "\x00\x00\x00\x18" "\x00\x0c"
+    MSG_Menu_OptionsVideo_AspectRatio_STR ""
+     "\x00\x00\x00\x19" "\x00\x08"
+    MSG_Menu_OptionsVideo_AR_Original_STR ""
+     "\x00\x00\x00\x1a" "\x00\x0e"
     MSG_Menu_OptionsAudio_STR "\x00"
-     "\x00\x00\x00\x18" "\x00\x04"
+     "\x00\x00\x00\x1b" "\x00\x04"
     MSG_Menu_OptionsAudio_Mute_STR ""
-     "\x00\x00\x00\x19" "\x00\x0a"
+     "\x00\x00\x00\x1c" "\x00\x0a"
     MSG_Menu_OptionsAudio_VolumeUp_STR "\x00"
-     "\x00\x00\x00\x1a" "\x00\x0c"
+     "\x00\x00\x00\x1d" "\x00\x0c"
     MSG_Menu_OptionsAudio_VolumeDown_STR "\x00"
-     "\x00\x00\x00\x1b" "\x00\x1e"
+     "\x00\x00\x00\x1e" "\x00\x08"
+    MSG_Menu_Settings_STR ""
+     "\x00\x00\x00\x1f" "\x00\x0e"
+    MSG_Menu_Settings_MPlayerGUI_STR ""
+     "\x00\x00\x00\x20" "\x00\x06"
+    MSG_About_About_STR "\x00"
+     "\x00\x00\x00\x21" "\x00\x08"
+    MSG_About_Licence_STR "\x00"
+     "\x00\x00\x00\x22" "\x00\x1e"
     MSG_About_Built_STR ""
-     "\x00\x00\x00\x1c" "\x00\x0e"
+     "\x00\x00\x00\x23" "\x00\x0e"
     MSG_About_AmigaVersion_STR ""
-     "\x00\x00\x00\x1d" "\x00\x10"
+     "\x00\x00\x00\x24" "\x00\x10"
     MSG_About_FFmpegVersion_STR "\x00"
-     "\x00\x00\x00\x1e" "\x00\x0e"
+     "\x00\x00\x00\x25" "\x00\x0e"
     MSG_About_Copyright_STR "\x00"
-     "\x00\x00\x00\x1f" "\x00\x0c"
+     "\x00\x00\x00\x26" "\x00\x0c"
     MSG_About_MPlayer_Team_STR ""
-     "\x00\x00\x00\x20" "\x00\x12"
+     "\x00\x00\x00\x27" "\x00\x12"
     MSG_About_AmigaOS4Version_STR "\x00"
-     "\x00\x00\x00\x21" "\x00\x0c"
+     "\x00\x00\x00\x28" "\x00\x0c"
     MSG_About_GCCVersion_STR ""
-     "\x00\x00\x00\x22" "\x00\x0c"
+     "\x00\x00\x00\x29" "\x00\x0c"
     MSG_About_ARexxPort_STR "\x00"
-     "\x00\x00\x00\x23" "\x00\x04"
+     "\x00\x00\x00\x2a" "\x00\x0c"
+    MSG_About_Translation_STR ""
+     "\x00\x00\x00\x2b" "\x00\x18"
+    MSG_About_Translator_STR ""
+     "\x00\x00\x00\x2c" "\x00\x04"
     MSG_Requester_OK_STR "\x00"
-     "\x00\x00\x00\x24" "\x00\x14"
+     "\x00\x00\x00\x2d" "\x00\x14"
     MSG_Requester_Title_STR ""
-     "\x00\x00\x00\x25" "\x00\x0e"
+     "\x00\x00\x00\x2e" "\x00\x0c"
     MSG_Requester_Network_Title_STR "\x00"
-     "\x00\x00\x00\x26" "\x00\x16"
-    MSG_Requester_Network_Body_STR "\x00"
-     "\x00\x00\x00\x27" "\x00\x0e"
+     "\x00\x00\x00\x2f" "\x00\x12"
+    MSG_Requester_Network_Body_STR ""
+     "\x00\x00\x00\x30" "\x00\x0e"
     MSG_Requester_Network_Gadget_STR "\x00"
-     "\x00\x00\x00\x28" "\x00\x08"
+     "\x00\x00\x00\x31" "\x00\x08"
     MSG_Requester_DVD_Title_STR ""
-     "\x00\x00\x00\x29" "\x00\x16"
-    MSG_Requester_DVD_Body_STR "\x00"
-     "\x00\x00\x00\x2a" "\x00\x0e"
+     "\x00\x00\x00\x32" "\x00\x16"
+    MSG_Requester_DVD_Body_STR ""
+     "\x00\x00\x00\x33" "\x00\x0e"
     MSG_Requester_DVD_Gadget_STR "\x00"
-     "\x00\x00\x00\x2b" "\x00\x1a"
-    MSG_Requester_DVD_Error_STR ""
-     "\x00\x00\x00\x2c" "\x00\x0c"
+     "\x00\x00\x00\x34" "\x00\x1a"
+    MSG_Requester_DVD_Error_STR "\x00"
+     "\x00\x00\x00\x35" "\x00\x0c"
     MSG_Requester_DVDNAV_Title_STR "\x00"
-     "\x00\x00\x00\x2d" "\x00\x3c"
+     "\x00\x00\x00\x36" "\x00\x3c"
     MSG_Requester_DVDNAV_Error_STR ""
-     "\x00\x00\x00\x2e" "\x00\x08"
+     "\x00\x00\x00\x37" "\x00\x08"
     MSG_Requester_VCD_Title_STR ""
-     "\x00\x00\x00\x2f" "\x00\x16"
-    MSG_Requester_VCD_Body_STR "\x00"
-     "\x00\x00\x00\x30" "\x00\x0e"
+     "\x00\x00\x00\x38" "\x00\x16"
+    MSG_Requester_VCD_Body_STR ""
+     "\x00\x00\x00\x39" "\x00\x0e"
     MSG_Requester_VCD_Gadget_STR "\x00"
-     "\x00\x00\x00\x31" "\x00\x1a"
-    MSG_Requester_VCD_Error_STR ""
-     "\x00\x00\x00\x32" "\x00\x0e"
-    MSG_Requester_OpenFile_Title_STR ""
-     "\x00\x00\x00\x33" "\x00\x10"
-    MSG_Requester_OpenSubTitle_Title_STR ""
-     "\x00\x00\x00\x34" "\x00\x0e"
+     "\x00\x00\x00\x3a" "\x00\x1a"
+    MSG_Requester_VCD_Error_STR "\x00"
+     "\x00\x00\x00\x3b" "\x00\x0c"
+    MSG_Requester_OpenFile_Video_STR ""
+     "\x00\x00\x00\x3c" "\x00\x10"
+    MSG_Requester_OpenFile_SubTitles_STR ""
+     "\x00\x00\x00\x3d" "\x00\x0e"
     MSG_Requester_Title_About_STR "\x00"
-     "\x00\x00\x00\x35" "\x00\x12"
-    MSG_Warning_Title_STR "\x00"
-     "\x00\x00\x00\x36" "\x00\x38"
+     "\x00\x00\x00\x3e" "\x00\x12"
+    MSG_Requester_Title_Warning_STR "\x00"
+     "\x00\x00\x00\x3f" "\x00\x10"
+    MSG_Requester_Title_Error_STR "\x00"
+     "\x00\x00\x00\x40" "\x00\x38"
     MSG_Warning_AltiVec_STR ""
-     "\x00\x00\x00\x37" "\x00\x02"
+     "\x00\x00\x00\x41" "\x00\x02"
     MSG_Warning_Button_OK_STR ""
-     "\x00\x00\x00\x38" "\x00\x06"
+     "\x00\x00\x00\x42" "\x00\x06"
     MSG_Warning_Button_Cancel_STR ""
+     "\x00\x00\x00\x43" "\x00\x56"
+    MSG_Properties_Video_STR ""
+     "\x00\x00\x00\x44" "\x00\x48"
+    MSG_Properties_Audio_STR ""
+     "\x00\x00\x00\x45" "\x00\x5c"
+    MSG_Properties_Clip_STR ""
+     "\x00\x00\x00\x46" "\x00\x14"
+    MSG_Properties_Title_STR "\x00"
+     "\x00\x00\x00\x47" "\x00\x2e"
+    MSG_Properties_Prop_STR ""
+     "\x00\x00\x00\x48" "\x00\x06"
+    MSG_Properties_IW_Video_STR "\x00"
+     "\x00\x00\x00\x49" "\x00\x06"
+    MSG_Properties_IW_Audio_STR "\x00"
+     "\x00\x00\x00\x4a" "\x00\x04"
+    MSG_Properties_IW_Clip_STR ""
+     "\x00\x00\x00\x4b" "\x00\x32"
+    MSG_Warning_Cant_Iconify_STR ""
+     "\x00\x00\x00\x4c" "\x00\x10"
+    MSG_RegisterAppID_Description_STR ""
+     "\x00\x00\x00\x4d" "\x00\x0e"
+    MSG_OSD_Added_Files_STR ""
+     "\x00\x00\x00\x4e" "\x00\x0c"
+    MSG_Notify_Added_File_STR "\x00"
 
 };
 
diff --color -rupN old/amigaos/workaround_snapshot.c new/amigaos/workaround_snapshot.c
--- old/amigaos/workaround_snapshot.c	2023-08-01 08:28:44.000000000 +0200
+++ new/amigaos/workaround_snapshot.c	2023-08-29 00:51:32.000000000 +0200
@@ -23,6 +23,10 @@
 #include <proto/graphics.h>
 #include <string.h>
 
+#include "debug.h"
+#include "appwindow.h"
+
+
 static void ARGB_to_RGB(png_byte *ptr, uint32 ARGB)
 {
 	ptr[0] = (ARGB & 0xFF0000) >> 16;
@@ -30,13 +34,14 @@ static void ARGB_to_RGB(png_byte *ptr, u
 	ptr[2] = (ARGB & 0x0000FF);
 }
 
-void amigaos_screenshot();
+void amigaos_screenshot(void);
 int amigaos_snapshot(char* filename, char* title, int width, int height, char *buffer,int BytesPerRow, int BytesPerPixel );
 
+
 extern struct Window *Menu_Window;
 extern char *SCREENSHOTDIR;
 
-void amigaos_screenshot()
+void amigaos_screenshot(void)
 {
 	struct Screen *src = Menu_Window -> WScreen;
 	uint32	bpr;
@@ -52,7 +57,7 @@ void amigaos_screenshot()
 					LBM_BaseAddress, &adr,
 					TAG_END);
 
-	int		size = bpr * height *2;
+	int		size = bpr * height * 2;
 
 	if (temp = malloc( size ))
 	{
@@ -62,10 +67,9 @@ void amigaos_screenshot()
 
 			memcpy(temp,adr, size );
 			UnlockBitMap(lock);
-
 			if (path_with_name = to_name_and_path(SCREENSHOTDIR,"mplayer.png"))
 			{
-				amigaos_snapshot(path_with_name, "MPlayer", width,  height, temp, bpr, bpp );	
+				amigaos_snapshot(path_with_name, "MPlayer", width,  height, temp, bpr, bpp );
 			}
 			free(temp);
 		}
@@ -83,7 +87,6 @@ int amigaos_snapshot(char* filename, cha
 
 	uint32 ARGB;	
 
-
 	// Open file for writing (binary mode)
 	fp = fopen(filename, "wb");
 	if (fp == NULL) {
@@ -93,7 +96,6 @@ int amigaos_snapshot(char* filename, cha
 	}
 
 	// Initialize write structure
-
 	png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
 	if (png_ptr == NULL) {
 		fprintf(stderr, "Could not allocate write struct\n");
diff --color -rupN old/config.mak new/config.mak
--- old/config.mak	2023-08-10 14:20:14.000000000 +0200
+++ new/config.mak	2023-08-30 09:01:49.876056520 +0200
@@ -5,6 +5,9 @@ export LC_ALL = C
 
 CONFIGURATION = --target=ppc-amigaos --enable-cross-compile --enable-static --prefix=/opt/ppc-amigaos/usr --with-freetype-config=/opt/ppc-amigaos/bin/freetype-config --extra-cflags=-mcrt=newlib -O2 -fno-plt -I/opt/ppc-amigaos/usr/include -lamiga -lauto -D__use_inline__   --extra-ldflags=-L/opt/ppc-amigaos/usr/lib -L/opt/ppc-amigaos/ppc-amigaos/SDK/clib2/lib -fcommon --extra-libs=-lamiga -lauto -lunix -lssl -lcrypto  -lpng -lz -ljpeg -lfribidi -lz -lbz2 -llzo2 -lmad -lvorbisenc -lvorbis -logg -lspeex -ltheoradec -logg -lmpg123 -lmpeg2 -lfaad -lopus -lrtmp -lz -lcrypto  -lopencore-amrnb -lopencore-amrwb -lxvidcore -lpthread -lvpx -lpthread   -lm  -lamiga -lauto -lgif -lfreetype -lpng -lz -lzlib -lass -lharfbuzz -lfontconfig -lfreetype -lexpat -lxml2 -lharfbuzz -lzlib -lz -ldvdread  -lvpx -lpthread   -lm  -lamiga -lauto -ldvdnav -lunix -ldvdcss --disable-mencoder --datadir=/PROGDIR --confdir=/PROGDIR --disable-termios --disable-unrarexec --enable-menu --enable-openssl-nondistributable
 
+DEBUG  = -DDEBUG
+PUBSCR = -DPUBLIC_SCREEN
+
 CHARSET = UTF-8
 DOC_LANGS = en
 DOC_LANG_ALL = cs de en es fr hu it pl ru zh_CN
@@ -36,11 +39,19 @@ INSTALLSTRIP = -s
 WINDRES = windres
 WINDRES_O = -o $@
 
+OS := $(shell uname)
+
+ifeq ($(strip $(OS)),AmigaOS)
+	AMIGADATE = $(shell c:date LFORMAT %d.%m.%Y)
+else
+	AMIGADATE = $(shell date +"%-d.%-m.%Y")
+endif
+
 #GCC_EXPERIMENTAL_FLAGS= -funroll-loops
 GCC_CPU= -D_ARCH_G3 -mcpu=G3 -mno-altivec
 GCC_OPTIMALIZATION= -O2
 
-CFLAGS   =  -Wundef -Wstrict-prototypes -Wmissing-prototypes -Wdisabled-optimization -Wno-pointer-sign -Wdeclaration-after-statement                                     \
+CFLAGS   =  -D__AMIGADATE__=\"$(AMIGADATE)\" $(PUBSCR) -Wundef -Wstrict-prototypes -Wmissing-prototypes -Wdisabled-optimization -Wno-pointer-sign -Wdeclaration-after-statement                                     \
             -std=gnu99 -Icompat/atomics/gcc -D_ISOC99_SOURCE -I. -Iffmpeg -mcrt=newlib -fno-plt -pipe -ffast-math -fcommon                                               \
             -I/opt/ppc-amigaos/usr/include -D__use_inline__ -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE64_SOURCE                                             \
             -DNEWLIB -D__USE_INLINE__  -I/opt/ppc-amigaos/usr/include -lamiga -lauto -D__use_inline__ -I/opt/ppc-amigaos/usr/include                                     \
diff --color -rupN old/libvo/cgx_common.c new/libvo/cgx_common.c
--- old/libvo/cgx_common.c	2023-08-09 22:53:08.000000000 +0200
+++ new/libvo/cgx_common.c	2023-08-29 00:14:58.000000000 +0200
@@ -69,15 +69,23 @@
 #include <libraries/keymap.h>
 #include <proto/Picasso96API.h>
 
-// For AmigaOS4 Blanker
+extern struct Catalog *catalog ;
+#define MPlayer_NUMBERS
+#define MPlayer_STRINGS
+#include "../amigaos/MPlayer_catalog.h"
+extern STRPTR myGetCatalogStr (struct Catalog *catalog, LONG num, STRPTR def);
+#define CS(id) myGetCatalogStr(catalog,id,id##_STR)
+
+// For AmigaOS4 Blanker and Application_lib
 #include <proto/application.h>
-#include <libraries/application.h>
+//#include <libraries/application.h>
 extern uint32 AppID;
-extern struct ApplicationIFace *IApplication;
+extern struct MsgPort *applibPort;
 #endif
 
 //fullpath patch
 extern char fullpath_mplayer[1024];
+extern VOID VARARGS68K EasyRequester(CONST_STRPTR text, CONST_STRPTR button, ...);
 
 #ifndef   DOS_RDARGS_H
 #include <dos/rdargs.h>
@@ -101,16 +109,23 @@ extern char fullpath_mplayer[1024];
 
 #include "cgx_common.h"
 
+#include "../amigaos/debug.h"
+#include "../amigaos/amigaos_stuff.h"
+#include "../amigaos/arexx.h"
+#include "../amigaos/menu.h"
+
 // markus
-#include <../amigaos/window_icons.h>
+#include "../amigaos/window_icons.h"
 #include <stdbool.h>
 #include <proto/icon.h>
 
+extern int spawn_count;
+
 struct kIcon iconifyIcon = { NULL, NULL };
 struct kIcon padlockicon = { NULL, NULL };
 struct kIcon fullscreenicon = { NULL, NULL };
 
-static bool is_uniconified(void);
+//static bool is_uniconified(void);
 static bool enable_Iconify(void);
 static void dispose_Iconify(void);
 
@@ -133,7 +148,6 @@ BOOL menu_in_use = FALSE;
 
 void set_gfx_rendering_option()
 {
-
 /*
 	printf("\n");
 	printf("Is_fullscreen = %s\n",is_fullscreen ? "True" : "False" );
@@ -145,7 +159,6 @@ void set_gfx_rendering_option()
 	printf("Can_go_faster = %s\n", can_go_faster ? "True" : "False" );
 	printf("\n");
 */
-
 }
 
 static char *strcasestr(char *heystack,char *needle)
@@ -199,8 +212,8 @@ static char *strcasestr(char *heystack,c
 #endif
 
 extern APTR window_mx;
-extern IMAGE_WIDTH;
-extern IMAGE_HEIGHT;
+//extern IMAGE_WIDTH;
+//extern IMAGE_HEIGHT;
 
 // Set here, and use in the vo_gfx_**
 ULONG gfx_monitor = 0;
@@ -497,7 +510,7 @@ BOOL gfx_GiveArg(const char *arg)
 /****************************/
 VOID gfx_ReleaseArg(VOID)
 {
-	printf("%s:%d\n",__FUNCTION__,__LINE__);
+DBUG("%s:%d\n",__FUNCTION__,__LINE__);
 
 	if (gfx_screenname)
 	{
@@ -520,10 +533,8 @@ struct Hook transphook =
    (APTR) MyTranspHook,
    NULL
 };
-
 #endif
 
-
 /****************************/
 void UpdateGadgets(struct Window * My_Window, int WindowWidth, int WindowHeight)
 {
@@ -634,7 +645,8 @@ void gfx_HandleBorder(struct Window *My_
 /****************************/
 void gfx_Start(struct Window *My_Window)
 {
-	if((awport = CreateMsgPort()))
+	//if((awport = CreateMsgPort()))
+	if((awport = AllocSysObject(ASOT_PORT,NULL)))
 	{
 		appwin = AddAppWindow(appid, appuserdata, My_Window, awport, NULL);
 
@@ -660,7 +672,9 @@ void gfx_Stop(struct Window *My_Window)
 	{
 		while((amsg = (struct AppMessage *)GetMsg(awport)))
 			ReplyMsg((struct Message *)amsg);
-		DeleteMsgPort(awport);
+
+		//DeleteMsgPort(awport);
+		FreeSysObject(ASOT_PORT, awport);
 		awport = NULL;
 	}
 }
@@ -685,53 +699,50 @@ bool empty_msg_queue(struct MsgPort *por
 	return false;
 }
 
-bool is_uniconified()
+/*bool is_uniconified(void)
 {
 	if (iconifyPort)
 	{
 		ULONG signal = 1 << iconifyPort->mp_SigBit;
-		 if (SetSignal(0L, signal) & signal)
+		if (SetSignal(0L, signal) & signal)
 		{
 			return empty_msg_queue(iconifyPort);
 		}
 	}
 	return false;
-}
+}*/
 
-bool enable_Iconify()
+bool enable_Iconify(void)
 {
-/*	const char *files[]={"progdir:MPlayer","progdir:MPlayer-AltiVec","progdir:mplayer","progdir:mplayer-altivec","progdir:mplayer-nonaltivec","envarc:sys/def_video", "envarc:sys/def_tool",NULL};
-	int n;
-
-	for (n=0;files[n];n++)
-	{
-		_dobj = GetDiskObjectNew( files[n] );
-		if (_dobj) break;
-	}*/
 	_dobj = GetDiskObject( fullpath_mplayer );
-	if(!_dobj) _dobj = GetDiskObject("ENVARC:Sys/def_shell");
-
-	if (_dobj)
-	{
-		_dobj -> do_CurrentX = 0;
-		_dobj -> do_CurrentY = 0;
+	if(_dobj == NULL) {
+		_dobj = GetDiskObject("ENVARC:Sys/def_shell");
+		if(_dobj == NULL) _dobj = GetDiskObjectNew( fullpath_mplayer ); // gets "tool" icon
+	}
+DBUG("_dobj = 0x%08lx (%s)\n",_dobj,fullpath_mplayer);
+	if(_dobj == NULL) {
+		EasyRequester(CS(MSG_Warning_Cant_Iconify), CS(MSG_Warning_Button_OK) );
+		//EasyRequester(CS(MSG_Warning_Cant_Iconify), CS(MSG_Warning_Button_OK), (STRPTR)fullpath_mplayer);
+		return false;
+	}
 
-		iconifyPort = (struct MsgPort *) AllocSysObject(ASOT_PORT,NULL);
+	_dobj -> do_CurrentX = 0;
+	_dobj -> do_CurrentY = 0;
 
-		if (iconifyPort)
-		{
-			appicon = AddAppIcon(1, 0, "MPlayer", iconifyPort, 0, _dobj, 
-					WBAPPICONA_SupportsOpen, TRUE,
-					TAG_END);
-
-			if (appicon) return true;
-		}
+	iconifyPort = (struct MsgPort *) AllocSysObject(ASOT_PORT,NULL);
+	if (iconifyPort)
+	{
+		appicon = AddAppIcon(1, 0, "MPlayer", iconifyPort, 0, _dobj, 
+				WBAPPICONA_SupportsOpen, TRUE,
+			TAG_END);
+DBUG("appicon = 0x%08lx\n",appicon);
+		if (appicon) return true;
 	}
 
 	return false;
 }
 
-void dispose_Iconify()
+void dispose_Iconify(void)
 {
 	if (_dobj)
 	{
@@ -748,22 +759,44 @@ void dispose_Iconify()
 	}
 }
 
-//markus
-void Iconify(struct Window *My_Window)
+// markus & javier
+BOOL Iconify(struct Window *w)
 {
-//todo: iconifying from menu 
-//javier
-DebugPrintF("iconifying from menu\n",NULL);
+DBUG("Iconify() 0x%08lx\n",appicon);
+	if (appicon != NULL) return FALSE;
+
 	if (enable_Iconify())
 	{
-		empty_msg_queue(My_Window->UserPort);
-		SetWindowAttrs(My_Window,
+		//empty_msg_queue(w->UserPort);
+		SetWindowAttrs(w,
 		               WA_Hidden, TRUE,
-		               TAG_END);
+		              TAG_END);
+		return TRUE;
 	}
 
+	return FALSE;
 }
 
+BOOL UnIconify(struct Window *w)
+{
+DBUG("UnIconify() 0x%08lx (0x%08lx)\n",appicon,w);
+	if (appicon == NULL) return FALSE;
+//DBUG("1 %ld\n",is_uniconified());
+//	if( is_uniconified() )
+	{
+//DBUG("2\n",NULL);
+		SetWindowAttrs(w,
+		               WA_Hidden,   FALSE,
+		               WA_Activate, TRUE,
+		              TAG_END);
+		WindowToFront(w);
+		dispose_Iconify();
+	}
+
+	return TRUE;
+}
+// end markus & javier
+
 /****************************************************/
 
 int secs,secs2,mics,mics2;
@@ -773,11 +806,11 @@ BOOL is_user_resized = TRUE;
 
 
 #if 1
-extern void do_appwindow();
+extern void AmigaOS_do_appwindow(void);
 extern ULONG appwindow_sig;
 #else
+#define AmigaOS_do_appwindow()
 #define appwindow_sig 0 
-#define do_appwindow(win)
 #endif
 
 uint32_t microsec;
@@ -800,16 +833,25 @@ BOOL gfx_CheckEvents(struct Screen *My_S
 		return retval;
 	}
 
-	window_sig = 1L<<(My_Window->UserPort)->mp_SigBit;
+	window_sig = 1L << (My_Window->UserPort)->mp_SigBit;
 
 	info_sig = window_sig | appwindow_sig ;
 
+	if (iconifyPort)
+	{
+		info_sig |= 1 << iconifyPort->mp_SigBit;
+	}
+
+	if(AppID) // application.library messsage port
+	{
+		info_sig |= 1L << applibPort->mp_SigBit;
+	}
+
 #ifdef CONFIG_GUI
 if(!use_gui)
 {
 #endif
 
-
 #ifdef CONFIG_GUI
 }
 #endif
@@ -835,35 +877,50 @@ if(!use_gui)
 		}
 	}
 
+	sig = SetSignal(0L, info_sig);
+
+	// "application.library"
+	if(!is_fullscreen  &&  AppID  &&  (sig & (1L<<applibPort->mp_SigBit)) )
+	{
+		AmigaOS_do_applib(My_Window);
+	}
+
+	if(iconifyPort  &&  (sig & (1L<<iconifyPort->mp_SigBit)))
+	{
+		UnIconify(My_Window);
+	}
+
 // markus iconify
-	if (iconifyPort)		// Iconified mode...
+	/*if (iconifyPort)		// Iconified mode...
 	{
 		if (is_uniconified())
 		{
-			SetWindowAttrs(My_Window,
-			        WA_Hidden, FALSE,
+// DBUG("uniconifying\n",NULL);
+			/ * SetWindowAttrs(My_Window,
+			        WA_Hidden,   FALSE,
+			        WA_Activate, TRUE,
 				TAG_END);
 //javier
-			ActivateWindow(My_Window);
+			//ActivateWindow(My_Window);
 			WindowToFront(My_Window);
 //
-			dispose_Iconify();
+			dispose_Iconify(); * /
+			UnIconify(My_Window);
 		}
 
 //		appw_events();
-		return;
-	}
+		return retval;
+	}*/
 // end markus
 
-	sig = SetSignal(0L,info_sig );
 
 	if ( sig & appwindow_sig )
 	{
-		do_appwindow();
-	}	
+		AmigaOS_do_appwindow();
+	}
 
 	if( sig & window_sig ) 
-	{ 
+	{
 		struct IntuiMessage * IntuiMsg;
 		ULONG Class;
 		UWORD Code;
@@ -875,15 +932,15 @@ if(!use_gui)
 		int MouseX, MouseY;
 		struct IntuiWheelData *mouse_wheel;
 		ULONG w,h;
-	
+
 		while ( ( IntuiMsg = (struct IntuiMessage *) GetMsg( My_Window->UserPort ) ) )
 		{
-			Class		= IntuiMsg->Class;
-			Code		= IntuiMsg->Code;
-			Qualifier	= IntuiMsg->Qualifier;
-			MouseX	= IntuiMsg->MouseX;
-			MouseY	= IntuiMsg->MouseY;
-			mouse_wheel	= (struct IntuiWheelData *) IntuiMsg -> IAddress;
+			Class       = IntuiMsg->Class;
+			Code        = IntuiMsg->Code;
+			Qualifier   = IntuiMsg->Qualifier;
+			MouseX      = IntuiMsg->MouseX;
+			MouseY      = IntuiMsg->MouseY;
+			mouse_wheel = (struct IntuiWheelData *) IntuiMsg -> IAddress;
 //			gettimeofday(&before,&dontcare);	// To get time after
 
 			switch( Class )
@@ -913,20 +970,18 @@ if(!use_gui)
 
 						if (h !=  *window_height)
 						{
-							SetWindowAttrs(My_Window, 	
+							SetWindowAttrs(My_Window,
 								WA_InnerWidth, w,
 								WA_InnerHeight, h,
-								TAG_END);
+							TAG_END);
 						}
 						resize_sec = IntuiMsg->Seconds - 10;
 					}
 					break;
 
 				case IDCMP_CLOSEWINDOW: 
-					mplayer_put_key(KEY_ESC);   // that for whole exit when video-window close
-
+					if(spawn_count == 0) mplayer_put_key(KEY_ESC); // that for whole exit when video-window close
 					// mp_input_queue_cmd(mp_input_parse_cmd("stop"));	// For close 
-
 					break;
 
 				case IDCMP_ACTIVEWINDOW:
@@ -969,7 +1024,7 @@ if(!use_gui)
 							if ( DoubleClick(secs, mics, secs2, mics2) )
 							{
 							#if HAVE_AREXX
-                                				put_command0(MP_CMD_VO_FULLSCREEN);
+								put_command0(MP_CMD_VO_FULLSCREEN);
 							#endif
 								secs = mics = secs2 = mics2 = 0;
 								p_secs1 = p_secs2 = p_mics2 = p_mics1 = 0;
@@ -1040,6 +1095,7 @@ if(!use_gui)
 					break;
 
 				case IDCMP_MENUPICK:
+DBUG("IDCMP_MENUPICK\n",NULL);
 					menu_events( IntuiMsg );
 					menu_in_use = FALSE;
 					set_gfx_rendering_option();
@@ -1052,7 +1108,7 @@ if(!use_gui)
 
 			// markus
 			case IDCMP_GADGETUP:
-//javier
+// javier
 				GadgetID = (IntuiMsg -> IAddress) ? ((struct Gadget *) ( IntuiMsg -> IAddress)) -> GadgetID : 0 ;
 //
 				switch (GadgetID)
@@ -1061,10 +1117,7 @@ if(!use_gui)
 						if (enable_Iconify())
 						{
 							empty_msg_queue(My_Window->UserPort);
-							// close_window();
-							SetWindowAttrs(My_Window,
-							WA_Hidden, TRUE,
-							TAG_END);
+							SetWindowAttrs(My_Window, WA_Hidden,TRUE, TAG_END);
 						}
 						// printf ("Markus message iconify \n!!!");
 						break;
@@ -1199,19 +1252,13 @@ if(!use_gui)
 				    }
 				    break;
 			}
-
 			ReplyMsg( (struct Message *) IntuiMsg);
-
-
 //			gettimeofday(&after,&dontcare);		// To get time after
 //			microsec = (after.tv_usec - before.tv_usec) +(1000000 * (after.tv_sec - before.tv_sec));
 //			printf("Event Class %08X - %d us\n", Class, microsec);
-
-
-
 	    }
    }
-   else if(SetSignal(0L, appwinsig ) & appwinsig) // Handle Dropped files
+   /*else if(SetSignal(0L, appwinsig ) & appwinsig) // Handle Dropped files
    {
 	    struct AppMessage *amsg;
 	    struct WBArg   *argptr;
@@ -1259,7 +1306,7 @@ if(!use_gui)
 			}
 			ReplyMsg((struct Message *) amsg);
 		}	
-   }
+   }*/
 
    MutexRelease(window_mx);
 
@@ -1332,10 +1379,10 @@ void gfx_ControlBlanker(struct Screen *
 
 	if (AppID>0)
 	{
-		if (IApplication)
-		{
+//		if (IApplication)
+//		{
 			SetApplicationAttrs(AppID, APPATTR_AllowsBlanker, enable ? TRUE : FALSE, TAG_DONE);
-		}
+//		}
 	}
 
 	mp_msg(MSGT_VO, MSGL_INFO, "VO: %s blanker\n", enable ? "Enabling" : "Disabling" );
@@ -1425,7 +1472,7 @@ void print_screen_info( ULONG monitor, U
 	w =  di.Nominal.MaxX -di.Nominal.MinX +1;
 	h =  di.Nominal.MaxY -di.Nominal.MinY +1;
 
-	printf("Monitor = %d, Screen mode ID = %08x (%dx%d)\n",monitor, ModeID,w,h);
+	printf("Monitor #%d, Screen mode ID = 0x%08X (%dx%d)\n",monitor, ModeID,w,h);
 }
 
 
@@ -1571,4 +1618,3 @@ void gfx_center_window(struct Screen *My
 		FreeScreenDrawInfo(My_Screen, dri);
 	}
 }
-
diff --color -rupN old/libvo/cgx_common.h new/libvo/cgx_common.h
--- old/libvo/cgx_common.h	2023-08-01 08:28:43.000000000 +0200
+++ new/libvo/cgx_common.h	2023-08-28 19:15:24.000000000 +0200
@@ -204,5 +204,8 @@ extern void set_gfx_rendering_option();
 */
 
 
-#endif
+BOOL Iconify(struct Window *w);
+BOOL UnIconify(struct Window *w);
+
 
+#endif
diff --color -rupN old/libvo/sdl_common.c new/libvo/sdl_common.c
--- old/libvo/sdl_common.c	2023-08-01 19:50:09.000000000 +0200
+++ new/libvo/sdl_common.c	2023-08-29 13:19:02.000000000 +0200
@@ -29,9 +29,14 @@
 #include "geometry.h"
 
 
+#include "../amigaos/debug.h"
 #include "mp_core.h"     // used to get -vo string/short_name
 extern MPContext *mpctx; // used to get -vo string/short_name
 
+extern int spawn_count;
+
+//static struct Window *win = NULL; // make_appwindow()
+
 
 static int old_w;
 static int old_h;
@@ -104,6 +109,8 @@ int vo_sdl_init(void)
 
 void vo_sdl_uninit(void)
 {
+delete_appwindow();
+DBUG("vo_sdl_uninit()\n",NULL);
     if (SDL_WasInit(SDL_INIT_VIDEO))
         SDL_QuitSubSystem(SDL_INIT_VIDEO);
     sdl_window = NULL;
@@ -197,6 +204,11 @@ sdl_set_mode(int bpp, uint32_t flags)
 #ifdef __AMIGAOS4__
     if(mpctx->video_out) {
         AmigaOS_ScreenTitle(mpctx->video_out->info->short_name); // used to get -vo string/short_name) AmigaOS_ScreenTitle(mpctx->video_out->info->short_name); // used to get -vo string/short_name
+
+        // GL opens/closes couple of windows until showing
+        // its "real window". We "keep" the last one (aka real window)
+        delete_appwindow();
+        make_appwindow(AmigaOS_GetSDLWindowPtr()); 
     }
 #endif
 
@@ -240,6 +252,7 @@ int sdl_default_handle_event(SDL_Event *
         reinit = 0;
         return res;
     }
+//DBUG("event->type = 0x%08lx\n",event->type);
     switch (event->type) {
 #if SDL_VERSION_ATLEAST(2, 0, 0)
     case SDL_WINDOWEVENT:
@@ -292,8 +305,13 @@ int sdl_default_handle_event(SDL_Event *
             mplayer_put_key(mpkey);
         break;
 
+//case SDL_SYSWMEVENT:
+//case SDL_USEREVENT:
+//DBUG("0x%08lX or 0x%08lX\n",SDL_SYSWMEVENT,SDL_USEREVENT);
+//break;
+
     case SDL_QUIT:
-        mplayer_put_key(KEY_CLOSE_WIN);
+if(spawn_count == 0) mplayer_put_key(KEY_CLOSE_WIN);
         break;
     }
     return 0;
diff --color -rupN old/libvo/video_out.c new/libvo/video_out.c
--- old/libvo/video_out.c	2023-08-01 08:28:43.000000000 +0200
+++ new/libvo/video_out.c	2023-08-13 12:16:22.000000000 +0200
@@ -350,7 +350,7 @@ void list_video_out(void){
       mp_msg(MSGT_IDENTIFY, MSGL_INFO, "ID_VIDEO_OUTPUTS\n");
       while (video_out_drivers[i]) {
         const vo_info_t *info = video_out_drivers[i++]->info;
-        mp_msg(MSGT_GLOBAL, MSGL_INFO,"\t%s\t%s\n", info->short_name, info->name);
+        mp_msg(MSGT_GLOBAL, MSGL_INFO,"\t%-16s\t%s\n", info->short_name, info->name);
       }
       mp_msg(MSGT_GLOBAL, MSGL_INFO,"\n");
 }
diff --color -rupN old/libvo/vo_cgx_wpa.c new/libvo/vo_cgx_wpa.c
--- old/libvo/vo_cgx_wpa.c	2023-08-07 15:39:53.000000000 +0200
+++ new/libvo/vo_cgx_wpa.c	2023-08-23 16:26:22.000000000 +0200
@@ -65,8 +65,9 @@
 #include <inttypes.h>	// Fix <postproc/rgb2rgb.h> bug
 
 // Debug
-#define kk(x)
-#define dprintf(...)
+//#define kk(x)
+//#define dprintf(...)
+#include "../amigaos/debug.h"
 
 #include <proto/Picasso96API.h>
 
@@ -122,7 +123,7 @@ static char *GetWindowTitle(void)
       strcpy(window_title, "MPlayer - ");
       strcat(window_title, filename);
    } else {
-      window_title = strdup("MPlayer " AMIGA_VERSION " (wpa)");
+      window_title = strdup(AMIGA_VERSION " (wpa)");
    }
 
    return window_title;
@@ -300,7 +301,7 @@ static ULONG Open_Window()
 
 	My_Window = NULL;
 
-	dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+	DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	if ( ( My_Screen = LockPubScreen ( gfx_screenname ) ) )
 	{
@@ -380,7 +381,7 @@ static ULONG Open_Window()
 				// #ifdef __amigaos4__
 				//	WA_Title,		"MPlayer " VERSION " (wpa)",
 				// #endif
-                        	WA_ScreenTitle,	AMIGA_VERSION " (wpa)",
+					WA_ScreenTitle,	AMIGA_VERSION " (wpa)",
 					WA_Title,		(ULONG) GetWindowTitle(),
 					WA_Left,		win_left,
 					WA_Top,		win_top,
@@ -643,7 +644,7 @@ static int config(uint32_t width, uint32
 
 	if ( is_fullscreen )
 	{
-		dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+		DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
  		ModeID = Open_FullScreen();
 	}
 
@@ -668,7 +669,7 @@ static int config(uint32_t width, uint32
 	UserMsg = My_Window->UserPort;
 
 
-dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
  	if (PrepareBuffer(in_format, IMGFMT_BGR32) < 0) 
 	{
@@ -676,22 +677,22 @@ dprintf("%s:%ld\n",__FUNCTION__,__LINE__
 		return -1;
 	}
 
-dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	draw_alpha_func = draw_alpha_rgb32;
 
-dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	gfx_Start(My_Window);
 
-dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 #ifdef CONFIG_GUI
     if (use_gui)
 		guiGetEvent(guiSetWindowPtr, (char *) My_Window);
 #endif
 
-dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	return 0; // -> Ok
 }
@@ -818,7 +819,7 @@ static void FreeGfx(void)
 /****************************** UNINIT ******************************/
 static void uninit(void)
 {
-dprintf("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
+DBUG("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
 
 	FreeGfx();
 
diff --color -rupN old/libvo/vo_comp.c new/libvo/vo_comp.c
--- old/libvo/vo_comp.c	2023-08-07 15:35:14.000000000 +0200
+++ new/libvo/vo_comp.c	2023-08-22 13:45:28.000000000 +0200
@@ -31,13 +31,15 @@
 //#define OLD_DEBUG 
 //end markus 
 
-#define debug_level 0
+/*#define debug_level 0
 
 #if debug_level > 0
 #define dprintf( ... ) Printf( __VA_ARGS__ )
 #else
 #define dprintf(...)
-#endif
+#endif*/
+#include "../amigaos/debug.h"
+
 
 #define SYSTEM_PRIVATE
 
@@ -117,8 +119,8 @@ static char *GetWindowTitle(void)
 #include <inttypes.h>		// Fix <postproc/rgb2rgb.h> bug
 
 // Debug
-#define kk(x)
-#define dprintf(...)
+//#define kk(x)
+//#define dprintf(...)
 
 // OS specific
 
@@ -199,7 +201,7 @@ static float best_screen_aspect_ratio;
 
 // static uint32_t get_image(mp_image_t * mpi);
 
-void 	alloc_output_buffer( ULONG width, ULONG height )
+void alloc_output_buffer( ULONG width, ULONG height )
 {
 	amiga_image_width = width ;
 	amiga_image_height = height ;
@@ -210,7 +212,6 @@ void 	alloc_output_buffer( ULONG width,
 	output_ri.RGBFormat = gfx_common_rgb_format;
 	output_ri.pad = 0;
 	output_ri.Memory = AllocVec( output_ri.BytesPerRow * height+2 , MEMF_CLEAR);
-
 }
 
 
@@ -238,11 +239,11 @@ void draw_comp_bitmap(struct BitMap *the
 
 			COMPTAG_VertexArray, P, 
 			COMPTAG_VertexFormat,COMPVF_STW0_Present,
-		    	COMPTAG_NumTriangles,2,
+			COMPTAG_NumTriangles,2,
 
 			COMPTAG_SrcAlpha, (uint32) (0x0010000 ),
 			COMPTAG_Flags, COMPFLAG_SrcAlphaOverride | COMPFLAG_HardwareOnly | COMPFLAG_SrcFilter ,
-			TAG_DONE);
+		TAG_DONE);
 
 		UnlockLayer(My_Window->RPort->Layer);
 	}
@@ -337,7 +338,7 @@ static void draw_inside_window()
 
 	ww = My_Window->Width - My_Window->BorderLeft - My_Window->BorderRight;
 	wh = My_Window->Height - My_Window->BorderTop - My_Window->BorderBottom;
-	
+
 	if (inner_bitmap)
 	{
 		if ((GetBitMapAttr(inner_bitmap,BMA_WIDTH) != ww)||(GetBitMapAttr(inner_bitmap,BMA_HEIGHT) != wh))
@@ -428,7 +429,6 @@ static void draw_alpha_rgb16 (int x0,int
 
 
 static struct gfx_command commands[] = {
-
 	{	"help",		's',	NULL,	"HELP/S", gfx_help},
 	{	"NOBORDER",		's',	NULL,	"NOBORDER/S", fix_border },
 	{	"TINYBORDER",	's',	NULL,	"TINYBORDER/S", fix_border },
@@ -472,7 +472,7 @@ static int preinit(const char *arg)
 
 	if (gfx_screenname)
 	{
-		printf("\n*****\nOpen on screen: %s\n*******\n",gfx_screenname);
+		DBUG(" *****\nOpen on screen: %s\n*******\n",gfx_screenname);
 	}
 
 	if ( ( My_Screen = LockPubScreen ( gfx_screenname ) ) )
@@ -487,7 +487,7 @@ static int preinit(const char *arg)
 		GetDisplayInfoData( NULL, &display_info, sizeof(display_info) , DTAG_DISP, DisplayID);
 		GetBoardDataTags( display_info.RTGBoardNum, GBD_ChipDriver, &ChipDriverName, TAG_END);
 
-		printf("VO: [comp] Screen use driver: %s\n",ChipDriverName);
+		mp_msg(MSGT_VO, MSGL_INFO, "VO: [comp] Screen use driver: %s\n",ChipDriverName);
 
 		UnlockPubScreen(NULL, My_Screen);
 	}
@@ -502,7 +502,7 @@ static int preinit(const char *arg)
 extern char * filename;
 
 static ULONG Open_Window()
-{		
+{
 	// Window
 	ULONG ModeID = INVALID_ID;
 	BOOL WindowActivate = TRUE;
@@ -511,14 +511,14 @@ static ULONG Open_Window()
 
 	if (gfx_screenname)
 	{
-		printf("\n*****\nOpen on screen: %s\n*******\n",gfx_screenname);
+		DBUG(" *****\nOpen on screen: %s\n*******\n",gfx_screenname);
 	}
 
 	if ( ( My_Screen = LockPubScreen ( gfx_screenname ) ) )
 	{
 		ModeID = GetVPModeID(&My_Screen->ViewPort);
 
-		printf("Screen %f\n", (float) My_Screen -> Width / (float) My_Screen -> Height);
+		DBUG("Screen %f\n", (float) My_Screen -> Width / (float) My_Screen -> Height);
 
 #ifdef OLD_DEBUG 
 		print_monitor_info();
@@ -533,7 +533,7 @@ static ULONG Open_Window()
 		{
 			case NOBORDER:
 				My_Window = OpenWindowTags( NULL,
-#ifdef PUBLIC_SCREEN
+#ifdef PUBLIC_SCREEN
 					WA_PubScreen,	(ULONG) My_Screen,
 #else
 					WA_CustomScreen,	(ULONG) My_Screen,
@@ -598,7 +598,7 @@ static ULONG Open_Window()
 // #ifdef __amigaos4__
 //					WA_Title,		"MPlayer " VERSION " (comp)",
 // #endif
-                        	WA_ScreenTitle,	AMIGA_VERSION " (comp)",
+					WA_ScreenTitle,	AMIGA_VERSION " (comp)",
 					WA_Title,		(ULONG) GetWindowTitle(),
 					WA_Left,		win_left,
 					WA_Top,		win_top,
@@ -622,14 +622,15 @@ static ULONG Open_Window()
 					WA_IDCMP,		IDCMP_COMMON | IDCMP_GADGETUP,
 					WA_Flags,		WFLG_REPORTMOUSE,
 					// WA_SkinInfo,	NULL,
-					TAG_DONE);
+				TAG_DONE);
 //markus gadget
-	if (My_Window)
-	{
-	 	open_icon( My_Window, ICONIFYIMAGE, GID_ICONIFY, &iconifyIcon );
-	 	open_icon( My_Window, POPUPIMAGE, GID_FULLSCREEN, &fullscreenicon );
-//	 	open_icon( My_Window, PADLOCKIMAGE, GID_PADLOCK, &padlockicon );
-	}
+				if (My_Window)
+				{
+					open_icon( My_Window, ICONIFYIMAGE, GID_ICONIFY, &iconifyIcon );
+					open_icon( My_Window, POPUPIMAGE, GID_FULLSCREEN, &fullscreenicon );
+//					open_icon( My_Window, PADLOCKIMAGE, GID_PADLOCK, &padlockicon );
+					RefreshWindowFrame(My_Window); // or it won't show/render added gadgets
+				}
 
 		}
 
@@ -645,8 +646,7 @@ static ULONG Open_Window()
 		My_Screen= NULL;
 	}
 
-
-		EmptyPointer = AllocVec(16, MEMF_PUBLIC | MEMF_CLEAR);
+	EmptyPointer = AllocVec(16, MEMF_PUBLIC | MEMF_CLEAR);
 
 	if ( !My_Window || !EmptyPointer)
 	{
@@ -655,7 +655,7 @@ static ULONG Open_Window()
 		if ( gfx_screenname )
 		{
 			free( gfx_screenname);
-			 gfx_screenname = NULL;	// open on workbench if no pubscreen found.
+			gfx_screenname = NULL;	// open on workbench if no pubscreen found.
 		}
 
 		uninit();
@@ -680,7 +680,7 @@ static ULONG Open_Window()
 }
 
 static ULONG Open_FullScreen()
-{ 
+{
 	// if fullscreen -> let's open our own screen
 	// It is not a very clean way to get a good ModeID, but at least it works
 	struct Screen *Screen;
@@ -698,7 +698,7 @@ static ULONG Open_FullScreen()
 	screen_width=amiga_image_width;
 	screen_height=amiga_image_height;
 
-	dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+	// DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	if(WantedModeID)
 	{
@@ -715,7 +715,6 @@ static ULONG Open_FullScreen()
 
 	if ( ModeID != INVALID_ID )
 	{
-
 		if (GetDisplayInfoData( NULL, &dimi, sizeof(dimi) , DTAG_DIMS, ModeID))
 		{
 			depth = ( FALSE ) ? 16 : dimi.MaxDepth ;
@@ -733,14 +732,14 @@ static ULONG Open_FullScreen()
 			SA_ShowTitle, FALSE,
 			SA_Quiet, 	TRUE,
 			SA_LikeWorkbench, TRUE,
-			TAG_DONE);
+		TAG_DONE);
 	}
 
-	 if ( ! My_Screen ) 
+	if ( ! My_Screen ) 
 	{
 		mp_msg(MSGT_VO, MSGL_ERR, "Unable to open the screen ID:%x\n", (int) ModeID);
-	  uninit();
-	  return INVALID_ID;
+		uninit();
+		return INVALID_ID;
 	}
 
 #ifdef PUBLIC_SCREEN
@@ -753,17 +752,15 @@ static ULONG Open_FullScreen()
 	offset_x = (screen_width - window_width)/2;
 	offset_y = (screen_height - window_height)/2;
 
-
 	/* Calculate the new video size/aspect */
 	aspect_save_screenres(My_Screen->Width,My_Screen->Height);
 
 	out_width = amiga_image_width;
 	out_height = amiga_image_height;
 
-   	aspect(&out_width,&out_height,A_ZOOM);
-
+	aspect(&out_width,&out_height,A_ZOOM);
 
-	dprintf("%s:%ld OpenWindowTags()  \n",__FUNCTION__,__LINE__);
+	// DBUG("%s:%ld OpenWindowTags()  \n",__FUNCTION__,__LINE__);
 
 	left=(My_Screen->Width-out_width)/2;
 	top=(My_Screen->Height-out_height)/2;
@@ -814,7 +811,7 @@ static ULONG Open_FullScreen()
 			WA_Activate,	TRUE,
 			WA_NewLookMenus,	TRUE,
 			WA_IDCMP,		IDCMP_MOUSEMOVE | IDCMP_MENUPICK | IDCMP_MENUVERIFY | IDCMP_MOUSEBUTTONS | IDCMP_RAWKEY | 
-						IDCMP_EXTENDEDMOUSE | IDCMP_REFRESHWINDOW | IDCMP_INACTIVEWINDOW | IDCMP_ACTIVEWINDOW,
+				IDCMP_EXTENDEDMOUSE | IDCMP_REFRESHWINDOW | IDCMP_INACTIVEWINDOW | IDCMP_ACTIVEWINDOW,
 			WA_Flags,		WFLG_REPORTMOUSE,
 			WINDOW_Position,	WPOS_CENTERSCREEN,
 // rem Samir no declaration port	WINDOW_IconifyGadget, port? TRUE: FALSE,
@@ -832,12 +829,12 @@ static ULONG Open_FullScreen()
 		return INVALID_ID;
 	}
 
-    SetWindowAttrs(My_Window,
-                               WA_Left,left,
-                               WA_Top,top,
-                               WA_Width,out_width,
-                               WA_Height,out_height,
-                               TAG_DONE);
+	SetWindowAttrs(My_Window,
+	               WA_Left,left,
+	               WA_Top,top,
+	               WA_Width,out_width,
+	               WA_Height,out_height,
+	              TAG_DONE);
 
 	RectFillColor( My_Window->RPort, 0,0, screen_width, screen_height, 0x00000000);
 
@@ -849,13 +846,13 @@ static ULONG Open_FullScreen()
 
 	vo_dwidth = amiga_image_width;
 	vo_dheight = amiga_image_height;
-	
+
 	vo_fs = 1;
 
 	gfx_ControlBlanker(My_Screen, FALSE);
 
 	return ModeID;
-} 
+}
 
 static int PrepareBuffer(uint32_t in_format, uint32_t out_format)
 {
@@ -889,7 +886,7 @@ static int config(uint32_t width, uint32
 
 	amiga_image_format = in_format; 
 
-	printf("vo_directrendering %d\n",vo_directrendering);
+	DBUG("vo_directrendering %d\n",vo_directrendering);
 
 	switch (gfx_common_rgb_format )
 	{
@@ -901,7 +898,6 @@ static int config(uint32_t width, uint32
 			gfx_common_rgb_format = PIXF_A8R8G8B8;
 	}
 
-
 	org_amiga_image_width = width;
 	org_amiga_image_height =height;
 
@@ -922,51 +918,51 @@ static int config(uint32_t width, uint32
 	ModeID = INVALID_ID;
 
 	MutexObtain( window_mx );
-	
-		if ( is_fullscreen )
-		{
-			dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
- 			ModeID = Open_FullScreen();
-		}
-		
-		if (ModeID == INVALID_ID)
-		{
-			is_fullscreen &= ~VOFLAG_FULLSCREEN;	// We do not have fullscreen
-			set_gfx_rendering_option();
 
-			ModeID = Open_Window();
-		}
+	if ( is_fullscreen )
+	{
+		// DBUG("%s:%ld\n",__FUNCTION__,__LINE__);
+		ModeID = Open_FullScreen();
+	}
 
-		if (My_Window)
-		{
-			attach_menu(My_Window);
-		}
+	if (ModeID == INVALID_ID)
+	{
+		is_fullscreen &= ~VOFLAG_FULLSCREEN;	// We do not have fullscreen
+		set_gfx_rendering_option();
 
-		if (!My_Window)
-		{
-			MutexRelease(window_mx);
-			uninit();
-			return -1;
-		}
+		ModeID = Open_Window();
+	}
 
-		if (the_bitmap)
-		{
-			Printf("%s:%ld -- Free BitMap here\n",__FUNCTION__,__LINE__);
-			FreeBitMap(the_bitmap);
-		}
+	if (My_Window)
+	{
+		attach_menu(My_Window);
+	}
 
-		the_bitmap = AllocBitMap( amiga_image_width , amiga_image_height,  32 , BMF_DISPLAYABLE, My_Window ->RPort -> BitMap);
+	if (!My_Window)
+	{
+		MutexRelease(window_mx);
+		uninit();
+		return -1;
+	}
 
-		alloc_output_buffer( org_amiga_image_width, org_amiga_image_height );
+	if (the_bitmap)
+	{
+		// DBUG("%s:%ld -- Free BitMap here\n",__FUNCTION__,__LINE__);
+		FreeBitMap(the_bitmap);
+	}
 
-		if (!output_ri.Memory)
-		{
-			Printf("******* Buffer not allocated :-(, some info bpp=%ld \n ", amiga_image_bpp);
-		}
+	the_bitmap = AllocBitMap( amiga_image_width , amiga_image_height,  32 , BMF_DISPLAYABLE, My_Window ->RPort -> BitMap);
+
+	alloc_output_buffer( org_amiga_image_width, org_amiga_image_height );
+
+	if (!output_ri.Memory)
+	{
+		mp_msg(MSGT_VO, MSGL_WARN, "******* Buffer not allocated :-(, some info bpp=%ld \n ", amiga_image_bpp);
+	}
 
-		rp = My_Window->RPort;
+	rp = My_Window->RPort;
 
-		UserMsg = My_Window->UserPort;
+	UserMsg = My_Window->UserPort;
 
 	MutexRelease(window_mx);
 
@@ -987,18 +983,16 @@ static int config(uint32_t width, uint32
 		default: 	fmt = IMGFMT_BGR32; break;
 	}
 
- 	if (PrepareBuffer(in_format, fmt ) < 0) 
+	if (PrepareBuffer(in_format, fmt ) < 0) 
 	{
 		uninit();
 		return -1;
 	}
 
-
-
 	gfx_Start(My_Window);
 
 #ifdef CONFIG_GUI
-    if (use_gui)
+	if (use_gui)
 		guiGetEvent(guiSetWindowPtr, (char *) My_Window);
 #endif
 
@@ -1010,23 +1004,19 @@ int pub_frame = 0;
 /******************************** DRAW_SLICE *****************************************/ 
 static int draw_slice(uint8_t *image[], int stride[], int w,int h,int x,int y)
 {
-
 	uint8_t *dst[3];
-  	int dstStride[3];
-
-
+	int dstStride[3];
 
 	MutexObtain( window_mx );
 
 	if (( amiga_image_width != w )&&(x==0) )
 	{
-		printf("%d,%d,%d,%d,%d\n",amiga_image_width,w,h,x,y);
+		DBUG("%d,%d,%d,%d,%d\n",amiga_image_width,w,h,x,y);
 
 		if (output_ri.Memory) { FreeVec(output_ri.Memory); output_ri.Memory = NULL; }
 		alloc_output_buffer( w, h );
 	}
 
-
 	dstStride[0] = org_amiga_image_width*amiga_image_bpp;
 	dstStride[1] = 0;
 	dstStride[2] = 0;
@@ -1066,7 +1056,7 @@ static void flip_page(void)
 	{
 		ww = My_Window->Width - My_Window->BorderLeft - My_Window->BorderRight;
 		wh = My_Window->Height - My_Window->BorderTop - My_Window->BorderBottom;
-	
+
 		if ((ww==amiga_image_width)&&(wh==amiga_image_height))	// no scaling so we dump it into the window.
 		{
 			if (gfx_novsync==0) WaitTOF();
@@ -1110,7 +1100,6 @@ static int draw_frame(uint8_t *src[])
 
 static void FreeGfx(void)
 {
-
 	gfx_ControlBlanker(My_Screen, TRUE);
 	gfx_Stop(My_Window);
 
@@ -1149,6 +1138,7 @@ static void FreeGfx(void)
 	}
 
 	if (inner_bitmap) { FreeBitMap(inner_bitmap);  inner_bitmap = NULL; }
+
 	MutexRelease(window_mx);
 }
 
@@ -1165,17 +1155,17 @@ static void uninit(void)
 	}
 	benchmark_frame_cnt = 0;
 
-dprintf("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
+DBUG("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
 	FreeGfx();
-dprintf("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
+DBUG("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
 	if (EmptyPointer)
 	{
-	  FreeVec(EmptyPointer);
-	  EmptyPointer=NULL;
+		FreeVec(EmptyPointer);
+		EmptyPointer=NULL;
 	}
-dprintf("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
+DBUG("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
 	gfx_ReleaseArg();
-dprintf("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
+DBUG("%s:%ld - rp is 0x%08lx \n",__FUNCTION__,__LINE__,rp);
 }
 
 /********************************** CONTROL ******************************************/
@@ -1184,27 +1174,26 @@ static int control(uint32_t request, voi
 	switch (request) 
 	{
 		case VOCTRL_GUISUPPORT:
-
 			return VO_TRUE;
 
 		case VOCTRL_FULLSCREEN:
-
 			is_fullscreen ^= VOFLAG_FULLSCREEN;
 			set_gfx_rendering_option();
 
 			FreeGfx();
 			if ( config(org_amiga_image_width, org_amiga_image_height, window_width, window_height, is_fullscreen, NULL, amiga_image_format) < 0) return VO_FALSE;
+
 			return VO_TRUE;
 
-	        case VOCTRL_ONTOP:
+		case VOCTRL_ONTOP:
 			vo_ontop = !vo_ontop;
 			is_ontop = !is_ontop;
-                        FreeGfx(); // Free/Close all gfx stuff (screen windows, buffer...);
-                        if ( config(amiga_image_width, amiga_image_height, window_width, window_height, FALSE, NULL, amiga_image_format) < 0) return VO_FALSE;
+			FreeGfx(); // Free/Close all gfx stuff (screen windows, buffer...);
+			if ( config(amiga_image_width, amiga_image_height, window_width, window_height, FALSE, NULL, amiga_image_format) < 0) return VO_FALSE;
+
 			return VO_TRUE;
 
 		case VOCTRL_PAUSE:
-
 			gfx_Stop(My_Window);
 			if (rp) InstallLayerHook(rp->Layer, &BackFill_Hook);
 
@@ -1213,10 +1202,9 @@ static int control(uint32_t request, voi
 			is_paused = is_paused ? FALSE : TRUE;
 
 			BackFill_Func( My_Window -> RPort, NULL );
-			return VO_TRUE;					
+			return VO_TRUE;
 
 		case VOCTRL_RESUME:
-
 			gfx_Start(My_Window);
 
 			if (rp) InstallLayerHook(rp->Layer, NULL );
@@ -1235,7 +1223,7 @@ static int control(uint32_t request, voi
 //		case VOCTRL_GET_IMAGE:
 //			return get_image(data);
 	}
-  
+
 	return VO_NOTIMPL;
 }
 
diff --color -rupN old/libvo/vo_comp_yuv2.c new/libvo/vo_comp_yuv2.c
--- old/libvo/vo_comp_yuv2.c	2023-08-07 15:42:30.000000000 +0200
+++ new/libvo/vo_comp_yuv2.c	2023-08-29 15:33:56.000000000 +0200
@@ -78,13 +78,14 @@ extern int benchmark;
 
 #include <inttypes.h>		// Fix <postproc/rgb2rgb.h> bug
 
-#define debug_level 0
+/*#define debug_level 0
 
 #if debug_level > 0
 #define dprintf( ... ) IDOS->Printf( __VA_ARGS__ )
 #else
 #define dprintf(...) 
-#endif
+#endif*/
+#include "../amigaos/debug.h"
 
 static int32 vo_format = 0;
 
@@ -146,6 +147,9 @@ static ULONG sig_vo_closewindow = 0;
 static ULONG sig_vo_events = 0;
 static ULONG ModeID;
 static ULONG arg_d_width,arg_d_height;
+
+extern uint32 AppID;
+extern struct MsgPort *applibPort;
 // ------------------------------------
 
 static void StartVOProcess( void );
@@ -225,7 +229,7 @@ static void  alloc_output_buffer( uint32
 	org_amiga_image_width = width;
 	org_amiga_image_height = height;
 
-//	printf("%s:%d - format %d\n",__FUNCTION__,__LINE__,format);
+//IDBUG("%s:%d - format %d\n",__FUNCTION__,__LINE__,format);
 
 #ifdef __copy_to_vram__
 
@@ -253,7 +257,7 @@ static void  alloc_output_buffer( uint32
 
 #endif
 
-//	printf("%s:%d - format %d\n",__FUNCTION__,__LINE__,format);
+//IDBUG("%s:%d - format %d\n",__FUNCTION__,__LINE__,format);
 
 	vram_bitmap = IGraphics->AllocBitMapTags(width, height , 32,
 					BMATags_Displayable, TRUE,
@@ -261,14 +265,13 @@ static void  alloc_output_buffer( uint32
 					TAG_DONE);
 
 	hookData.srcBitMap = vram_bitmap;
-
 }
 
 static void free_output_buffer( void )
 {
 	int n;
 
-//	printf("%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__);
+//IDBUG("%s:%s:%d\n",__FILE__,__FUNCTION__,__LINE__);
 
 	for (n=0;n<num_buffers;n++)
 	{
@@ -319,7 +322,7 @@ static void no_clip_composite(struct Ras
 		COMPTAG_SrcWidth,   hookData.srcWidth,
 		COMPTAG_SrcHeight,  hookData.srcHeight,
 		COMPTAG_ScaleX,     hookData.scaleX,
-		COMPTAG_ScaleY, 	  hookData.scaleY,
+		COMPTAG_ScaleY,     hookData.scaleY,
 		COMPTAG_OffsetX,    My_Window->LeftEdge,
 		COMPTAG_OffsetY,    My_Window->TopEdge,
 		COMPTAG_DestX,      My_Window->LeftEdge,
@@ -327,7 +330,7 @@ static void no_clip_composite(struct Ras
 		COMPTAG_DestWidth,  My_Window->Width,
 		COMPTAG_DestHeight, My_Window->Height,
 		COMPTAG_Flags,      COMPFLAG_SrcFilter | COMPFLAG_IgnoreDestAlpha | COMPFLAG_HardwareOnly,
-		TAG_END);
+	TAG_END);
 }
 
 static ULONG compositeHookFunc(struct Hook *hook, struct RastPort *rastPort, struct BackFillMessage *msg) {
@@ -337,8 +340,8 @@ static ULONG compositeHookFunc(struct Ho
 		COMPOSITE_Src_Over_Dest, hookData->srcBitMap, rastPort->BitMap,
 		COMPTAG_SrcWidth,   hookData->srcWidth,
 		COMPTAG_SrcHeight,  hookData->srcHeight,
-		COMPTAG_ScaleX, 	  hookData->scaleX,
-		COMPTAG_ScaleY, 	  hookData->scaleY,
+		COMPTAG_ScaleX,     hookData->scaleX,
+		COMPTAG_ScaleY,     hookData->scaleY,
 		COMPTAG_OffsetX,    msg->Bounds.MinX - (msg->OffsetX - hookData->offsetX),
 		COMPTAG_OffsetY,    msg->Bounds.MinY - (msg->OffsetY - hookData->offsetY),
 		COMPTAG_DestX,      msg->Bounds.MinX,
@@ -346,22 +349,22 @@ static ULONG compositeHookFunc(struct Ho
 		COMPTAG_DestWidth,  msg->Bounds.MaxX - msg->Bounds.MinX + 1,
 		COMPTAG_DestHeight, msg->Bounds.MaxY - msg->Bounds.MinY + 1,
 		COMPTAG_Flags,      COMPFLAG_SrcFilter | COMPFLAG_IgnoreDestAlpha | COMPFLAG_HardwareOnly,
-		TAG_END);
+	TAG_END);
 
 	return 0;
 }
 
 static void set_target_hookData( void )
 {
- 	rect.MinX = My_Window->BorderLeft;
- 	rect.MinY = My_Window->BorderTop;
- 	rect.MaxX = My_Window->Width - My_Window->BorderRight - 1;
- 	rect.MaxY = My_Window->Height - My_Window->BorderBottom - 1;
-
- 	float destWidth = rect.MaxX - rect.MinX + 1;
- 	float destHeight = rect.MaxY - rect.MinY + 1;
- 	float scaleX = (destWidth + 0.5f) / amiga_image_width;
- 	float scaleY = (destHeight + 0.5f) / amiga_image_height;
+	rect.MinX = My_Window->BorderLeft;
+	rect.MinY = My_Window->BorderTop;
+	rect.MaxX = My_Window->Width - My_Window->BorderRight - 1;
+	rect.MaxY = My_Window->Height - My_Window->BorderBottom - 1;
+
+	float destWidth = rect.MaxX - rect.MinX + 1;
+	float destHeight = rect.MaxY - rect.MinY + 1;
+	float scaleX = (destWidth + 0.5f) / amiga_image_width;
+	float scaleY = (destHeight + 0.5f) / amiga_image_height;
 
 	hookData.srcWidth = amiga_image_width;
 	hookData.srcHeight = amiga_image_height;
@@ -502,9 +505,7 @@ static int preinit(const char *arg)
 		return -1;	
 	}
 
-	printf("gfx_nodri = %d\n",(int) gfx_nodri);
-
-
+//IDBUG("gfx_nodri = %d\n",(int) gfx_nodri);
 	if (gfx_nodri==1)
 	{
 		vo_directrendering = 0;
@@ -526,7 +527,7 @@ static int preinit(const char *arg)
 		IGraphics->GetDisplayInfoData( NULL, &display_info, sizeof(display_info) , DTAG_DISP, DisplayID);
 		IGraphics->GetBoardDataTags( display_info.RTGBoardNum, GBD_ChipDriver, &ChipDriverName, TAG_END);
 
-                if (strcasecmp(ChipDriverName,"RadeonHD.chip") == 0 || strcasecmp(ChipDriverName,"RadeonRX.chip") == 0)
+		if (strcasecmp(ChipDriverName,"RadeonHD.chip") == 0 || strcasecmp(ChipDriverName,"RadeonRX.chip") == 0)
 		{
 			have_radeonhd = TRUE;
 		}
@@ -535,18 +536,18 @@ static int preinit(const char *arg)
 
 // IGraphics->AllocBitMap( 200 , 200, 32, BMF_DISPLAYABLE, &the_screen -> BitMap)
 
-		if (test_bitmap =  IGraphics->AllocBitMapTags(200, 200  , 32,	
+		if (test_bitmap =  IGraphics->AllocBitMapTags(200, 200, 32,
 							BMATags_Displayable, TRUE,	
 							BMATags_PixelFormat, PIXF_YUV420P, 
-							BMATags_Friend, &the_screen -> BitMap,
-							TAG_DONE))
+							BMATags_Friend,      &the_screen -> BitMap,
+						TAG_DONE))
 		{
 			have_bitmap_format = TRUE;
 
 			if ( COMPERR_Success == IGraphics->CompositeTags(
 					COMPOSITE_Src, test_bitmap, test_bitmap,
-					COMPTAG_Flags,      COMPFLAG_SrcFilter | COMPFLAG_IgnoreDestAlpha | COMPFLAG_HardwareOnly,
-					TAG_END))
+					COMPTAG_Flags, COMPFLAG_SrcFilter | COMPFLAG_IgnoreDestAlpha | COMPFLAG_HardwareOnly,
+				TAG_END))
 			{
 				have_compositing = TRUE;
 			}
@@ -575,13 +576,13 @@ static int preinit(const char *arg)
 		return -1;
 	}
 
-	printf("gfx_novsync = %d\n", (int) gfx_novsync);
-	printf("Benchmark = %d\n", benchmark);
+//IDBUG("gfx_novsync = %d\n", (int) gfx_novsync);
+//IDBUG("Benchmark = %d\n", benchmark);
 
 	vsync_is_enabled = ((benchmark == 0) && (gfx_novsync == 0)) ? 1 : 0;
 	vo_vsync = vsync_is_enabled;
 
-	printf("Vsync is enabled = %d\n", (int) vsync_is_enabled);
+//IDBUG("Vsync is enabled = %d\n", (int) vsync_is_enabled);
 
 	benchmark_frame_cnt = 0;
 	gettimeofday(&before,&dontcare);		// To get time before
@@ -604,7 +605,7 @@ static ULONG Open_Window()
 
 	My_Window = NULL;
 
-//	dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+//IDBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	if ( ( the_screen = IIntuition->LockPubScreen ( gfx_screenname ) ) )
 	{
@@ -620,12 +621,10 @@ static ULONG Open_Window()
 		}
 		else
 		{
-			printf("Screen w %d h %d aspect %0.2f:1\n", the_screen -> Width, the_screen -> Height, (float) the_screen -> Width / (float) the_screen -> Height);
+			printf("Screen %d x %d aspect %0.2f:1\n", the_screen -> Width, the_screen -> Height, (float) the_screen -> Width / (float) the_screen -> Height);
 			best_screen_aspect_ratio = (float) the_screen -> Width / (float) the_screen -> Height;
 		}
 
-
-
 		if (FirstTime)
 		{
 			gfx_center_window(the_screen, window_width, window_height, &win_left, &win_top);
@@ -662,7 +661,7 @@ static ULONG Open_Window()
 			case TINYBORDER:
 				My_Window = IIntuition->OpenWindowTags( NULL,
 #ifdef PUBLIC_SCREEN
-					WA_PubScreen,	(ULONG) the_screen,
+					WA_PubScreen,	(ULONG) the_screen,
 #else
 					WA_CustomScreen,	(ULONG) the_screen,//My_Screen,
 #endif
@@ -682,7 +681,7 @@ static ULONG Open_Window()
 					WA_IDCMP,		IDCMP_COMMON,
 					WA_Flags,		WFLG_REPORTMOUSE,
 					// WA_SkinInfo,	NULL,
-					TAG_DONE);	
+				TAG_DONE);	
 				break;
 
 			default:
@@ -695,7 +694,8 @@ static ULONG Open_Window()
 					// #ifdef __amigaos4__
 					// WA_Title,	"MPlayer " VERSION " (comp_yuv2)",
 					// #endif
-                        	WA_ScreenTitle,	AMIGA_VERSION " (comp_yuv2)",
+					WA_ScreenTitle,	AMIGA_VERSION " (comp_yuv2)",
+					WA_Title,		(ULONG) GetWindowTitle(),
 #ifdef PUBLIC_SCREEN
 					WA_PubScreen,	(ULONG) the_screen,
 #else
@@ -723,17 +723,17 @@ static ULONG Open_Window()
 					WA_IDCMP,		IDCMP_COMMON | IDCMP_GADGETUP,
 					WA_Flags,		WFLG_REPORTMOUSE,
 					// WA_SkinInfo,	NULL,
-					TAG_DONE);
+				TAG_DONE);
 		}
 
 // markus gadget
-	if (My_Window)
-	{
-	 	open_icon( My_Window, ICONIFYIMAGE, GID_ICONIFY, &iconifyIcon );
-	 	open_icon( My_Window, POPUPIMAGE, GID_FULLSCREEN, &fullscreenicon );
-//	 	open_icon( My_Window, PADLOCKIMAGE, GID_PADLOCK, &padlockicon );
-	 	IIntuition->RefreshWindowFrame(My_Window); // or it won't show/render added gadgets
-	}
+		if (My_Window)
+		{
+			open_icon( My_Window, ICONIFYIMAGE, GID_ICONIFY, &iconifyIcon );
+			open_icon( My_Window, POPUPIMAGE, GID_FULLSCREEN, &fullscreenicon );
+//			open_icon( My_Window, PADLOCKIMAGE, GID_PADLOCK, &padlockicon );
+			IIntuition->RefreshWindowFrame(My_Window); // or it won't show/render added gadgets
+		}
 
 		vo_fs = 0;
 
@@ -743,7 +743,6 @@ static ULONG Open_Window()
 		IIntuition->UnlockPubScreen(NULL, the_screen);
 	}
 
-
 		EmptyPointer = IExec->AllocVec(16, MEMF_PUBLIC | MEMF_CLEAR);
 
 	if ( !My_Window || !EmptyPointer)
@@ -840,14 +839,14 @@ static ULONG Open_FullScreen()
 
 	 if ( ! the_screen ) 
 	{
-		mp_msg(MSGT_VO, MSGL_ERR, "Unable to open the screen ID:%x\n", (int) ModeID);
+		mp_msg(MSGT_VO, MSGL_ERR, "Unable to open the screen ID:0x%x\n", (int) ModeID);
 		uninit();
 		return INVALID_ID;
 	}
 
 	is_my_screen = TRUE;
 
-	dprintf("%s:%ld\n",__FUNCTION__,__LINE__);
+//IDBUG("%s:%ld\n",__FUNCTION__,__LINE__);
 
 	vo_screenwidth = the_screen -> Width;
 	vo_screenheight = the_screen -> Height;
@@ -861,7 +860,7 @@ static ULONG Open_FullScreen()
 	out_width = amiga_image_width;
 	out_height = amiga_image_height;
 
-   	aspect(&out_width,&out_height,A_ZOOM);
+	aspect(&out_width,&out_height,A_ZOOM);
 
 	left=(the_screen->Width-out_width)/2;
 	top=(the_screen->Height-out_height)/2;
@@ -912,7 +911,7 @@ static ULONG Open_FullScreen()
 
 	IIntuition->SetWindowAttrs(My_Window, WA_Left,left, WA_Top,top, WA_Width,out_width, WA_Height,out_height, TAG_DONE);
 
-	IDOS->Printf("Screen w %ld h %ld\n",the_screen->Width,the_screen->Height);
+IDBUG("Screen w %ld h %ld\n",the_screen->Width,the_screen->Height);
 
 	vo_fs = 1;
 
@@ -952,12 +951,11 @@ static int PrepareBuffer(uint32_t in_for
 			break;
 */
 		default:
-
-			IDOS->Printf("\n\nSorry not supported video mode\n\n\n");
+			mp_msg(MSGT_VO, MSGL_ERR, "\n\nSorry not supported video mode\n\n\n");
 			vo_format = 0;
 			gfx_common_rgb_format = 0;
 			draw_alpha_func = NULL;
-	} 
+	}
 
 	return 0;
 }
@@ -1227,8 +1225,7 @@ static void copy_I420P_to_yuv420p(uint8_
 		copy_plain(y,amiga_image_width, h,image[0],stride[0], yuvInfo.YMemory,yuvInfo.YBytesPerRow);
 //		copy_plain_i420(y,amiga_image_width, h,image[1],stride[1], yuvInfo.UMemory,yuvInfo.UBytesPerRow);
 
-		printf("%d - %d - %d\n",((uint) yuvInfo.VMemory) - ((uint) yuvInfo.UMemory) , amiga_image_width / 2, stride[1] );
-
+IDBUG("%d - %d - %d\n",((uint) yuvInfo.VMemory) - ((uint) yuvInfo.UMemory) , amiga_image_width / 2, stride[1] );
 
 //		copy_plain_half(y,amiga_image_width, h,image[1],stride[1], yuvInfo.UMemory,yuvInfo.UBytesPerRow);
 //		copy_plain_half(y,amiga_image_width, h,image[2],stride[2], yuvInfo.VMemory,yuvInfo.VBytesPerRow);
@@ -1243,14 +1240,15 @@ static void copy_yv12_to_yuv420p(uint8_t
 	struct PlanarYUVInfo yuvInfo;
 	APTR lock;
 
-if (gfx_nodma==FALSE)
-{
-	if (!ram_bitmap[current_buf]) return;
-	lock = IGraphics->LockBitMapTags(ram_bitmap[current_buf],	LBM_PlanarYUVInfo, &yuvInfo,	TAG_END);
-} else {
-	if (!vram_bitmap) return;
-	lock = IGraphics->LockBitMapTags(vram_bitmap,	LBM_PlanarYUVInfo, &yuvInfo,	TAG_END);
-}
+	if (gfx_nodma==FALSE)
+	{
+		if (!ram_bitmap[current_buf]) return;
+		lock = IGraphics->LockBitMapTags(ram_bitmap[current_buf],	LBM_PlanarYUVInfo, &yuvInfo,	TAG_END);
+	}
+	else {
+		if (!vram_bitmap) return;
+		lock = IGraphics->LockBitMapTags(vram_bitmap,	LBM_PlanarYUVInfo, &yuvInfo,	TAG_END);
+	}
 
 	if (lock != NULL)
 	{
@@ -1357,7 +1355,7 @@ static void FreeGfx(void)
 	gfx_ControlBlanker(the_screen, TRUE);
 	gfx_Stop(My_Window);
 
-	dprintf("%s:%s:%ld\n",__FILE__,__FUNCTION__,__LINE__);
+//IDBUG("%s:%s:%ld\n",__FILE__,__FUNCTION__,__LINE__);
 
 	if (vo_process)
 	{
@@ -1365,7 +1363,7 @@ static void FreeGfx(void)
 		IExec->Wait(SIGF_CHILD);	// Wait for process to signal to continue
 	}
 
-	dprintf("%s:%s:%ld\n",__FILE__,__FUNCTION__,__LINE__);
+//IDBUG("%s:%s:%ld\n",__FILE__,__FUNCTION__,__LINE__);
 }
 
 /****************************** UNINIT ******************************/
@@ -1652,7 +1650,12 @@ static void voprocess()
 	sig_vo_closewindow = IExec->AllocSignal(-1);
 	sig_vo_events = IExec->AllocSignal(-1);
 
-	sigs = 1L <<sig_vo_pageflip | 1L <<sig_vo_openwindow | 1L << sig_vo_closewindow | 1L << sig_vo_events | 1L << sig_vo_osd | SIGBREAKF_CTRL_C;
+	sigs = 1L << sig_vo_pageflip | 1L << sig_vo_openwindow | 1L << sig_vo_closewindow | 1L << sig_vo_events | 1L << sig_vo_osd | SIGBREAKF_CTRL_C;
+
+	if(AppID) // application.library messsage port
+	{
+		sigs |= 1L << applibPort->mp_SigBit;
+	}
 
 	IExec->Signal( &MainTask->pr_Task, SIGF_CHILD );
 
@@ -1663,12 +1666,18 @@ static void voprocess()
 
 		if (rsigs & SIGBREAKF_CTRL_C) break;
 
+		// "application.library"
+		if(!is_fullscreen  &&  AppID  &&  (rsigs & (1L<<applibPort->mp_SigBit)) )
+		{
+			AmigaOS_do_applib(My_Window, rsigs);
+		}
+
 		if (rsigs & (1<<sig_vo_openwindow))
 		{
 			if ( is_fullscreen )
 			{
 				amiga_aspect_ratio = (float) arg_d_width /  (float) arg_d_height;
- 				ModeID = Open_FullScreen();
+				ModeID = Open_FullScreen();
 			}
 		
 			if (ModeID == INVALID_ID)				// So if vo failed to open on monitor
@@ -1684,7 +1693,7 @@ static void voprocess()
 					window_width = arg_d_width ;
 					window_height = arg_d_height;
 
-				   	aspect(&window_width,&window_height,A_NOZOOM);
+					aspect(&window_width,&window_height,A_NOZOOM);
 
 					if ((window_width < 15)|| ( window_height < 15))
 					{
@@ -1704,7 +1713,6 @@ static void voprocess()
 				set_target_hookData();
 			}
 
-
 			IExec->Signal( &MainTask->pr_Task, SIGF_CHILD );	// Confirm done
 		}
 
@@ -1786,16 +1794,14 @@ static void voprocess()
 		}
 	}
 
-	IDOS->Printf("Free Signals\n");
-
+	IDBUG("Free Signals\n");
 	IExec->FreeSignal(sig_vo_osd);
 	IExec->FreeSignal(sig_vo_pageflip);
 	IExec->FreeSignal(sig_vo_openwindow);
 	IExec->FreeSignal(sig_vo_closewindow);
 	IExec->FreeSignal(sig_vo_events);
 
-	IDOS->Printf("Confirm quit\n");
-
+	IDBUG("Confirm quit\n");
 	IExec->Signal( &MainTask->pr_Task, SIGF_CHILD );	// Confirm quit
 }
 
@@ -1810,7 +1816,7 @@ static void StartVOProcess()
 				// NP_Output,	output,
 				NP_Priority,	20, 
 				NP_Child,		TRUE,
-				TAG_END);
+			TAG_END);
 
 	IExec->Wait(SIGF_CHILD);
 }
diff --color -rupN old/libvo/vo_gl.c new/libvo/vo_gl.c
--- old/libvo/vo_gl.c	2023-08-07 15:09:04.000000000 +0200
+++ new/libvo/vo_gl.c	2023-08-28 16:30:52.000000000 +0200
@@ -73,6 +73,7 @@ const LIBVO_EXTERN(gl_nosw)
 #undef preinit
 
 // markus
+#include "../amigaos/debug.h"
 static char * window_title;
 extern char * filename;
 
@@ -93,6 +94,12 @@ static char *GetWindowTitle(void)
 }
 // end markus
 
+
+extern void AmigaOS_do_appwindow(void);
+extern struct Window *AmigaOS_GetSDLWindowPtr(void);
+extern void AmigaOS_do_applib(struct Window *w);
+
+
 static MPGLContext glctx;
 
 static int use_osd;
@@ -733,9 +740,6 @@ config(uint32_t width, uint32_t height,
     return -1;
 //samir
 #ifdef __AMIGAOS4__
-  //mp_msg(MSGT_VO, MSGL_INFO, "[AMIGAOS4]title: '%s'\n",title);
-  //mp_msg(MSGT_VO, MSGL_INFO, "[AMIGAOS4]window_title: '%s'\n",window_title);
-  //SDL_WM_SetCaption (AMIGA_VERSION " (gl)", window_title);
   SDL_WM_SetCaption (GetWindowTitle(), title);
 #endif
 //
@@ -759,12 +763,23 @@ config(uint32_t width, uint32_t height,
 static void check_events(void)
 {
     int e=glctx.check_events();
+
     if(e&VO_EVENT_REINIT) {
         uninitGl();
         initGl();
     }
     if(e&VO_EVENT_RESIZE) resize();
     else if(e&VO_EVENT_EXPOSE) redraw();
+
+#if defined(__AMIGAOS4__)
+	AmigaOS_do_appwindow();
+//DBUG("Fullscreen = 0x%08lx\n",vo_fs);
+	// "application.library"
+	if( !vo_fs )
+	{
+		AmigaOS_do_applib(AmigaOS_GetSDLWindowPtr());
+	}
+#endif
 }
 
 /**
diff --color -rupN old/libvo/vo_matrixview.c new/libvo/vo_matrixview.c
--- old/libvo/vo_matrixview.c	2023-08-01 19:50:06.000000000 +0200
+++ new/libvo/vo_matrixview.c	2023-08-28 16:31:34.000000000 +0200
@@ -85,6 +85,7 @@ static void contrast_set(int value)
 }
 
 // markus
+#include "../amigaos/debug.h"
 static char * window_title;
 extern char * filename;
 
@@ -105,6 +106,11 @@ static char *GetWindowTitle(void)
 }
 // end markus
 
+extern void AmigaOS_do_appwindow(void);
+extern struct Window *AmigaOS_GetSDLWindowPtr(void);
+extern void AmigaOS_do_applib(struct Window *w);
+
+
 static void brightness_set(int value)
 {
     float brightness = value * BRIGHTNESS_MULTIPLIER + DEFAULT_BRIGHTNESS;
@@ -136,8 +142,6 @@ static int config(uint32_t width, uint32
 
 #ifdef __AMIGAOS4__
 SDL_WM_SetCaption (GetWindowTitle(), title);
-//mp_msg(MSGT_VO, MSGL_INFO, "[AMIGAOS4] (matrixview) title: '%s'\n",title);
-//mp_msg(MSGT_VO, MSGL_INFO, "[AMIGAOS4] (matrixview) window_title: '%s'\n",window_title);
 #endif
 
     if (glctx.setGlWindow(&glctx) == SET_WINDOW_FAILED)
@@ -179,6 +183,16 @@ static void check_events(void)
         resize();
     } else if (e & VO_EVENT_EXPOSE)
         flip_page();
+
+#if defined(__AMIGAOS4__)
+	AmigaOS_do_appwindow();
+//DBUG("Fullscreen = 0x%08lx\n",vo_fs);
+	// "application.library"
+	if( !vo_fs )
+	{
+		AmigaOS_do_applib(AmigaOS_GetSDLWindowPtr());
+	}
+#endif
 }
 
 
diff --color -rupN old/libvo/vo_p96pip.c new/libvo/vo_p96pip.c
--- old/libvo/vo_p96pip.c	2023-08-08 15:08:50.000000000 +0200
+++ new/libvo/vo_p96pip.c	2023-08-22 01:23:04.000000000 +0200
@@ -429,7 +429,7 @@ static ULONG Open_PIPWindow(void)
 			// WA_ScreenTitle,	(ULONG) GetWindowTitle(),
 			// WA_Title,		"MPlayer " VERSION " (p96_pip)",
 			// end old
-                  WA_ScreenTitle,		AMIGA_VERSION " (p96_pip)",
+			WA_ScreenTitle,		AMIGA_VERSION " (p96_pip)",
 			WA_Title,			(ULONG) GetWindowTitle(),
 			WA_Left,			win_left,
 			WA_Top,			win_top,
@@ -573,7 +573,7 @@ static ULONG GoFullScreen(void)
 #else
                       	WA_CustomScreen,		(ULONG) the_screen,
 #endif
-                      	WA_ScreenTitle,		(ULONG) "MPlayer ",
+                      	WA_ScreenTitle,		AMIGA_VERSION " (p96_pip)",
                       	WA_SmartRefresh,		TRUE,
                       	WA_CloseGadget,		FALSE,
                       	WA_DepthGadget,		FALSE,
diff --color -rupN old/libvo/vo_pip.c new/libvo/vo_pip.c
--- old/libvo/vo_pip.c	2023-08-07 15:45:48.000000000 +0200
+++ new/libvo/vo_pip.c	2023-08-22 00:25:16.000000000 +0200
@@ -188,8 +188,10 @@ static void Close_Window(void)
 {
    if (My_Window)
    {
-      ClearMenuStrip(My_Window);
-         p96PIP_Close(My_Window);
+detach_menu(My_Window);
+
+      //ClearMenuStrip(My_Window);
+      p96PIP_Close(My_Window);
       My_Window = NULL;
    }
 }
@@ -198,20 +200,18 @@ struct Screen * My_Screen = NULL;
 
 static uint32 Open_Window(uint32 hidden)
 {
+	static struct IBox zoombox = {0, 0, 9999, 9999};
    ModeID = INVALID_ID;
 
    if ((My_Screen = LockPubScreen(NULL)))
    {
       ModeID = GetVPModeID(&My_Screen->ViewPort);
 
-
 		if (FirstTime)
 		{
 			gfx_center_window(My_Screen, window_width, window_height, &win_left, &win_top);
 		}
 
-	static struct IBox zoombox = {0, 0, 9999, 9999};
-
 	zoombox.Width  = My_Screen->Width;
 	zoombox.Height = My_Screen->Height;
 	{
@@ -404,13 +404,19 @@ static int config(uint32_t width, uint32
    window_height = d_height;
 
    amiga_aspect_ratio = (float) d_width /  (float) d_height;
-   
+
    vo_fs = VO_FALSE;
 
    window_width = d_width;
    window_height = d_height;
 
    ModeID = Open_Window(FALSE);
+
+if(My_Window)
+{
+attach_menu(My_Window);
+}
+
    if (INVALID_ID == ModeID)
    {
       return VO_ERROR;
@@ -668,14 +674,14 @@ static void gfxcopy_420P_422CGX(uint8 *s
 /***************************** FLIP_PAGE ****************************/
 static void flip_page(void)
 {
+   uint32 numbuffers = 0, WorkBuf/*, DispBuf*/;
+
    if (!My_Window)
    {
       mp_msg(MSGT_VO, MSGL_ERR, "[pip] No window.\n");
       return;
    }
 
-      uint32 numbuffers = 0, WorkBuf/*, DispBuf*/;
-
       p96PIP_GetTags(My_Window, P96PIP_NumberOfBuffers, &numbuffers,  P96PIP_WorkBuffer, &WorkBuf, TAG_DONE);
 
       if (numbuffers > 1)
diff --color -rupN old/libvo/vo_sdl.c new/libvo/vo_sdl.c
--- old/libvo/vo_sdl.c	2023-08-01 08:28:43.000000000 +0200
+++ new/libvo/vo_sdl.c	2023-08-28 20:40:10.000000000 +0200
@@ -87,6 +87,7 @@ static const vo_info_t info =
 };
 
 // markus
+#include "../amigaos/debug.h"
 static char * window_title;
 extern char * filename;
 
@@ -107,6 +108,12 @@ static char *GetWindowTitle(void)
 }
 // end markus
 
+
+extern void AmigaOS_do_appwindow(void);
+extern struct Window *AmigaOS_GetSDLWindowPtr(void);
+extern void AmigaOS_do_applib(struct Window *w);
+
+
 const LIBVO_EXTERN(sdl)
 
 #include "sdl_common.h"
@@ -947,6 +954,7 @@ static void check_events (void)
 
 	/* Poll the waiting SDL Events */
 	while ( SDL_PollEvent(&event) ) {
+//DBUG("event.type = 0x%08lx\n",event.type);
 		switch (event.type) {
 
 			/* capture window resize events */
@@ -998,9 +1006,27 @@ static void check_events (void)
                                 else sdl_default_handle_event(&event);
 
 				break;
+
+
+case SDL_SYSWMEVENT:
+case SDL_USEREVENT:
+DBUG("0x%08lX or 0x%08lX\n",SDL_SYSWMEVENT,SDL_USEREVENT);
+break;
+
+
 			default: sdl_default_handle_event(&event); break;
 		}
 	}
+
+#if defined(__AMIGAOS4__)
+	AmigaOS_do_appwindow();
+//DBUG("Fullscreen = 0x%08lx (0x%08lx)\n",vo_fs,AmigaOS_GetSDLWindowPtr());
+	// "application.library"
+	if( !vo_fs )
+	{
+		AmigaOS_do_applib(AmigaOS_GetSDLWindowPtr());
+	}
+#endif
 }
 
 /* Erase (paint it black) the rectangle specified by x, y, w and h in the surface
@@ -1238,6 +1264,7 @@ uninit(void)
 		vo_x11_uninit();
 	}
 #endif
+
 	sdl_close();
 
 	/* Cleanup SDL */
diff --color -rupN old/libvo/vo_sdl_sm502.c new/libvo/vo_sdl_sm502.c
--- old/libvo/vo_sdl_sm502.c	2023-08-03 18:58:29.000000000 +0200
+++ new/libvo/vo_sdl_sm502.c	2023-08-28 18:42:04.000000000 +0200
@@ -80,6 +80,7 @@
 #include "subopt-helper.h"
 
 // markus
+#include "../amigaos/debug.h"
 static char * window_title;
 extern char * filename;
 
@@ -100,6 +101,12 @@ static char *GetWindowTitle(void)
 }
 // end markus
 
+
+extern void AmigaOS_do_appwindow(void);
+extern struct Window *AmigaOS_GetSDLWindowPtr(void);
+extern void AmigaOS_do_applib(struct Window *w);
+
+
 static const vo_info_t info =
 {
 //	"SDL YUV/RGB/BGR renderer (SDL v1.1.7+ only!)",
@@ -979,6 +986,16 @@ static void check_events (void)
 			default: sdl_default_handle_event(&event); break;
 		}
 	}
+
+#if defined(__AMIGAOS4__)
+	AmigaOS_do_appwindow();
+//DBUG("Fullscreen = 0x%08lx\n",vo_fs);
+	// "application.library"
+	if( !(priv->surface->flags & SDL_FULLSCREEN) )
+	{
+		AmigaOS_do_applib(AmigaOS_GetSDLWindowPtr());
+	}
+#endif
 }
 
 /* Erase (paint it black) the rectangle specified by x, y, w and h in the surface
diff --color -rupN old/locale/italian/MPlayer.ct new/locale/italian/MPlayer.ct
--- old/locale/italian/MPlayer.ct	2023-08-04 23:01:00.000000000 +0200
+++ new/locale/italian/MPlayer.ct	2023-08-29 16:40:00.000000000 +0200
@@ -1,4 +1,4 @@
-## version $VER: MPlayer.catalog 1.5.0 (4.08.2023)
+## version $VER: MPlayer.catalog 1.5.0 (29.08.2023)
 ## codeset 0
 ## language italiano
 ## chunk AUTH Translated by Samir Hawamdeh (http://www.betatesting.it/backforthefuture)
@@ -11,47 +11,39 @@
 ;
 ; Traduzione italiana di MPlayer
 ;
-MSG_About_About
-Informazioni
-; About
-;
-MSG_About_Licence
-Licenza
-; Licence
-;
-MSG_Menu_MPlayer
+MSG_Menu_Project
 Progetto
-; MPlayer
+; Project
 ;
-MSG_Menu_MPlayer_LoadFile
+MSG_Menu_Project_OpenFile
 Apri file...
-; Load file...
+; Open file...
 ;
-MSG_Menu_MPlayer_OpenDVD
+MSG_Menu_Project_OpenDVD
 Apri DVD...
 ; Open DVD...
 ;
-MSG_Menu_MPlayer_OpenDVDNAV
+MSG_Menu_Project_OpenDVDNAV
 Apri DVDNAV...
 ; Open DVDNAV...
 ;
-MSG_Menu_MPlayer_OpenVCD
+MSG_Menu_Project_OpenVCD
 Apri VCD...
 ; Open VCD...
 ;
-MSG_Menu_MPlayer_OpenNetwork
+MSG_Menu_Project_OpenNetwork
 Apri stream...
-; Open a stream...
+; Open stream...
 ;
-MSG_Menu_MPlayer_Iconify
+MSG_Menu_Project_Iconify
 Iconifica
 ; Iconify
 ;
-MSG_Menu_MPlayer_About
+MSG_Menu_Project_About
 Informazioni...
 ; About...
 ;
-MSG_Menu_MPlayer_Quit
+MSG_Menu_Project_Quit
 Esci
 ; Quit
 ;
@@ -67,17 +59,25 @@ MSG_Menu_Play_Stop
 Stop
 ; Stop
 ;
+MSG_Menu_Play_Record
+Registra
+; Record stream
+;
 MSG_Menu_Play_Loop
 Ripeti
 ; Loop
 ;
-MSG_Menu_Play_PrevFilm
+MSG_Menu_Play_PrevFile
 Precedente
-; Prev film
+; Prev file
 ;
-MSG_Menu_Play_NextFilm
+MSG_Menu_Play_NextFile
 Successivo
-; Next film
+; Next file
+;
+MSG_Menu_Play_Properties
+Proprietà...
+; Properties...
 ;
 MSG_Menu_OptionsVideo
 Opzioni video
@@ -87,6 +87,14 @@ MSG_Menu_OptionsVideo_StayOnTop
 In primo piano
 ; Stay on top
 ;
+MSG_Menu_OptionsVideo_Fullscreen
+Schermo intero
+; Toggle fullscreen
+;
+MSG_Menu_OptionsVideo_Screenshot
+Cattura schermo
+; Screenshot
+;
 MSG_Menu_OptionsVideo_OpenSubtitles
 Apri sottotitoli...
 ; Open subtitles...
@@ -95,13 +103,17 @@ MSG_Menu_OptionsVideo_CycleSubtitles
 Cicla sottotitoli
 ; Cycle subtitles
 ;
-MSG_Menu_OptionsVideo_Fullscreen
-Schermo intero
-; Fullscreen
-;
-MSG_Menu_OptionsVideo_Screenshot
-Screenshot
-; Screenshot
+MSG_Menu_OptionsVideo_UnloadSubtitles
+Chiudi sottotitoli
+; Unload subtitles
+;
+MSG_Menu_OptionsVideo_AspectRatio
+Proporzioni
+; Aspect Ratio
+;
+MSG_Menu_OptionsVideo_AR_Original
+Originale
+; Original
 ;
 MSG_Menu_OptionsAudio
 Opzioni audio
@@ -119,6 +131,22 @@ MSG_Menu_OptionsAudio_VolumeDown
 Volume -
 ; Volume Down
 ;
+MSG_Menu_Settings
+Impostazioni
+; Settings
+;
+MSG_Menu_Settings_MPlayerGUI
+MPlayer-GUI...
+; MPlayer-GUI...
+;
+MSG_About_About
+Informazioni
+; About
+;
+MSG_About_Licence
+Licenza
+; Licence
+;
 MSG_About_Built
 Basato su MPlayer versione:
 ; Built against MPlayer version:
@@ -141,7 +169,7 @@ Team di MPlayer
 ;
 MSG_About_AmigaOS4Version
 Versione AmigaOS4 a cura di:
-; AmigaOS4 Version:
+; AmigaOS4 release:
 ;
 MSG_About_GCCVersion
 Versione GCC:
@@ -149,9 +177,19 @@ Versione GCC:
 ;
 MSG_About_ARexxPort
 Porta ARexx:
-; ARexx port:
+; ARexx Port:
+;
+MSG_About_Translation
+Traduzione:
+; Translation:
 ;
-MSG_Requester_OK	
+; translator: change to your name/nick/...
+;
+MSG_About_Translator
+Samir Hawamdeh
+; (using built-in strings)
+;
+MSG_Requester_OK
 _Ok
 ; _Ok
 ;
@@ -164,28 +202,28 @@ Apri stream
 ; Open a stream
 ;
 MSG_Requester_Network_Body
-Inserisci un URL da aprire
-; Enter the URL to open
+Inserisci un URL da aprire:
+; Enter URL to open:
 ;
 MSG_Requester_Network_Gadget
 _Carica|_Annulla
-; L_oad|_Cancel
+; _Load|_Cancel
 ;
 MSG_Requester_DVD_Title
 Carica DVD
 ; Load DVD
 ;
 MSG_Requester_DVD_Body
-Inserisci un capitolo da aprire
-; Enter Chapter to Open
+Inserisci un capitolo da aprire:
+; Enter Chapter to Open:
 ;
 MSG_Requester_DVD_Gadget
 _Apri|A_nnulla
-; O_pen|_Cancel
+; _Open|_Cancel
 ;
 MSG_Requester_DVD_Error
-Inserisci un valido protocollo DVD
-; Enter a valid DVD protocol
+Inserisci un valido protocollo DVD:
+; Enter valid DVD protocol:
 ;
 MSG_Requester_DVDNAV_Title
 Carica DVDNAV
@@ -200,22 +238,22 @@ Carica VCD
 ; Load VCD
 ;
 MSG_Requester_VCD_Body
-Inserisci un capitolo da aprire
-; Enter Chapter to Open
+Inserisci un capitolo da aprire:
+; Enter Chapter to Open:
 ;
 MSG_Requester_VCD_Gadget
 _Apri|A_nnulla
-; O_pen|_Cancel
+; _Open|_Cancel
 ;
 MSG_Requester_VCD_Error
-Inserisci un valido protocollo VCD
-; Enter a valid VCD protocol
+Inserisci un valido protocollo VCD:
+; Enter valid VCD protocol:
 ;
-MSG_Requester_OpenFile_Title
+MSG_Requester_OpenFile_Video
 Seleziona video
-; Choose a video
+; Choose video
 ;
-MSG_Requester_OpenSubTitle_Title
+MSG_Requester_OpenFile_SubTitles
 Seleziona sottotitoli
 ; Choose subtitles
 ;
@@ -223,12 +261,16 @@ MSG_Requester_Title_About
 Informazioni su MPlayer
 ; About MPlayer
 ;
-MSG_Warning_Title
+MSG_Requester_Title_Warning
 MPlayer: AVVISO!
 ; MPlayer: WARNING!
 ;
+MSG_Requester_Title_Error
+MPlayer: ERRORE!
+; MPlayer: ERROR!
+;
 MSG_Warning_AltiVec
-Spiacente, questa versione è solo per macchine\ndotate di CPU che supportano l'AltiVec!
+Spiacente, questa versione funziona solo su macchine\ndotate di CPU che supportano l'AltiVec!
 ; Sorry, this version is only for\nAltiVec capable machine!
 ;
 MSG_Warning_Button_OK
@@ -238,4 +280,52 @@ Ok
 MSG_Warning_Button_Cancel
 Annulla
 ; Cancel
+;
+MSG_Properties_Video
+\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRisoluzione: \033n%d x %d \n\033bFotogrammi/sec.: \033n%5.2f \0
+; \033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bResolution: \033n%d x %d \n\033bFrames/sec.: \033n%5.2f \0
+;
+MSG_Properties_Audio
+\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRate: \033n%d Hz \n\033bCanali: \033n%d \0
+; \033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRate: \033n%d Hz \n\033bChannels: \033n%d \0
+;
+MSG_Properties_Clip
+\033bTitolo: \033n%s \n\033bArtista: \033n%s \n\033bAlbum: \033n%s \n\033bAnno: \033n%s \n\033bCommento: \033n%s \n\033bGenere: \033n%s \0
+; \033bTitle: \033n%s \n\033bArtist: \033n%s \n\033bAlbum: \033n%s \n\033bYear: \033n%s \n\033bComment: \033n%s \n\033bGenre: \033n%s \0
+;
+MSG_Properties_Title
+MPlayer: Proprietà
+; MPlayer: Properties
+;
+MSG_Properties_Prop
+\033b VIDEO \033n\n%s\n\n\033b AUDIO \033n\n%s\n\n\033b CLIP \033n\n%s\n
+; \033b VIDEO \033n\n%s\n\n\033b AUDIO \033n\n%s\n\n\033b CLIP \033n\n%s\n
+;
+MSG_Properties_IW_Video
+Video
+; Video
+;
+MSG_Properties_IW_Audio
+Audio
+; Audio
+;
+MSG_Properties_IW_Clip
+Clip
+; Clip
+;
+MSG_Warning_Cant_Iconify
+Impossibile iconificare MPlayer!\nSta tentando di ottenere l'icona da un percorso errato
+; Can't iconify!\nTrying to get icon from wrong path.
+;
+MSG_RegisterAppID_Description
+Lettore Multimediale
+; The Movie Player
+;
+MSG_OSD_Added_Files
+File aggiunti
+; File(s) added.
+;
+MSG_Notify_Added_File
+Aggiunto: '%s'
+; Added: '%s'
 ;
\ Brak znaku nowej linii na koÅcu pliku
diff --color -rupN old/locale/MPlayer.cd new/locale/MPlayer.cd
--- old/locale/MPlayer.cd	2023-08-05 10:49:00.000000000 +0200
+++ new/locale/MPlayer.cd	2023-08-30 00:03:00.000000000 +0200
@@ -1,37 +1,31 @@
-; $VER: MPlayer.catalog 1.5.0 (5.08.2023)
+; $VER: MPlayer.catalog 1.5.0 (dd.mm.2023)
 ; MPlayer.cd
 ;
-MSG_About_About (//)
-About
+MSG_Menu_Project (//62)
+Project
 ;
-MSG_About_Licence (//)
-Licence
+MSG_Menu_Project_OpenFile (//62)
+Open file...
 ;
-MSG_Menu_MPlayer (//62)
-MPlayer
-;
-MSG_Menu_MPlayer_LoadFile (//62)
-Load file...
-;
-MSG_Menu_MPlayer_OpenDVD (//62)
+MSG_Menu_Project_OpenDVD (//62)
 Open DVD...
 ;
-MSG_Menu_MPlayer_OpenDVDNAV (//62)
+MSG_Menu_Project_OpenDVDNAV (//62)
 Open DVDNAV...
 ;
-MSG_Menu_MPlayer_OpenVCD (//62)
+MSG_Menu_Project_OpenVCD (//62)
 Open VCD...
 ;
-MSG_Menu_MPlayer_OpenNetwork (//62)
-Open a stream...
+MSG_Menu_Project_OpenNetwork (//62)
+Open stream...
 ;
-MSG_Menu_MPlayer_Iconify (//62)
+MSG_Menu_Project_Iconify (//62)
 Iconify
 ;
-MSG_Menu_MPlayer_About (//62)
+MSG_Menu_Project_About (//62)
 About...
 ;
-MSG_Menu_MPlayer_Quit (//62)
+MSG_Menu_Project_Quit (//62)
 Quit
 ;
 MSG_Menu_Play (//62)
@@ -43,14 +37,20 @@ Play/Pause
 MSG_Menu_Play_Stop (//62)
 Stop
 ;
+MSG_Menu_Play_Record (//62)
+Record stream
+;
 MSG_Menu_Play_Loop (//62)
 Loop
 ;
-MSG_Menu_Play_PrevFilm (//62)
-Prev film
+MSG_Menu_Play_PrevFile (//62)
+Prev file
 ;
-MSG_Menu_Play_NextFilm (//62)
-Next film
+MSG_Menu_Play_NextFile (//62)
+Next file
+;
+MSG_Menu_Play_Properties (//62)
+Properties...
 ;
 MSG_Menu_OptionsVideo (//62)
 Video options
@@ -58,17 +58,35 @@ Video options
 MSG_Menu_OptionsVideo_StayOnTop (//62)
 Stay on top
 ;
+MSG_Menu_OptionsVideo_Fullscreen (//62)
+Toggle fullscreen
+;
+MSG_Menu_OptionsVideo_Screenshot (//62)
+Screenshot
+;
 MSG_Menu_OptionsVideo_OpenSubtitles (//62)
 Open subtitles...
 ;
 MSG_Menu_OptionsVideo_CycleSubtitles (//62)
 Cycle subtitles
 ;
-MSG_Menu_OptionsVideo_Fullscreen (//62)
-Fullscreen
+MSG_Menu_OptionsVideo_UnloadSubtitles (//62)
+Unload subtitles
 ;
-MSG_Menu_OptionsVideo_Screenshot (//62)
-Screenshot
+MSG_Menu_OptionsVideo_SubtitlesSize (//62)
+Subtitles size
+;
+MSG_Menu_OptionsVideo_SubtitlesBig (//62)
+Bigger
+;
+MSG_Menu_OptionsVideo_SubtitlesSmall (//62)
+Smaller
+;
+MSG_Menu_OptionsVideo_AspectRatio (//62)
+Aspect Ratio
+;
+MSG_Menu_OptionsVideo_AR_Original (//62)
+Original
 ;
 MSG_Menu_OptionsAudio (//62)
 Audio options
@@ -82,6 +100,19 @@ Volume Up
 MSG_Menu_OptionsAudio_VolumeDown (//62)
 Volume Down
 ;
+MSG_Menu_Settings (//62)
+Settings
+;
+MSG_Menu_Settings_MPlayerGUI (//62)
+MPlayer-GUI...
+;
+;
+MSG_About_About (//)
+About
+;
+MSG_About_Licence (//)
+Licence
+;
 MSG_About_Built (//)
 Built against MPlayer version:
 ;
@@ -98,7 +129,7 @@ MSG_About_MPlayer_Team (//)
 MPlayer Team
 ;
 MSG_About_AmigaOS4Version (//)
-AmigaOS4 version:
+AmigaOS4 release:
 ;
 MSG_About_GCCVersion (//)
 GCC version:
@@ -106,6 +137,18 @@ GCC version:
 MSG_About_ARexxPort (//)
 ARexx Port:
 ;
+MSG_About_Translation (//)
+Translation:
+;
+; translator: change to your name/nick/...
+;
+MSG_About_Translator (//)
+(using built-in strings)
+;
+MSG_About_VideoDriver (//)
+Video driver in use:
+;
+;
 MSG_Requester_OK (//)
 _Ok
 ;
@@ -113,25 +156,25 @@ MSG_Requester_Title (//)
 MPlayer for AmigaOS4
 ;
 MSG_Requester_Network_Title (//)
-Open a stream
+Open stream
 ;
 MSG_Requester_Network_Body (//)
-Enter the URL to open
+Enter URL to open:
 ;
 MSG_Requester_Network_Gadget (//)
-L_oad|_Cancel
+_Load|_Cancel
 ;
 MSG_Requester_DVD_Title (//)
 Load DVD
 ;
 MSG_Requester_DVD_Body (//)
-Enter Chapter to Open
+Enter Chapter to open:
 ;
 MSG_Requester_DVD_Gadget (//)
-O_pen|_Cancel
+_Open|_Cancel
 ;
 MSG_Requester_DVD_Error (//)
-Enter a valid DVD protocol
+Enter valid DVD protocol:
 ;
 MSG_Requester_DVDNAV_Title (//)
 Load DVDNAV
@@ -143,26 +186,30 @@ MSG_Requester_VCD_Title (//)
 Load VCD
 ;
 MSG_Requester_VCD_Body (//)
-Enter Chapter to Open
+Enter Chapter to open:
 ;
 MSG_Requester_VCD_Gadget (//)
-O_pen|_Cancel
+_Open|_Cancel
 ;
 MSG_Requester_VCD_Error (//)
-Enter a valid VCD protocol
+Enter valid VCD protocol:
 ;
-MSG_Requester_OpenFile_Title (//)
-Choose a video
+MSG_Requester_OpenFile_Video (//)
+Choose video
 ;
-MSG_Requester_OpenSubTitle_Title (//)
+MSG_Requester_OpenFile_SubTitles (//)
 Choose subtitles
 ;
 MSG_Requester_Title_About (//)
 About MPlayer
 ;
-MSG_Warning_Title (//)
+MSG_Requester_Title_Warning (//)
 MPlayer: WARNING!
 ;
+MSG_Requester_Title_Error (//)
+MPlayer: ERROR!
+;
+;
 MSG_Warning_AltiVec (//)
 Sorry, this version is only for\nAltiVec capable machine!
 ;
@@ -171,4 +218,44 @@ Ok
 ;
 MSG_Warning_Button_Cancel (//)
 Cancel
+;
+;
+MSG_Properties_Video (//)
+\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bResolution: \033n%d x %d \n\033bFrames/sec.: \033n%5.2f \0
+;
+MSG_Properties_Audio (//)
+\033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRate: \033n%d Hz \n\033bChannels: \033n%d \0
+;
+MSG_Properties_Clip (//)
+\033bTitle: \033n%s \n\033bArtist: \033n%s \n\033bAlbum: \033n%s \n\033bYear: \033n%s \n\033bComment: \033n%s \n\033bGenre: \033n%s \0
+;
+MSG_Properties_Title (//)
+MPlayer: Properties
+;
+MSG_Properties_Prop (//)
+\033b VIDEO \033n\n%s\n\n\033b AUDIO \033n\n%s\n\n\033b CLIP \033n\n%s\n
+;
+MSG_Properties_IW_Video (//)
+Video
+;
+MSG_Properties_IW_Audio (//)
+Audio
+;
+MSG_Properties_IW_Clip (//)
+Clip
+;
+;
+MSG_Warning_Cant_Iconify (//)
+Can't iconify!\nTrying to get icon from wrong path.
+;
+;
+MSG_RegisterAppID_Description (//)
+The Movie Player
+;
+;
+MSG_OSD_Added_Files (//)
+Added %ld file(s)
+;
+MSG_Notify_Added_File (//)
+Added: '%s'
 ;
\ Brak znaku nowej linii na koÅcu pliku
diff --color -rupN old/locale/MPlayer.ct new/locale/MPlayer.ct
--- old/locale/MPlayer.ct	2023-08-04 22:56:00.000000000 +0200
+++ new/locale/MPlayer.ct	2023-08-29 16:35:00.000000000 +0200
@@ -2,50 +2,42 @@
 ## codeset 0
 ## language xxx
 ;
-; $VER: MPlayer.catalog 1.5.0 (4.08.2023)
+; $VER: MPlayer.catalog 1.5.0 (29.08.2023)
 ; MPlayer.ct
 ;
-MSG_About_About
+MSG_Menu_Project
 
-; About
+; Project
 ;
-MSG_About_Licence
+MSG_Menu_Project_OpenFile
 
-; Licence
+; Open file...
 ;
-MSG_Menu_MPlayer
-
-; MPlayer
-;
-MSG_Menu_MPlayer_LoadFile
-
-; Load file...
-;
-MSG_Menu_MPlayer_OpenDVD
+MSG_Menu_Project_OpenDVD
 
 ; Open DVD...
 ;
-MSG_Menu_MPlayer_OpenDVDNAV
+MSG_Menu_Project_OpenDVDNAV
 
 ; Open DVDNAV...
 ;
-MSG_Menu_MPlayer_OpenVCD
+MSG_Menu_Project_OpenVCD
 
 ; Open VCD...
 ;
-MSG_Menu_MPlayer_OpenNetwork
+MSG_Menu_Project_OpenNetwork
 
-; Open a stream...
+; Open stream...
 ;
-MSG_Menu_MPlayer_Iconify
+MSG_Menu_Project_Iconify
 
 ; Iconify
 ;
-MSG_Menu_MPlayer_About
+MSG_Menu_Project_About
 
 ; About...
 ;
-MSG_Menu_MPlayer_Quit
+MSG_Menu_Project_Quit
 
 ; Quit
 ;
@@ -61,17 +53,25 @@ MSG_Menu_Play_Stop
 
 ; Stop
 ;
+MSG_Menu_Play_Record
+
+; Record stream
+;
 MSG_Menu_Play_Loop
 
 ; Loop
 ;
-MSG_Menu_Play_PrevFilm
+MSG_Menu_Play_PrevFile
+
+; Prev file
+;
+MSG_Menu_Play_NextFile
 
-; Prev film
+; Next file
 ;
-MSG_Menu_Play_NextFilm
+MSG_Menu_Play_Properties
 
-; Next film
+; Properties...
 ;
 MSG_Menu_OptionsVideo
 
@@ -81,6 +81,14 @@ MSG_Menu_OptionsVideo_StayOnTop
 
 ; Stay on top
 ;
+MSG_Menu_OptionsVideo_Fullscreen
+
+; Toggle fullscreen
+;
+MSG_Menu_OptionsVideo_Screenshot
+
+; Screenshot
+;
 MSG_Menu_OptionsVideo_OpenSubtitles
 
 ; Open subtitles...
@@ -89,13 +97,17 @@ MSG_Menu_OptionsVideo_CycleSubtitles
 
 ; Cycle subtitles
 ;
-MSG_Menu_OptionsVideo_Fullscreen
+MSG_Menu_OptionsVideo_UnloadSubtitles
 
-; Fullscreen
+; Unload subtitles
 ;
-MSG_Menu_OptionsVideo_Screenshot
+MSG_Menu_OptionsVideo_AspectRatio
 
-; Screenshot
+; Aspect Ratio
+;
+MSG_Menu_OptionsVideo_AR_Original
+
+; Original
 ;
 MSG_Menu_OptionsAudio
 
@@ -113,6 +125,22 @@ MSG_Menu_OptionsAudio_VolumeDown
 
 ; Volume Down
 ;
+MSG_Menu_Settings
+
+; Settings
+;
+MSG_Menu_Settings_MPlayerGUI
+
+; MPlayer-GUI...
+;
+MSG_About_About
+
+; About
+;
+MSG_About_Licence
+
+; Licence
+;
 MSG_About_Built
 
 ; Built against MPlayer version:
@@ -135,7 +163,7 @@ MSG_About_MPlayer_Team
 ;
 MSG_About_AmigaOS4Version
 
-; AmigaOS4 Version:
+; AmigaOS4 release:
 ;
 MSG_About_GCCVersion
 
@@ -143,9 +171,19 @@ MSG_About_GCCVersion
 ;
 MSG_About_ARexxPort
 
-; ARexx port:
+; ARexx Port:
+;
+MSG_About_Translation
+
+; Translation:
+;
+; translator: change to your name/nick/...
 ;
-MSG_Requester_OK	
+MSG_About_Translator
+
+; (using built-in strings)
+;
+MSG_Requester_OK
 
 ; _Ok
 ;
@@ -155,15 +193,15 @@ MSG_Requester_Title
 ;
 MSG_Requester_Network_Title
 
-; Open a stream
+; Open stream
 ;
 MSG_Requester_Network_Body
 
-; Enter the URL to open
+; Enter URL to open:
 ;
 MSG_Requester_Network_Gadget
 
-; L_oad|_Cancel
+; _Load|_Cancel
 ;
 MSG_Requester_DVD_Title
 
@@ -171,15 +209,15 @@ MSG_Requester_DVD_Title
 ;
 MSG_Requester_DVD_Body
 
-; Enter Chapter to Open
+; Enter Chapter to open:
 ;
 MSG_Requester_DVD_Gadget
 
-; O_pen|_Cancel
+; _Open|_Cancel
 ;
 MSG_Requester_DVD_Error
 
-; Enter a valid DVD protocol
+; Enter valid DVD protocol:
 ;
 MSG_Requester_DVDNAV_Title
 
@@ -195,21 +233,21 @@ MSG_Requester_VCD_Title
 ;
 MSG_Requester_VCD_Body
 
-; Enter Chapter to Open
+; Enter Chapter to open:
 ;
 MSG_Requester_VCD_Gadget
 
-; O_pen|_Cancel
+; _Open|_Cancel
 ;
 MSG_Requester_VCD_Error
 
-; Enter a valid VCD protocol
+; Enter valid VCD protocol:
 ;
-MSG_Requester_OpenFile_Title
+MSG_Requester_OpenFile_Video
 
-; Choose a video
+; Choose video
 ;
-MSG_Requester_OpenSubTitle_Title
+MSG_Requester_OpenFile_SubTitles
 
 ; Choose subtitles
 ;
@@ -217,10 +255,14 @@ MSG_Requester_Title_About
 
 ; About MPlayer
 ;
-MSG_Warning_Title
+MSG_Requester_Title_Warning
 
 ; MPlayer: WARNING!
 ;
+MSG_Requester_Title_Error
+
+; MPlayer: ERROR!
+;
 MSG_Warning_AltiVec
 
 ; Sorry, this version is only for\nAltiVec capable machine!
@@ -232,4 +274,52 @@ MSG_Warning_Button_OK
 MSG_Warning_Button_Cancel
 
 ; Cancel
+;
+MSG_Properties_Video
+
+; \033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bResolution: \033n%d x %d \n\033bFrames/sec.: \033n%5.2f \0
+;
+MSG_Properties_Audio
+
+; \033bCodec: \033n%s \n\033bBitrate: \033n%d kbps \n\033bRate: \033n%d Hz \n\033bChannels: \033n%d \0
+;
+MSG_Properties_Clip
+
+; \033bTitle: \033n%s \n\033bArtist: \033n%s \n\033bAlbum: \033n%s \n\033bYear: \033n%s \n\033bComment: \033n%s \n\033bGenre: \033n%s \0
+;
+MSG_Properties_Title
+
+; MPlayer: Properties
+;
+MSG_Properties_Prop
+
+; \033b VIDEO \033n\n%s\n\n\033b AUDIO \033n\n%s\n\n\033b CLIP \033n\n%s\n
+;
+MSG_Properties_IW_Video
+
+; Video
+;
+MSG_Properties_IW_Audio
+
+; Audio
+;
+MSG_Properties_IW_Clip
+
+; Clip
+;
+MSG_Warning_Cant_Iconify
+
+; Can't iconify!\nTrying to get icon from wrong path.
+;
+MSG_RegisterAppID_Description
+
+; The Movie Player
+;
+MSG_OSD_Added_Files
+
+; File(s) added.
+;
+MSG_Notify_Added_File
+
+; Added: '%s'
 ;
\ Brak znaku nowej linii na koÅcu pliku
diff --color -rupN old/mplayer.c new/mplayer.c
--- old/mplayer.c	2023-08-01 08:28:44.000000000 +0200
+++ new/mplayer.c	2023-08-24 17:14:20.000000000 +0200
@@ -62,7 +62,7 @@
  * make it all work is to use the builtin SDL-bootstrap code, which
  * will be done automatically by replacing our main() if we include SDL.h.
  */
-#if defined(__APPLE__) && defined(CONFIG_SDL)
+#if (defined(__APPLE__) || defined(__AMIGAOS4__)) && defined(CONFIG_SDL)
 #ifdef CONFIG_SDL_SDL_H
 #include <SDL/SDL.h>
 #else
@@ -71,10 +71,11 @@
 #endif
 
 #ifdef __amigaos4__
+// #include "amigaos/debug.h"
 #include "amigaos/amigaos_stuff.h"
 //markus
 extern long arexx_gui;
-#include "./amigaos/arexx.h"
+//#include "./amigaos/arexx.h"
 //
 #endif
 
@@ -727,6 +728,11 @@ void exit_player_with_rc(enum exit_reaso
 
     current_module = "exit_player";
 
+#ifdef __amigaos4__
+    // AmigaOS_Close(); // changed to 'atexit(AmigaOS_Close);' before AmigaOS_Open()
+    SDL_Quit();
+#endif
+
     if (mpctx->playtree_iter)
         play_tree_iter_free(mpctx->playtree_iter);
     mpctx->playtree_iter = NULL;
@@ -762,11 +768,6 @@ void exit_player_with_rc(enum exit_reaso
 
     mp_msg_uninit();
 
-#ifdef __amigaos4__
-    AmigaOS_Close();
-    SDL_Quit();
-#endif
-
     exit(rc);
 }
 
@@ -2819,7 +2820,8 @@ int main(int argc, char *argv[])
     int i;
 
 #ifdef __amigaos4__
-    if (AmigaOS_Open(argc, argv) < 0) exit_player_with_rc(EXIT_QUIT,1);
+    atexit(AmigaOS_Close); // avoid unfreeded resources
+    if (AmigaOS_Open(argc, argv) == -1) exit_player_with_rc(EXIT_QUIT,1);
 #endif
 
     common_preinit(&argc, &argv);
@@ -2865,10 +2867,12 @@ int main(int argc, char *argv[])
                 exit_player_with_rc(EXIT_QUIT,1);
         }
         mpctx->playtree = m_config_parse_mp_command_line(mconfig, new_argc, new_argv);
+//NOTE: 'mplayer -input cmdlist' (and amybe other args) doesn't raech here
   }
 #else
     mpctx->playtree = m_config_parse_mp_command_line(mconfig, argc, argv);
 #endif
+
     if (mpctx->playtree == NULL) {
         // parse error
         opt_exit = 1;
diff --color -rupN old/README_AOS4 new/README_AOS4
--- old/README_AOS4	2023-08-01 20:41:04.000000000 +0200
+++ new/README_AOS4	2023-08-30 07:59:29.965037027 +0200
@@ -2,10 +2,12 @@ name: MPlayer
 description: A powerful multimedia video and audio player
 version: 1.5
 author: Various
-submitter: Michael Trebilcock
+submitter: Samir Hawamdeh
+url: http://www.mplayerhq.hu
 category: video/play
 replaces: video/play/mickjt-mplayer.lha
-license: Other
+requirements: AmigaOS 4.1 + Enhancer Software Core 2 (optional)
+license: GNU
 minosversion: 4.1
 distribute: yes
 fileid: 10446
@@ -17,128 +19,138 @@ Notes:
 
 Welcome to MPlayer, The Movie Player.
 
-MPlayer can play most standard video formats out of the box and almost all others with the help of external codecs.
+MPlayer can play most standard video formats out of the box and almost all the others with the help of external codecs.
 
 MPlayer currently works best from the command line, but visual feedback for many functions is available from its onscreen status display (OSD), which is also used for displaying subtitles.
 
 MPlayer for AmigaOS4 is currently based on MPlayer 1.5.0 (w/ FFmpeg 6.0), merging code from both LiveForIt-MPlayer and Andrea Palmatè's MPlayer ports, with various additional changes.
-The default settings in the config file will degrade the video quality to decrease CPU usage.
+
+The default settings in the config file will degrade the video quality in order to decrease the CPU usage.
 
 
 Credits:
 ========
 
-Thanks to everyone who has contributed to the development of MPlayer, Jörg Strohmayer, Andrea Palmatè, Kjetil Hvalstrand, Daniel Westerberg, Roman Kargin, Fabien Coeurjoly, Javier de Las Rivas,
-DET Nicolas, Diego Biurrum, Felix Bunemann, Ryan C. Fordon and many more.
+Thanks to everyone who has contributed to the development of MPlayer; Jörg Strohmayer, Andrea Palmatè, Kjetil Hvalstrand, Daniel Westerberg, Roman Kargin, Fabien Coeurjoly,
+Javier de Las Rivas, DET Nicolas, MickJT, Marek, Diego Biurrum, Felix Bunemann, Ryan C. Fordon and many more.
 
-Thanks to pjs, sundown, K-L, AmigaSociety, mbrantley, kas1e, samo79 and many others for testing.
+Thanks also to pjs, sundown, K-L, AmigaSociety, mbrantley, samo79 and many others for testing.
 
 
 Know problems:
 ==============
 
-* Support for va.library (VAAPI) WIP WIP WIP
-* Add "Load Subtitles" and "Properties" options in video menu
-* About window have problem when opened while MPlayer is playing a video in fullscreen
+* External windows have problems when opened while MPlayer is playing a video in fullscreen
 * Stay paused if using MPlayer-GUI and paused outside of it
-* vo_comp.c: Videos are not correctly centered on screen when opened in another seperated screen
+* vo_comp.c: Videos are not correctly centered on screen if opened into another seperated screen
 * vo_cgx_wpa.c: Video scaling in driver need to be reimplemented
 * vo_pip.c: Fullscreen support need to be reimplemented
-* vo_pip.c: Menu need to be reimplemented
-* vo_pip.c: Drag and Drop need to be reimplemented
 * vo_p96pip.c: Strange background color when starting a video, issue under investigation
-* vo_p96pip.c: Problem with high resolution videos (es. 1920*1080 caused a big stripe at the right side of the video area, probably a bug/limitation of P96)
+* vo_p96pip.c: Problem with high resolution videos (es. 1920*1080 videos caused a big stripe in the right area of the video)
+
 
 Changelog:
 ==========
 
-MPlayer 1.5 (MPlayer 1.5) - MickJT, Marek, Javier and samo79
+MPlayer 1.5 (MPlayer 1.5) - MickJT, Marek, Javier and samo79 (xx.xx.2023)
 	* Based on MPlayer 1.5 SVN-r38423 (FFmpeg 6.0)
-	  From now on the Amiga version will follow the official release numbering scheme
-	* Compiled with GCC 10.3
-	* Currently compiling with optimisation -O1
-	* Cleaned code
-	* Made screen/window title standard in all supported video drivers
-	* Added video path in all supported video drivers
-	  It show again the path of the video into the MPlayer's window as it was in the Andrea Palmatè version
-	* Added support for va.library (VAAPI) providing hardware video decoding (needs RadeonHD v5 / RadeonRX) WIP WIP WIP
+	  From now on, the AmigaOS4 release will follow the official versioning scheme!
+	* Compiled with GCC 11.2
+	* Currently compiled with optimisation -O2
+	* Added support for va.library (VAAPI) providing hardware video decoding! (needs RadeonHD v5 / RadeonRX) WIP WIP
+	* Added video's path in all availible video outputs (show file path in MPlayer window)
 	* Added more video formats in ASL requester and reorder them alphabetically
 	* Added gadgets for iconification and fullscreen
-	* Added AmiUpdate support again
-	* Fixed AppWindow support, now drag and drop of files over AmiDock works (thx Javier!)
-	* Fixed crash on AltiVec version when launched on non AltiVec CPUs
-	* Fixed crash on quit in the GL video drivers
+	* Added support for AmiUpdate (yes again!)
+	* Added "Iconify" option menu to iconify MPlayer from menu
+	* Added "Open subtitles" option menu to load the subtitles from MPlayer
+	* Added "Unload subtitles" option menu to unload the subtitles from MPlayer
+	* Added "Subtitles size" option menu to increase/decrease the size of the subtitles
+	* Added "Properties" option menu to show informations about the video playing
+	* Added "Record stream" option menu to record network streams WIP
+	* Added "Aspect Ratio" option menu to manage the aspect ratio of the video playing WIP
+	* Added "MPlayer-GUI" option menu to open MPlayer-GUI from MPlayer
+	* Added Polish and Spanish catalogs (credits: Marek and Javier)
+	* Fixed support for AppWindow, now drag and drop of files over AmiDock works (thx Javier!)
+	* Fixed crash on AltiVec version if launched on non AltiVec CPUs
+	* Fixed crash on quit in the GL video outputs
+	* PIP: Added support for menu
+	* Disabled some more debug outputs that was printing to shell
+	* Separation of video outputs for SM502 G4 vo_sdl_sm502.c (useful for QEMU emulation)
+	* Made screen/window titles standard in all availible video outputs
+	* Made drag and drop/append standard in all availible video outputs
 	* Improved RegisterApplication support
-	* Separation of video outputs for SM502 G4 vo_sdl_sm502.c
-	* .....
+	* New banner and iconsets (thx Mason!)
+	* A lot of bugfixes and code cleanup
 
-MPlayer 1.0.2 (MPlayer 1.4) - MickJT & Guillaume Boesel - Internal release
+MPlayer 1.0.2 (MPlayer 1.4) - MickJT & Guillaume "zzd10h" Boesel - Internal release
 	* Based on MPlayer 1.4 (FFmpeg 4.1)
 	* Comp_yuv(2): Allow driver to be used with RadeonRX.chip
-	* P96_pip: Properly fix distorted videos with some resolutions
-	* Added missing VCD AmigaOS4 specific support from older port
+	* P96_pip: Properly fix of distorted videos with some resolutions
+	* Added missing VCD AmigaOS4 specific support from the older port
 	* Stay paused if using MPlayer-GUI and paused outside of it ^ Yet to be added in (*bugged)
 	* Modifications by zzd10h:
 	  - Added MenuClass support if available (AmigaOS 4.1 FE required)
 	  - Added AISS images to MenuClass if available (TBIMAGES: assign required)
+	  - Added locale/catalog support
+	  - Added Italian translation (samo79)
+	  - Added GCC version in InfoWindow about window
+	  - Added __GNUC__ and #if HAVE_ALTIVEC in version.sh
 	  - Use of MenuImageSize environment variable to specify AISS picture size (SETENV SAVE MenuImageSize 16)
 	  - Use of AEon InfoWindow class for the about window, if available
 	  - Use of environment variable Disable_Banner_Images to disable about window banner (SETENV SAVE Disable_Banner_Images 1)
-	  - Added catalog support
-	  - Added Italian catalog (samo79)
 	  - Reenable AppWindow support to handle drop of files over the icon (*bugged)
 	  - Fixed new about window crash and avoid multiple openings
 	  - When a window is still open, trying to open another window or to quit MPlayer blinks the screen
-	  - PrintMsg timeout is now 15 seconds instead of 10 seconds
-	  - Added GCC version in InfoWindow about window
-	  - Added __GNUC__ and #if HAVE_ALTIVEC in version.sh
+	  - PrintMsg timeout is now set to 15 seconds instead of 10 seconds
 	  - MSG_Requester_Title_About for InfoWindow about window
 	  - Menu shortcuts modifications
 
 MPlayer 1.0.1 (MPlayer 1.3.0) - MickJT (30.12.2017) - Released (3.01.2018)
 	* Disabled experimental AHI code that was freezing some machines
-	* Suppressed an error preventing some .avi files playing with vo_comp_yuv/yuv2
+	* Suppressed an error preventing some .avi files playing with vo_comp_yuv/vo_comp_yuv2
 	* Fixed some path issues preventing OSD menus from working
-	* P96_PIP: Fixed an issue causing some videos to play distorted
-	* P96_PIP: Remember window position when returning from fullscreen
+	* P96_pip: Fixed an issue causing some videos to play distorted
+	* P96_pip: Remember window position when returning from fullscreen
 	* Added "Stay on Top" functionality for all video outputs
-	* Change keyboard shortcut for "Load File". Conflicted with "Loop"
+	* Change keyboard shortcut for "Open File". Conflicted with "Loop"
 	* Cosmetic tweaks to the about window
-	* Disabled some debug output that was printing to shell
+	* Disabled some debug outputs that was printing to shell
 
 MPlayer 1.0 (MPlayer 1.3.0) - MickJT (24.12.2017)
-	* Initial release
+	* Initial re-release
 	* Based on MPlayer 1.3.0 (FFmpeg 3.0)
 	* Merged AmigaOS4 code from LiveForIt-MPlayer
 	* Kept the Workbench startup code from afxgroup
 
+
 ----- LiveForIt release:
 
 
 MPlayer 6.5.8 (MPlayer 1.1.1) - AltiVec release only (13.08.2015)
-	* Back to FFmpeg 2.6.3, its just faster on my computer then 2.7.1 (Don't care about the green bug)
-	* AHI_DEV: Assembler optimized Float to Int for G3/Sam440/Sam460  (~320us delay cost on AmigaOne X1000)
-	* AHI_DEV: AltiVec optimized Float to int (~88us delay cost on AmigaOne X1000)
+	* Back to FFmpeg 2.6.3, it is just faster on my computer then 2.7.1 (Don't care about the green bug)
+	* AHI_DEV: Assembler optimised Float to Int for AmigaOne G3/SAM440/SAM460  (~320us delay cost on AmigaOne X1000)
+	* AHI_DEV: AltiVec optimised Float to int (~88us delay cost on AmigaOne X1000)
 
 MPlayer 6.5.7 (MPlayer 1.1.1) (19.07.2015)
 	* FFmpeg 2.7.1
 	* Some adjustment to AHI_DEV2, timeing
 
 MPlayer 6.5.6 (MPlayer 1.1.1)
-	* Video outputs, now know if ASL windows are open, and do not render on top the ASL window
+	* Video outputs now know if ASL requesters are opened and do not render on top the ASL window
 	* Fixed: vo_comp: when starting MPlayer in fullscreen mode, backfill window did not work
-	* Fix for about window, in full-screen mode, as it was painted over
+	* Fix for about window, in fullscreen mode as it was painted over
 	* Conf/input.conf now has mapped keys for dvdnav
-	* Menu, now as dvdnav option, (you most disable cache in config to use this option)
-	* Vo_comp_yuv now has the same changes as vo_comp_yuv2
+	* Menu, now as dvdnav option (you most disable cache in config to use this option)
 	* Lots of code missing in preinit() on p96_pip, hope this helps ;-)
+	* Comp_yuv now has the same changes as vo_comp_yuv2
+	* Comp_yuv2: Extra pageflip when going in fullscreen or window, for low FPS videos
 	* P96_pip: Wrong BytesPerRow fix
-	* P96_pip: replaced p96LockBitmap() with LockBitmap(), (it's two jump's faster, I think)
-	* P96_pip: replaced WaitTOF() with WaitBOVP( ViewPort )
-	* Vo_comp_yuv2: extra pageflip, when going fullscreen or window, for low fps videos
+	* P96_pip: Replaced p96LockBitmap() with LockBitmap() (it's two jump's faster, I think)
+	* P96_pip: Replaced WaitTOF() with WaitBOVP( ViewPort )
 	* Changed timeing in audio output AHI_DEV
 	* Rewrote buffering in AHI_DEV
-	* AHI playback process should now, stop if movie is paused, or buffer is empty
+	* AHI playback process should now stop if movie is paused, or the buffer is empty
 	* Changed video output priority, now "p96_pip" comes before "comp"
 
 MPlayer 6.5.5 (MPlayer 1.1.1)
@@ -147,11 +159,11 @@ MPlayer 6.5.5 (MPlayer 1.1.1)
 	* Updated readme from samo79 (thanks)
 	* Fixed: graphics.library check in CGX_WPA
 	* Renamed CGX_WPA to WPA on AmigaOS4
-	* Vo_comp_vuv2: Removed some extra layer locking, some times used 2 times
-	* Vo_comp_yuv2: Found an AltiVec version of memcpy, now used by vo_comp_yuv2
-	* Vo_comp_yuv2: Layerlocks & DoHookClipRects are NOW only used when needed
-	* Vo_comp_yuv2: Removed a few compiler warnings, it started to getting hard to find the real errors :-)
-	* Vo_comp_yuv2: tried to unroll a few loops
+	* Comp_yuv2: Removed some extra layer locking, some times used 2 times
+	* Comp_yuv2: Found an AltiVec version of memcpy, now used by vo_comp_yuv2
+	* Comp_yuv2: Layerlocks & DoHookClipRects are NOW only used when needed
+	* Comp_yuv2: Removed a few compiler warnings, it started to getting hard to find the real errors :-)
+	* Comp_yuv2: Tried to unroll a few loops
 
 MPlayer 6.5.4 (MPlayer 1.1.1)
 	* Fixed: Picasso96 OSD
@@ -162,33 +174,33 @@ MPlayer 6.5.4 (MPlayer 1.1.1)
 	* All CyberGfx stuff removed from cgx_wpa (pure graphics.library)
 
 MPlayer 6.5.3 (MPlayer 1.1.1)
-	* New: Adding Screenshotdir and EXTPATTERN
+	* New: Added Screenshotdir and EXTPATTERN (yes again!)
 	* New: Menu: cursor disappear: bug fix
-	* New: Drag and Drop: bug fix
-	* New: Fixed Screenshot, problem
+	* New: Fixed Screenshot problem
+	* Fix: Drag and drop: more bug fix
 
 MPlayer 6.5.2 (MPlayer 1.1.1)
-	* Fix: Drag and Drop
-	* Fix: Missing 3gp in ASL bug fix
+	* Fix: Drag and drop
+	* Fix: Missing 3gp in ASL requester bug fix
 
 MPlayer 6.5.1 (MPlayer 1.1.1) - FFmpeg 2.5 64 Bit fix
-	* New: Drag and Drop
-	* New: Missing 3gp in ASL bug fix
+	* New: Drag and drop
+	* New: Missing 3gp in ASL requester
 	* Fix: FFmpeg 2.5 (64 Bit fix)
 
 MPlayer 6.5 (MPlayer 1.1.1)
 	* New: Menus
 
 MPlayer 6.4 (MPlayer 1.1.1)
-	* Removed debug output from 
+	* Removed debug output from:
 	  stream.c, cache2.c, mplayer.c, vo_comp_yuv2.c, vo_comp_yuv
 	* Formatted some text in:
 	  ao_ahi_dev.c
-	* Replaced video output PIP with P96_pip video output
+	* Replaced PIP video output with P96_pip video output
 	* Fixed OSD for CGX_WPA
 	* Fixed SDL video output, window mode now is default
-	* Added NODMA and NODRI option for COMP_YUV2 and COMP_YUV
-	* Fixed a bug in COMP_YUV, colors where not copied correctly, 
+	* Added NODMA and NODRI option for comp_yuv and comp_yuv2
+	* Fixed a bug in comp_yuv, colors where not copied correctly,
 	  If the picture was drawn by 16 pixels slices of the height,
 	  (y offset was ignored), instead of by frame or DRI
 	* Fixed ARexx dead lock issue (for MPlayer-GUI)
@@ -208,11 +220,11 @@ MPlayer 6.2 (MPlayer 1.1.1)
 	* New version of comp_yuv is comp_yuv2, I kept the old one for testing
 	  See -vo help, for more info
 	  Note: The extra complexity can make vo look slower on some benchmarks,
-	  vc speed should have increased in speed, (but benchmarks are unrealistic 
+	  vc speed should have increased in speed, (but benchmarks are unrealistic
 	  because they do more OSD and PAGE_FLIPS then when you run it normally)
-	* Comp_yuv2 Fixed OSD text rendering bug when video support direct rendering
+	* Comp_yuv2: Fixed OSD text rendering bug when video support direct rendering
 	* Replaced more of 32bit off_t (offset type) shit by replacing it with int64_t,
-	  1000 of placed in the code, this should not be needed if the SDK supported 
+	  1000 of placed in the code, this should not be needed if the SDK supported
 	  #define _FILE_OFFSET_BITS 64 (please add support for it in the SDK)
 	  I hope large file support has been improved
 	* Vo_comp is now clean from CyberGfx and Picasso96 stuff
@@ -221,7 +233,7 @@ MPlayer 6.2 (MPlayer 1.1.1)
 	* DVD: Removed some silly debug text
 
 MPlayer 6.1 (MPlayer 1.1.1)
-	* Comp_yuv: Fixed green line on top of window/screen 
+	* Comp_yuv: Fixed green line on top of window/screen
 	* Fixed problem finding all screen modes
 	* Tried to increase AHI buffer (hope audio gets better)
 	* Rewrote args for video outputs
@@ -230,52 +242,52 @@ MPlayer 6.1 (MPlayer 1.1.1)
 	  vo:monitor=0 is for first monitor, 
 	  vo:monitor=1 is for second monitor
 	* Comp_yuv, comp_yuv & cgx_wpa now respect monitor nr.
-	  (Sorry don't think this can be done for overlay PIP / p96_PIP)
-	* Comp_yuv, now respects -monitoraspect command line argument
-	* Comp_yuv: default monitor aspect is now taken for named public screen, 
+	  (Sorry don't think this can be done for overlay PIP / p96_pip)
+	* Comp_yuv: Now respects -monitoraspect command line argument
+	* Comp_yuv: Default monitor aspect is now taken for named public screen, 
 	  If your using vo:pubscreen=dopus.1 (in case you have two monitors) 
 	  (else its taken from Workbench screen, like before)
 
 MPlayer 6.0 (MPlayer 1.1.1)
 	* Fixed green line on top of videos
-	* New MPlayer source code from MPlayerHQ
+	* New MPlayer source code from MPlayerHQ (http://www.mplayerhq.hu)
 	  See MPlayerHQ.changelog for more information about changes from HQ
 	  (Most important replaced AAC codec, no more crashes)
 	* New FFmpeg 2.2
-	  See FFmpeg changelog for more information
+	  See FFmpeg changelog for more informations
 	* Fixed Direct Rendering (DR) support added to comp_yuv, some codecs will use DR,
 	  this improve speed by moving less data around (some problems with subtitles)
 	* Fixed MPEG codec, so that DR works with interleaved yuv420p bitmaps
 	  (MPEG codec expects non interleaved yuv420p bitmaps and check bpr)
 	* Added Prefetch buffer to prevent inefficiency in device IO of AmigaOS4
 	  (This fixed slow DVD read speed)
-	* Ported AHI_DEV to version 1.1.1, changed timing, and reduced buffer size
+	* Ported AHI_DEV to version 1.1.1, changed timeing, and reduced buffer size
 	  (Done to fix lip sync issue)
 
 MPlayer 5.5 (MPlayer 1.0 RC5)
-	* Comp_yuv
+	* Comp_yuv:
 	  Composition with yuv420 bitmap support
 	* Fixed -x and -y option to auto scaling works when resizing window
 	* Comp:argb is now comp:32, comp:rgb is now comp:24
 	  Comp:16 exist for 16bit rgb video output (this was just an experiment)
 
 MPlayer 5.1 (MPlayer 1.0 RC5)
-	* Added support for comp::rgb and comp::argb option, (does not work yet for cgx_wpa)
+	* Added support for comp::rgb and comp::argb option (does not work yet for cgx_wpa)
 	* Workaround for SDL bug, program quits fine now
 	* Fix for DSI error when using MPlayer with -vo comp::PUBSCREEN=DOPUS.1
 	* Uppercase/lowercase now works for video output args
 	* Made screen title standard for p96_pip/cgx_wpa/comp
 	* Fixed screen Blanker
 	* Moved code to center window to gfx_common.c, this effects p96_pip, cgx_wpa and comp 
-	* Fixes to get MPlayer compiling with newest SDK
+	* Fixes to get MPlayer compiling with the newest SDK
 	* Fix for ARexx ASync problem
 
 MPlayer 4.2 (MPlayer 1.0 RC5)
 	* Fixed ARexx GetTimeLength
 
 MPlayer 4.1 (MPlayer 1.0 RC5)
-	* Fixed triple buffer in p96_pip
 	* Added aspect ratio for windows after resizing
+	* Fixed triple buffer in p96_pip
 	* Fixed ARexx so it works while playing audio files
 	* Fixed ARexx so "Address MPlayer.1;VOLUME 100 ABS" works
 	* Fixed ARexx so you don't get error codes, changed to use result instead
@@ -283,10 +295,10 @@ MPlayer 4.1 (MPlayer 1.0 RC5)
 	* ARexx HELP now returns all commands MPlayer supports
 
 MPlayer 3.1 (MPlayer 1.0 RC5)
+	* Added aspect ratio for vo_comp
 	* Fixed p96 fullscreen
 	* Fixed aspect ratio for p96 (broken in my version)
-	* Added aspect ratio for vo_comp
-	* Copied "double click" to full-screen event code from old p96_pip to cgx_common.c
+	* Copied "double click" to fullscreen event code from old p96_pip to cgx_common.c
 	* Centered windows when they open first time
 
 Version 2.1 beta 2 (MPlayer 1.0 RC5)
@@ -307,32 +319,34 @@ MPlayer 1.0 (MPlayer 1.0 RC5)
 	* Cgx_wpa has been changed from RGB to ARGB
 	* Fixed some async problem with cgx_wpa
 	* Added Mutex protection to some parts of code to prevent DSI errors
-	* This version of MPlayer use a newer LibPNG then the original one used by the Amiga version
+	* This version of MPlayer use a newer LibPNG then the original one used by the AmigaOS4 version
 	* All the library stuff has been moved into amiga_stuff.c
 	* Fixed a lockup problem when closing MPlayer without a GUI, missing #ifdef
-	* Fixed a problem with vo_comp where graphic was zoomed in after resizing window
+	* Fixed a problem with vo_comp where graphics was zoomed in after resizing window
 	* Fixed a problem with vo_comp because FFmpeg was initialized wrong for this output driver
 	* Purged vo_p96_pip removed all GUI stuff. (a bit broken now, but works, will be fixed in some other version)
 	* Renamed pip to p96_pip for compatibility
 
+
 ----- afxgroup release:
 
+
 MPlayer 1.0 RC3 for AmigaOS4 - Summer Edition Reloaded (21.08.2009)
 	* Added a check if the AltiVec is available for real when the AltiVec version is loaded... just to avoid the AltiVec version crash on SAM440
-	* Add the Drag&Drop function... now it is possible to drag the video directly on the MPlayer current video and replace it :-)
-	* A new "Load File" menu is present and it allow to load a file also when another is currently playing
 	* Added two tooltypes SCREENSHOTDIR and EXTPATTERN to change the directory where to save the screenshots and the ASL pattern of the MPlayer file requester
+	* Add the drag and drop functionality... now it is possible to drag the video directly on the current MPlayer video and replace it :-)
+	* A new "Load File" menu is present and it allow to load a file also when another is currently playing
 	* Updated to the latest SVN version
 	* Fixed a couple of bugs
 	* AltiVec version recompiled
 	* Now it is possible to take screenshots of a movie by pressing 's'
 
 MPlayer 1.0 RC3 for AmigaOS4 (1.04.2009)
-	* Should be really faster than previous version (due a faster FFmpeg...)
+	* Should be really faster than previous version (due to a faster FFmpeg...)
 	* Fixed fullscreen mouse pointer hide/show when click the mouse
 	* Now if you press "c"...
 	* Fixed Fullscreen play
-	* Updated to the MPlayer last version
+	* Updated to the latest version of MPlayer
 	* Fixed ARexx port. Now the Daniel GUI should work ok
 	  - Thanks to Fab for his MorphOS port of MPlayer that is a lot enhanced and faster... :-)
 
@@ -350,12 +364,12 @@ MPlayer 1.0 RC2 for AmigaOS4 Final - Epi
 MPlayer 1.0 RC1 for AmigaOS4 Final - XMAS Edition (24.12.2006)
 	* Full overlay support thru p96_pip driver (needs AmigaOS 4.0 Final)
 	* Removed cgx software modes
-	* The only software mode now is SDL
+	* The only software mode now is SDL (1.2.x)
 	* Using libmad for mp? audio decoding
-	* Use the very last MPlayer RC1 CVS
+	* Use the very latest MPlayer 1.0 RC1 CVS
 	* DVD now can be played at full speed (on my G4 at least...)
 	* Full screen is not yet supported by p96_pip driver
-	* Two separate version (G3 and G4)
+	* Two separate versions (PowerPC G3 and G4)
 	* IT NEEDS AMIGAOS 4.0 FINAL TO WORK!
 	* XMAS icon by Kenneth Lester jr (thx!)
 	* P96_pip driver made by Jörg Strohmayer (thx!)
@@ -363,25 +377,25 @@ MPlayer 1.0 RC1 for AmigaOS4 Final - XMA
 	* A lot of MPlayer bugfixes!
 
 MPlayer 1.0 Pre8 Dirty Preview Experimental Version #3 WIP WIP
-	* Overlay for Voodoo cards using a P96 and a CGX driver (thanks to Jörg Strohmayer)
-	* Using MPlayer Pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site
+	* Overlay for Voodoo gfx cards using a P96 and a CGX driver (thanks to Jörg Strohmayer)
+	* Using MPlayer 1.0 Pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site (http://www.mplayerhq.hu)
 	* Compiled with GCC 4.0.3
 
 MPlayer 1.0 Pre8 Dirty Preview Experimental Version #2 (4.04.2006)
-	* An ARexx port that is useful with new Daniel's GUI
+	* Compiled with GCC 4.0.2
+	* An ARexx port that is useful with the new Daniel's GUI
 	* Support for WMV3
-	* Using MPlayer Pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site
+	* Using MPlayer 1.0 Pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site (http://www.mplayerhq.hu)
 	* Many endianess bug fixed on many formats
-	* Full internet streaming
+	* Full internet streaming support
 	* A menu on video screen (only when is in window mode)
 	* The video driver now scale movies correctly (except for 16:9 one when in fullscreen...)
-	* Compiled with GCC 4.0.2
 
 MPlayer 1.0 Pre8 Dirty Preview Experimental Version
-	* Used -O4 optimization that now with new GCC work
-	* OGG playing problem now is resolved
-	* Using MPlayer pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site
-	* Some minor bugfixing
+	* Used -O4 optimisation now that the new GCC work
+	* OGG playing problem is now resolved
+	* Using MPlayer 1.0 Pre8 (plus CVS changes) version. This include many new features and codecs. Look at their site (http://www.mplayerhq.hu)
+	* Some minor bug fixing
 	* Video rescaling. Now work well! But it is slow
 	* Improved memcpy() function
 	* Now DVD playing support the DTS
@@ -389,41 +403,41 @@ MPlayer 1.0 Pre8 Dirty Preview Experimen
 MPlayer 1.0 Pre7 Dirty Preview #5 (17.08.2005)
 	* Recompiled with Newlib and GCC 3.4.4
 	* Using PThread library
-	* Using MPlayer Pre7 (plus CVS changes) version. This include many new features and codecs. Look at their site
+	* Using MPlayer 1.0 Pre7 (plus CVS changes) version. This include many new features and codecs. Look at their site (http://www.mplayerhq.hu)
 
 MPlayer 1.0 Pre7 Dirty Preview #4 Refresh (24.03.2005)
-	* Resolved the AltiVec problem on G3 (please report!!!)
+	* Resolved the AltiVec problem on PowerPC G3 (please report!!!)
 	* Resolved the GetBusKey Error
 	* Removed use of asyncio.library. With Olaf Barthel's clib2 the original MPlayer code works very well (almost sure... :-D)
-	* Using MPlayer Pre7 (plus CVS changes) version. This include many new features and codecs. Look at their site
-	* Working on a p96 native driver (not included in this version!!)
-	* Working on software scaling. MPlayer original source code of postprocessing is totally buggy! (Not included in this version!!)
+	* Using MPlayer 1.0 Pre7 (plus CVS changes) version. This include many new features and codecs. Look at their site (http://www.mplayerhq.hu)
+	* Working on a p96 native driver (not included in this version yet!!)
+	* Working on software scaling. MPlayer original source code of postprocessing is totally buggy! (Not included in this version yet!!)
 	* Removed WPA video driver. It was useless...
 	* Swapped vo_overlay and vo_cgx video drivers. Now it is possible to use MPlayer only with filename
 
 MPlayer 1.0 Pre6 Dirty Preview #4 (24.03.2005)
 	These are the major improvements:
 
-	* First of all the speed. You can notice speed increased of a 25-30%. This thanks to new Olaf Barthel's clib2-thread safe
+	* First of all the speed: You can notice a speed increased of a 25-30%. This thanks to the new Olaf Barthel's clib2-thread safe
 	* New video drivers and audio drivers:
 	  -vo sdl
 	  -ao sdl
 	  -vo jpg
 	  -vo png
-	  The SDL video drivers allow to see video at full screen without problems. The only problem is that the video driver starts in fullscreen mode. If you press 'f' key it switches on Window Mode. This driver allow to cycle the WB screen modes pressing 'c' key. So when in fullscreen you wanna change the screen resolution just press the key
-	  The SDL driver in full screen resolution (the first resolution) is slow because there is no hardware acceleration (no overlay, you know? ;-) ). So switch to window mode or change resolution
+	  The SDL video drivers allow to see video at fullscreen without problems. The only problem is that the video driver starts in fullscreen mode by default. If you press 'f' key it switches on Window Mode. This driver allow to cycle the WB screen modes by pressing 'c' key. So when in fullscreen, if you wanna change the screen resolution just press the key
+	  The SDL driver in fullscreen resolution (the first resolution) is slow because there is no hardware acceleration (no overlay, you know? ;-) ). So switch to window mode or change resolution
 	  The SDL audio drivers works like AHI driver. You can mix video and audio drivers as you want
 	  For example:
 	  -vo cgx_vmem -ao sdl
 	  -vo sdl -ao ahi
 	  and so on...
-	  The jpg and png drivers write the selected video on single frames in the video directory. So you can save the video in single frames. They cannot be used with other video and audio drivers. Just:
+	  The JPG and PNG drivers write the selected video on single frames in the video directory. So you can save the video in single frames. They cannot be used with other video and audio drivers. Just:
 	  mplayer -vo png Drive:video.avi
-	* Network Audio and Video streaming Now it is possible to use the audio and video streaming simply using this syntax:
+	* Network Audio and Video streaming: Now it is possible to use the audio and video streaming by simply using this syntax:
 	  mplayer http://www.mystreamingsite.com[:port]
 	  or better:
 	  mplayer -playlist http://www.mystreamingsite.com[:port]/mylist.pls
-	  Look that many site has other extension than pls. Even asp or php (with parameters included) pages can be viewed with -playlist option
+	  Look that many site has other extension than pls. Even ASP or PHP (with parameters included) pages can be viewed with -playlist option
 	* Playlist support the -playlist option is useful when you want to use a playlist file. Just edit files with songs or videos filename
 	  Example:
 	  list >ram:myplaylist.txt Video: LFORMAT %f%s
@@ -431,8 +445,8 @@ MPlayer 1.0 Pre6 Dirty Preview #4 (24.03
 	* New codecs supported
 	* And many other improvements and bug fixes
 	  The known bugs:
-	  - When you use SDL video driver and in the system is not present a large enough resolution, the video driver doesn't start. So it is recommended to create in the Picasso 96 a large resolution
-	  - If you wanna use CGX video drivers and want a fullscreen video that fill entire screen, you must create on Picasso 96 mode a resolution that has the same video width (and height). This because the CGX video is buggy... and i'm working on it
+	  - When you use SDL video driver and in the system is not present a large enough resolution, the video driver doesn't start. So it is recommended to create in the Picasso96 a large resolution
+	  - If you wanna use CGX video drivers and want a fullscreen video that fill the entire screen, you must create on Picasso96 mode a resolution that has the same video width (and height). This because the CGX video is buggy... and i'm working on it
 	  - Some DVD's reader signal a GetBusykey error. Please report to me the model
 	  - There are surely many other bugs. So please report to me
 
@@ -440,7 +454,7 @@ MPlayer 1.0 Pre6 Dirty Preview #3 (1.02.
 	* Two new output drivers
 	  -vo_jpeg
 	  -vo_png
-	  That allow to save a video into a single frames (jpeg and png respectively)
+	  That allow to save a video into a single frames (JPEG and PNG respectively)
 	* MPlayer now is compiled with new thread safe clib2 by Olaf Barthel
 	* DVD Playing
 	  The DVD can be viewed with:
@@ -449,10 +463,10 @@ MPlayer 1.0 Pre6 Dirty Preview #3 (1.02.
 	  -cdrom-device a1ide.device:x vcd://1
 	  Where x is the CD/DVD that you want to use
 	* Fullscreen playback
-	  Now it is possible to use with full screen with -fs parameter or pressing key 'f' or clicking on video during playing
+	  Now it is possible to use the fullscreen with -fs parameter, pressing the key 'f' or by double clicking on video during playing
 	  The net is not active yet (i'm working for the next release)
 	* AltiVec
-	  The AltiVec is not active on all libraries. This version is the 1.0 Pre6 + last CVS of FFmpeg and MPlayer (so most advanced than 1.0 Pre6)
+	  The AltiVec is not active on all libraries. This version is the 1.0 Pre6 + latest CVS of FFmpeg and MPlayer (so most advanced than 1.0 Pre6)
 	  DTS on DVD is not active yet, AC3 yes
 
 MPlayer 1.0 Pre6 Dirty Preview #2 (24.01.2005)
diff --color -rupN old/version.h new/version.h
--- old/version.h	1970-01-01 01:00:00.000000000 +0100
+++ new/version.h	2023-08-30 09:39:17.970189944 +0200
@@ -0,0 +1,11 @@
+#define VERSION "SVN-r38423-snapshot"
+#define AMIGA_VERSION "MPlayer 1.5 (30.08.2023)"
+#if HAVE_ALTIVEC
+#define AMIGA_VERSION_ABOUT "\033bMPlayer AltiVec Edition \033n1.5 (30.08.2023)"
+#else
+#define AMIGA_VERSION_ABOUT "\033bMPlayer Generic Edition \033n1.5 (30.08.2023)"
+#endif
+#define GCC_VERSION __GNUC__
+#define GCC_REVISION __GNUC_MINOR__
+#define GCC_PATCHLVL __GNUC_PATCHLEVEL__
+#define MP_TITLE "%s 1.5 "VERSION" (C) 2000-2023 MPlayer Team\n"
diff --color -rupN old/version.sh new/version.sh
--- old/version.sh	2023-08-01 08:28:44.000000000 +0200
+++ new/version.sh	2023-08-30 09:37:54.000000000 +0200
@@ -44,14 +44,15 @@ TITLE='#define MP_TITLE "%s '$AMIGA_VERS
 
 
 AMIGA_VERSION_ABOUT='#if HAVE_ALTIVEC
-#define AMIGA_VERSION_ABOUT "\n\33bMPlayer AltiVec Edition \33n '$AMIGA_VERSION' ('`date +"%d"`.`date +"%m"`.`date +"%Y"`')"
+#define AMIGA_VERSION_ABOUT "\033bMPlayer AltiVec Edition \033n'$AMIGA_VERSION' ('`date +"%d"`.`date +"%m"`.`date +"%Y"`')"
 #else
-#define AMIGA_VERSION_ABOUT "\n\33bMPlayer Generic Edition \33n '$AMIGA_VERSION' ('`date +"%d"`.`date +"%m"`.`date +"%Y"`')"
+#define AMIGA_VERSION_ABOUT "\033bMPlayer Generic Edition \033n'$AMIGA_VERSION' ('`date +"%d"`.`date +"%m"`.`date +"%Y"`')"
 #endif'
 
 AMIGA_VERSION='#define AMIGA_VERSION "MPlayer '$AMIGA_VERSION' ('`date +"%d"`.`date +"%m"`.`date +"%Y"`')"'
 AMIGA_GCC_VERSION='#define GCC_VERSION __GNUC__'
 AMIGA_GCC_REVISION='#define GCC_REVISION __GNUC_MINOR__'
+AMIGA_GCC_GCC_PATCHLVL='#define GCC_PATCHLVL __GNUC_PATCHLEVEL__'
 
 # Update version.h only on revision changes to avoid spurious rebuilds
 if test "$NEW_REVISION" != "$OLD_REVISION"; then
@@ -61,6 +62,7 @@ $AMIGA_VERSION
 $AMIGA_VERSION_ABOUT
 $AMIGA_GCC_VERSION
 $AMIGA_GCC_REVISION
+$AMIGA_GCC_GCC_PATCHLVL
 $TITLE
 EOF
 fi
